congratulations on completing the
exercise and I'm recalling and using
what you learned in the other Block B
exercises in this exercise we are going
to learn to generate more types of
random variables and we are going to
learn how to complete histograms in this
task for instance you're going to learn
how to write a program to generate a
multinomial random variable before we
get on to that however let's first
review briefly review what your program
that completed the last task did if you
did the task correctly the final result
shown in the plotting window would have
looked something like the graph on the
right hand side of this slide the bar
centered on 0 tells you the fraction of
your Bernoulli random variables that we
equal to 0 while the bar centered on 1
tells you the fraction of where
Bernoulli random variables that were
equal to 1
the Python code that generated this
graph is shown on the right-hand side of
this slide now if we focus only on the
part shown now this code should be very
familiar to you the code is essentially
generating a sample of 200 Bernoulli
random games it would have perhaps been
even more familiar had I not written a
function called Bernoulli to generate
the random variables and if I instead
included the function to generate the
random variables in the main loop I want
to get used to get used to this business
of writing and calling functions that we
learned about at the end of the second
block we exercise however and I see you
so I'll use this better familiar form
for the code
let's now turn to the first new bit of
code that we've introduced in this
exercise which I am now we showing you
here
the first line here creates two lists
both of which have two elements the
first of these lists X vowels just
contains the numbers 0 and 1 this
ultimate will you will be used for the x
coordinates of our bars the second
meanwhile has both elements set to 0
initially this is the list called Y
valves as the loop executes the 0th
element of this list will be used to
count the number of random variables
that are equal to 0 while the second
element of this list is used to count
the number of random variables that were
equal to 1
quickly when the leap is finished we
have a list why vowels that contains the
number of failures in its first element
and the number of successes in its
second element we can thus plot a bar
chart with x valves against y valves and
get something like the plot shown on the
left hand side of the slide
the estimate of the probability mass
function that you would get if he
plotted the data in this way however
would not be normalized
adding together the heights of all the
bars would give you n the number of
sampled data points rather than 1 to get
a normalized graph we thus divide each
element of y valves by the number of
variables we sampled as shown here
hopefully the manner in which this code
operates is reasonably clear and you can
also easily see how the part that
computes the histogram could be extended
so that you could estimate the
probability mass function for
multinomial random variables which are
discrete random variables that could
take to more than two values making this
clip extension is rather straightforward
it is simply a matter of increasing the
length of the two lists x pals and y
valves in fact the only slightly
difficult question is how do we generate
the multinomial random variables
to understand how to generate
multinomial random variables it is
useful to think once again about the
algorithm that we use to generate the
Bernoulli random variables if you
remember in describing this algorithm we
use the probability mass function shown
here to divide the interval between 0 &
1 into two segments with length
proportional to the probabilities of
success which is shown in green in the
figure and failure which is shown in
blue we then generated a uniform random
variable between 0 & 1 and if the value
of this random variable fell in the blue
region we set the Bernoulli random
variable to 0 if the value of this
random variable fed fell into the green
segment meanwhile we set the Bernoulli
random variable equal to 1 in the code
on the right have the slide we test
whether or not our random variable falls
in the blue region of the line by using
an if statement
I
have explained the way this algorithm
for generating Bernoulli random variable
works slightly differently to the way
that I've explained in the previous
videos because when you see the
algorithm in this way it is easy to see
how it could be extended on how we can
use an I similar idea to generate
variables from a multinomial
distribution to see how this was
consider the probability mass function
for the multinomial distribution where
the random variable can take one of
three different values 0 1 or 2 that is
shown here as we did for the Bernoulli
random variable we can put these three
bars side by side and thus combine them
into a single bar of length 1 as shown
here the division between the blue part
and the green part would be at p 0 so
the blue segment has a length of p 0 the
division part between the green part and
the red part is at p0 plus p1 so the
green part has a total length of p1
which leaves the red part having a
length of p2
we can now generate our uniform random
variable to 0 and 1 again
if the value that we generate with when
we generate that random variable is in
the blue segment of the line we set the
multinomial random variable equal to 0
if instead it is in the green segment of
the line then we set the multinomial
random variable equal to 1
lastly if the uniform random variable is
in the red segment of the line we set
the multinomial random variable equal to
2
the Python code to generate multinomial
random variables in this way is shown on
the right of this next slide as you can
see the first line in our function here
sets a variable called u equal to a
uniform random variable between 0 & 1
this is done in the usual way the second
line then checks if u is less than p0
and thus in the blue segment of the line
shown up here if u is less than p0
execution of the function stops at this
point and the function returns a value
of 0
if u is greater than p0 the execution of
the function continues and we check if u
is less than p0 plus p1
for this condition to be satisfied you
must lie within the green line segment
because the previous if statement has
just checked whether we were than blue
statement an established that we are not
we can now safely terminate the
execution of our function at this point
and return a value of 1 it's this second
condition that u is less than p0 plus p1
is satisfied
lastly if neither of these two
conditions are satisfied then we know
that the value of u must be within the
red line segment so our function returns
a 2
and that is it you should now know
enough to complete the task in the next
exercise which is while which were
asking to generate multiple samples from
a multinomial distribution and to
compute a histogram for these samples
the 2p key pieces of code that we have
covered in this video that you will need
to use to complete this task are shown
again in this final summary slide this
code on the left hand side is the path
for computing the histogram the key line
here is this one which counts how often
the variable takes each of the various
values in the sample space the code
shown here on the right hand side Lenoir
shows how you can generate multinomial
random variables this code can be in a
separate function or it can be embedded
within the loop that generates the
samples and computes the histogram good
luck with the next task