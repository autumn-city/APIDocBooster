 The implementation of onPause is very fast because the next activity is not resumed until this method returns.  And is either followed by onResume, if the activity returns back to the front, or onStop, if the activity is becoming invisible to the user.  This is how we implement this onPause callback method. 
For example, it is not uncommon to implement one with an Activity whose theme is set to that of a dialog.  In this case, displaying the dialog-as-an-Activity will cause the new Activity to be on the top of the stack, pausing what previously was there.
 So let me just override other methods also.  OnStart and onResume... onPause... onStop... onRestart... and last, onDestroy. 
 Last but not the least, how we destroy our application, that is the destroying lifecycle. 
If the window has a flag windowIsFloating or windowIsTranslucent, then it is considered that the activity doesn't make the underlying stuff invisible, otherwise it does and will cause onStop() to be called. 
