♪ (electronic music) ♪
Hi, guys.
In this session, we are going to cover
activity lifecycle
and managing activity states.
The first thing that we are going to do
is we are going to talk
about activity lifecycle
and how activities transition
from and into different states.
And then, we will be going to learn
about those callback methods
which are called during the state change.
We will also cover the saving
and restoring of instance state
when dealing with Android activities.
As an Android developer
it is really important to understand
the activity lifecycle.
This important concept will help you
build your Android application
because you are going to deal
with multiple activities
and you need to understand
how the operating system
is going to affect the way
the activity code is triggered.
Basically, what we are going
to look at here
is a normal flow
of an Android application.
So, if a user starts your application,
the activity is created
and until it gets destroyed
there will be some set of states for it.
And at each state a method is called
during the transition
between those states.
We know that activities
are pushed onto the stack.
It will be a "last in, first out"
type of arrangement
where activities will go
on the top of each other.
So, a good example of this would be
when Activity 2 is started
and comes in the foreground.
The previous activity--
that is Activity 1--
will go in the back stack
and it gets dropped.
And when we navigate back
from Activity 2 to Activity 1,
the Activity 2 is destroyed
and the Activity 1
will come in the foreground.
So, let's now have a look and understand
what happens if a user
starts your application.
And what are those different states
that an activity can be in
when visible, partially visible,
not visible, or hidden.
The activity is going to be created first,
and at this state, it is not visible.
Then it gets started
where the app is visible
but not its components.
And then, on onResume state
at this state the user
will see the activity
and it's in the foreground,
and users can interact with it.
Now, if the user
gets a pop-up dialog box,
the activity will go into
the paused state
where it is still
partially visible to the user.
Now, if the user leaves the activity,
then we are going into a paused state
and the activity
is actually no longer visible
so it's completely left the screen.
For example, our users click on a button
that launches another activity.
It might just go into a paused state,
but if a user hits Home button,
the activity completely exits
and is no longer visible at all.
The activity is no longer on the stack
and is in the stopped state.
Now the operating system
needs the memory back
that the application is occupying.
So, in destroyed state
it actually destroys the activity,
and at this time, the activity
is completely shut down.
Looking back through this,
your activity states
get changed by user action,
or by some configuration changes
such as device rotation, or system action.
These are the callbacks
called when the activity state changes
where we have onCreate.
This is an initialization phase
where you initialize your activity.
Then we have onStart.
It is called when the activity,
which means the screen,
is becoming visible.
We have onRestart.
So, prior to being restarted again,
it is called after your activity
has been stopped.
On onResume, called when the activity
will start interacting with the user.
At this point your activity
is at the top of the activity stack
with user input going to it.
onPause is called when your activity
is about to resume any previous activity.
onStop is called when your activity
is no longer visible but still exists
and all state information are preserved.
onDestroy--
it is the final call you receive
before your activity is destroyed.
This can happen either
because the activity is finishing
or because the system is temporarily
destroying this instance of the activity.
Let's understand the activity states
through callbacks graph.
For example, if you've been through
the onCreate, onStart, onResume,
we have our activity running
and then the activity becomes paused.
For example, someone clicks a button
and launches another activity
on the top of your activity
but, then they hit the back button
and they're going back to your activity,
onResume is going to be called
and your activity
is going to be running again.
Also, if the application is stopped
and a user has left the application,
completely left that activity,
onStop may get called.
But when the user goes
and relaunches your application,
onRestart is likely to be called
which will restart your application
but not recreate your application
because it's still in the memory,
the Android hasn't actually killed it.
So, in that case, we are going to go
back through that cycle
and onResume is going to be called
and your activity
is going to be running again.
Now, if the application
was actually killed,
then the next time it gets launched
it's going to restart at the onCreate.
So we have three basic spots
where your application
can essentially be launched.
One, either it's been killed,
or it's never been launched before
and it will go through onCreate.
The second, is where
it's actually been stopped
and then restarted
and it will start at onStart and go down.
And then the third one
is where it's just been paused
and resumed.
So, it's really important
to keep all these scenarios in mind
when you're building
your Android application.
Another thing to keep in mind here,
is that your application
is going to be actually destroyed
if the screen orientation changes.
So, when we look at this diagram
of the activity lifecycle,
onDestroy is going to be called
and your application
is going to be completely restarted
if the user changes the screen.
When we are working with the activity,
the onCreate is [most] required,
and if we want to change
the default behavior,
we need to override the other callbacks.
Let's get started
with callbacks implementation.
We already know
that when the activity is first created,
onCreate is called.
It handles all the static declaration,
like creating views,
binding data to lists, and so on.
This is always followed by onStart.
The noticeable thing
is that it takes a Bundle.
A Bundle is basically a bag
that we can put things into it.
One good way to think of this
is like when you're going through
the airport metal detector
and you grab one of those bins
and you put your keys, your wallet,
and all the metal stuff in the bin.
And then when you come
through the other side,
you get to pick it all back out
and put it in your pockets.
That's what this Bundle is.
The Bundle is our bin,
so in our bin we can put whatever we want
in from our application state
and this is going to be the data
that is important for the view,
for restoring the state of an application
but not include settings
because settings are going to be something
that we are going to want
to store for a long time
and not something
that we are going to restore
for this particular instance
of the activity.
This is how it is implemented.
Here in onStart the activity
is becoming visible to user,
which is followed by onResume
if the activity comes to the foreground,
or onStop if it becomes hidden.
And this is how it is implemented.
onRestart is called when your activity
has been stopped just before
it gets started again.
It is a transient state
which occurs very fast
and is always followed by onStart.
This shows the implementation
of onRestart callback.
onResume where activity will start
interacting with the user
and has started accepting the user input.
It has now moved to the top
of the activity stack
and is always followed by onPause.
This is how we implement onResume method.
In onPause it could be possible
when it is either about to resume
a previous activity
or it is partially visible
but user is leaving the activity.
This is typically considered
as the best state
to commit unsaved changes
to persistent data,
stop animations and anything
that consumes resources.
The implementation of onPause is very fast
because the next activity is not resumed
until this method returns.
And is either followed by onResume,
if the activity returns back to the front,
or onStop, if the activity
is becoming invisible to the user.
This is how we implement
this onPause callback method.
onStop is the stopped state
which is called when the activity
is no longer visible to the user,
when new activity is being started
and is brought in front of the one,
and this one is being destroyed.
It is either followed by onRestart,
if the activity is coming back
to interact with the user,
or onDestroy,
if this activity is going away.
This is how we implement onStop.
onDestroy is the state
where your activity is destroyed,
and it is the final call
which navigates the user
back to the previous activity,
or called if configuration changes.
It calls isFinishing method.
And remember, the system
may destroy the activity
without calling this method sometimes.
So use onPause or onStop
to save the data or state.
This is how we implement onDestroy method.
I talked about how in the lifecycle
of Android activity
we have various points
where the activity could be destroyed
and then need to be recreated.
Let's now see the activity instance state.
Configuration, like rotation of device,
or choosing different system language
that changes locale,
or getting into the multi-window mode
like in Android 7.
The configuration change
invalidates the current layout
or other resources.
And let's see what happens
when config changes,
how it affects the activity.
So, on configuration change,
the Android first shuts down the activity
by calling method in sequence,
that is onPause,
then onStop and then onDestroy.
Now, the second step
is where Android started all over again,
by calling onCreate, onStart
and finally onResume.
The user doesn't really know
that this is happening.
To them, they just launch your application
and they expect it
to be where they left it.
They don't realize that when they open
another application
and come back to your application again
that Android may have killed it.
And because your application
can be killed,
it's going to lose all the information
that it had in the memory.
For example, if the user
using your application,
the user had filled out
some text in the text box
and then your application was destroyed.
And then the user came back
to your application,
the text from the text box would be gone
because your application
would have been recreated.
All your activity
would have to be recreated.
So, state information is created
while the activity is running
and the state is lost
when device is rotated,
language changes,
or back button is pressed,
or the system clears the memory.
We handle all this
with activity instance state,
as Android is, by default
going to save the state
of all your reviews.
So, the views already implement a method
that serializes their own state,
but you are responsible
for saving other activity
and user progress data.
So, Android provides us a mechanism
that we can use in order
to save the state of the activity.
It will actually call the method
onSaveInstanceState
right before our activity
is about to be destroyed
by the operating system.
And then, when our application
is recreated,
you have seen in the previous slides
that the onCreate takes a parameter
which is a Bundle
that is a savedInstanceState
and we can get something
out of this SaveInstanceState
and restore our activity
to the state it was at earlier.
Do remember that it saves the data
only for this instance of the activity
during current session.
So, I'm going to override that method.
I'm going to override
onSaveInstanceState method.
And what I'm going to do here
is state this Bundle.
At this point in the activity,
what is the state
that we need to store it,
in case, if it was destroyed
and was recreated?
So, in order to store something
we can do outState.putString
and you can do whatever type you have
and you have to use a key.
So, in this case, let's make it
using key count and a value
that we'll store in here.
Okay, so now we are actually
going to store this
whenever our application is destroyed.
So, when our application is recreated,
we are going to restore that state.
This can be done in two ways.
Either using onCreate
which is more preferred
where it ensures that your user interface,
including any saved state,
is back up and running
as quickly as possible.
Or another way, by calling
or implementing callback
onRestoreInstanceState
which is called after onStart.
So, if savedInstanceState
doesn't equal null,
then we can go ahead.
And let's us log this existing out for now
just to show that we have gotten it.
And then we are going to get a message
by savedInstanceState.getState.
And remember our key is count
and we are expecting
that it's going to pull the value.
And in the same way, we can do it in
onRestoreInstanceState.
So, when you stop and restart
a new app session,
the activity instance states are lost
and your activities will revert
to their default appearance.
If you need to save user data
between app sessions,
use shared preferences or a database.
To learn more, be sure
to check out the reference links
about activity, activity lifecycle,
Bundle, and so on.
Our next practical will help you practice
the activity lifecycle,
and when activities start, stop, pause,
and are destroyed,
and how to retain activity state
across lifecycle events.
♪ (electronic music) ♪