std::uniform_real_distribution's objects are lightweight, so it's not a problem to construct them each time inside the loop.
I suggest you to take a look at Xavier initialisation: [https://pytorch.org/docs/stable/nn.html#torch.nn.init.xavier_uniform_ (hyper-link)]
#extension GL_ARB_explicit_uniform_location : enable
otherwise the specialization you define is distribution_traits<T, uniform_int_distribution<T>> and that doesn't match an instantiation like distribution_traits<float> because the second parameter is defaulted to void.
