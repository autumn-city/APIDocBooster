RMSprop uses a momentum-like exponential decay to the gradient history.  Gradients in extreme past have less influence. It modiﬁes AdaGrad optimizer to perform better in the non-convex setting by changing the gradient accumulation into an exponentially weighted moving average.
However, RMSProp does not keep a moving average of the gradient.  But it can maintain a momentum, like MomentumOptimizer.
 So, the algorithm  that we will talk about is what is RMSProp   which tries to address this problem  of Adagrad algorithm that is vanishing   learning rate as the time increases  as the number of iteration proceeds.  So, what is this RMSProp algorithm does  is instead of taking the accumulative sum   of squares of the gradients of the sum of the  squares of the past and gradients or this past   gradient starts from time t equal to 0. 
 So in   case of RMSProp, the scaling factor is not  the cumulative sum of gradient histories,   but it is the exponentially decaying  average of the squared gradients.  So, if I go to the updation algorithm is in  RMSProb, the updation algorithm will be like this;   you will find that you will compute the  gradient in the same way as we have done in   case of Adagrad, right. 
We are using gradient descent to calculate the gradient and then update the weights by backpropagation.  There are plenty optimizers, like the ones you mention and many more.
