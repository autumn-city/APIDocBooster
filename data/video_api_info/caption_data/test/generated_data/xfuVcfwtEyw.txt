hello welcome to a video tutorial that's
what happens on this channel I guess so
this is this is sponsored by spell thank
you so much to spell for the sponsorship
on what you're about to watch is an
edited version of a livestream that
happened a couple weeks ago with a guest
educator and artist Brooklyn based
educator artist Nabil Hussain I
recommend that you check out his website
linked in this video's description to
learn more about his background and his
current work and all sorts of wonderful
stuff that he is up to so what you're
gonna see from beginning to end in this
video is the process for taking a corpus
of text training a machine learning
model this particular model is called LS
TM long shirt short-term memory neural
network maybe we'll explain that a bit
more in the video and offer you some
resources to learn about it train a
model to learn about got text train it
in the cloud on spell you can go to
spell dot run slash coding training if
you want to sign up for that service and
follow along with the tutorial and then
download the train model then bring that
train model into the browser and with
JavaScript generate new text in the
style of the original text that the
model is trained on so you're gonna see
the full process for this tutorial
probably if you've never watched any of
my videos before you're new to coding
you might want to watch some of my
workflow videos that show you how to
like set up your environment you're
gonna need maybe a you're gonna need a
Python environment you're gonna need it
a code editor and know how to run a web
page in your browser that you're
developing locally on your computer but
I have videos that show all that stuff I
also have a video that introduces the
spell platform and give you some
background about how that works all
right so I hope you enjoyed this video
yeah you make something with this please
share it with me I would love to see
what kind of crazy and interesting and
wacky and original and fun and playful
projects you are inspired to make by
learning how to do this thank you again
to Nabil for being here to help to make
this tutorial and for spell for the
sponsorship okay bye-bye all right it's
hello everyone I'm the deal thanks Ann
from this great intro and
thanks though for paying me to make this
video or to do this live stream so if
you're kind of an outline of what I plan
to go through so I guess I'll start by
go ahead and introducing myself so I
already said hi I'm the Beal I live in
Brooklyn I'm a freelance technologist
educator did some other things
again thank you spell for sponsoring
this video
so this live stream is about how to
train an LS TM model using the spell
platform so like on some remote machines
somewhere and then how to use that model
that we've trained using a library
called mo 5ks which is a browser-based
front-end library for using machine
learning models so what I'm gonna do in
this video I've practiced most of this
I'm gonna try to do a few things truly
live for you here today is I'm gonna
kind of extend a project that I did
actually at the school for product
computation which Dan mentioned last
summer the way that that project works
is there's a bunch of random it'll
generate random rhymes right now this
what I have live on the web what I'm
actually showing from my website is
based on a Markov model so it's not
really machine learning it's just
probabilistic predicting the next
character based on the previous ones and
you can click this all day and it'll
keep coming up with more and more rhymes
the video in general as you know is
about training an LCM model using spell
and then using it in the browser via a
library called mo 5ks so let's go ahead
and get into it
so the next thing so I'm not really
gonna talk to you much in this video
about like the theory of neural networks
or what is an LS TM really but I feel
like I should probably say something so
first of all L SC M stands for long
short-term memory it's a specific type
of recurrent neural network and what is
useful about recurrent neural networks
or RN ends compared to some other types
of neural networks is the way that their
architecture includes loops and that can
be useful for kind of keeping data
around in the network so to speak which
is very useful for applications
involving
natural language human language because
context matters so much in language like
predicting the next character or the
next word might be my Yuma you might get
a much better prediction if you actually
remember what we said even some while
ago maybe like much earlier in a long
sense so I have a few quick references
here which by now are a little old but
this is these are what I read to like
learn a little bit about we're currently
neural network so there's a blog post
called the unreasonable effective our
current neural networks and there's this
other blog post called understanding LS
TMS
so yeah this gives a little bit of
overview of kind of the same stuff I was
talking about right humans don't think
they're thinking from scratch every
second you understand each word based on
the understanding of previous words and
that's what we want our network to do as
well which is why we're going to use
this LS TM model and yeah I know that
before I had the chance while preparing
for this video to watch a video that Dan
made kind of giving an overview of the
spell platform so that a link to that
video will also be added to the video
description and you can kind of get into
a little bit more depth about using
spell and I'll also mention some things
about using spell as we go through this
okay so when you want to do a project
like this the first thing that you have
to do is get your corpus of data so in
this case since I was getting song
lyrics I used a site called genius comm
which you might be familiar with is a
popular lyrics website I had some other
features too but the main thing I use it
for and I think most people use it for
is reading lyrics so what I'm gonna do
I'm gonna try to do everything kind of
from scratch so to speak so that you
should be able to follow along in theory
so what I'm gonna do this is over
positive a folder that I used to prepare
what I'm going to do is just make a new
folder called spell live stream and I'm
gonna do everything from inside of this
folder which just lives somewhere on my
computer okay so write down this folder
is empty and so the first thing that I'm
going to do
is just clone my generative doom
repository from github there's only
actually one file in there that I care
about so maybe let me not actually clone
the whole pod story let me just get that
one file okay so I'm just going to where
where this is it's in data but did I
push it up I have so many branches here
okay why don't I use the one that I have
on my computer so I'm just gonna copy a
file that I have on my computer into
this folder so where was that in spell
demo slash generative doom slash data I
have a file called input.txt that I just
moved that I just brought a copy of into
my current directory and we can just
check it out really quickly let them put
that txt so you can see this is just a
list of lyrics okay this is my corpus
and it's worth noting that the data set
I'm actually using for this example
isn't that big we can check the size of
it with the command-line utility edu for
disk usage path the human readable flag
so that we can actually tell how big
this file is and it's about 308
kilobytes so it's not huge normally when
when you're near training machine
learning models kind of the more data
the better but I got all the lyrics that
I could find by this artist this is this
is the this is really the most that I
could get so that's what we're gonna use
cool so it's also worth noting that you
have to clean the data before you train
it so I can actually go ahead and show I
can go ahead and show the code that I
used to get these lyrics so I'm not
gonna go into full depth but again it's
on my github if you want to check it out
so let's let's put it over here okay so
I happened to do my scraping using
Python you can do this in any language
you can you can do web scraping using
nodejs or Ruby or whatever your favorite
language is but I happen to have already
used before a Python library called
beautifulsoup
which is very useful for web scraping
and so
it so happens that genius calm happens
to keep their lyrics in like their URL
follow a pattern like this genius calm /
the name of the artist which I
substituted in here and the name of the
song which I substituted in here and
then I use another Python library called
requests to just go ahead and fetch all
these different things I'm so that's the
basic idea I'm not gonna go into full
depth but I just kind of hard-coded a
lot of names of different songs into
here and then I have a main loop which
basically just loops through each artist
named because doom has actually recorded
under many different names so I can't
just need the same orders name all the
time and then the same thing for the
album's and then finally the songs in
order to go ahead and just fetch all of
this data and the thing is that when you
just go directly like to some you know
to some lyrics website like when you
fetch the data on the page you end up
getting a lot of other data that you
don't really care about in the HTML and
so you have an important step is to
clean the data so that when you're
training the model if you're only
training it on the actual corpus that
you care about and you're not training
it on like the angle brackets of HTML
tags or something like that that you
don't actually want so again I think I
have most of that code that I use to
clean it on on the github I think it is
theirs but if not there are other
resources that you can use to learn more
about data cleaning again this video is
really about training machine learning
models using spell and then using them
in the browser so let's get back to that
oh yeah I wanted to mention Project
Gutenberg is another resource that has
lots of free text that's in the public
domain that you can just use web
scraping with nodejs is another resource
that i've happened to looked at for
doing this kind of thing and so although
my script at PI final in my generative
doom repository doesn't show this yeah
the original version I kind of kept each
file keep kept each song in its own file
of lyrics but it so happens that the
what I'm gonna show you next
works with an input that's just one big
input file I've been put t xt so I just
did some boring shell script stuff to
just concatenate all the files together
and I've already noted that my data said
it's kind of small so that's everything
that I wanted to say about getting data
so let's kind of get into the main thing
so I think I already did this part I
already created a new directory for all
this stuff to live in okay so let's go
ahead and go on to the next step so it's
a good habit I think to use virtual end
at least with Python - I know I
understand things have kind of moved on
a bit with Python 3 but I'm still on the
Python 2 so I'm gonna use this virtual
and thing to kind of keep my my
dependencies isolated although I think
there should actually only be one but
let's go ahead and do that anyway so I
have some other virtual and active right
now it so happens I see that for my
command prompt over here so I just ran
this command deactivate to get rid of
that I'm just gonna clear the screen to
make it a little less noisy here and
then what did I want to do I wanted to
create a new virtual end and what did I
want to call it I wanted to call it
spell video virtual ends okay so it's
setting up a new virtual environment
which lives inside of this folder here
and the way that you use Python virtual
ends to get it active is you say what is
it
spell video virtual and slash bin slash
activate oh I'd say sourced at the
beginning source and then the path to
this activate script ok all right
and now you can see my prompt change
because I have to have my terminal
you know preferences set up that way so
that I can remember what virtual end I'm
in okay so I did that and oh yeah I
already went and got that input file
which I should probably push it up I
haven't actually pushed up to the github
like the one the one file version but
you know life is messy so but what I am
actually going to get the proper version
of from github is this repository called
training LS TM and so I'm just gonna go
ahead and clone that and let's actually
let's actually go and take a look at
that repository a nice readme cool so
you can see that this you can see from
the description of this repository
training in LS TM Network and using the
model ml 5 j s that it's highly relevant
what we're doing in this video
so the the directions in this
repositories readme are based on what
you would want to do if you were
training the machine learning model
locally on your own computer so if
that's what you want to do you can go
ahead and follow this but since this
video is about how to use spell that's
what I'm actually going to do so I'm not
going to follow these directions exactly
but we are gonna fall along with certain
parts of it so okay so I've already
cloned this repository right I was the
last man that I ran so I'm going to go
ahead and enter into that repository and
then what I want to do is create a
directory inside of here called data and
then I'm going to go ahead and move that
input txt file into that data directory
or a copy I'd rather I guess I could
have deleted it in the other graph
through both whatever okay
okay great so this is the setup we have
a repository we have this repository
locally that is going to help us train
an LS TM network using tensorflow and
then we're gonna after we train the
model we can use it in ml v j s
so we're pretty much done with our setup
let's get into actually training the
model so again this is the link that you
can use to sign up for spell if you
haven't already it so happens that I
have already so I'm I should be logged
in here let me just make sure I'm been
logged down I haven't so I'm I'm in here
in spell that run and it gives me some
information about how do you install
spell have a login with spell there's a
little quick start guide that you can
check out these are some of the
resources that I used when preparing for
this video so yeah like I mentioned that
other training Ella steam repository
tells you how to run locally but for us
all we really do need to install is
spell so I'm going to go ahead and do
that with pip install spell and it's
gonna go ahead and fetch spell and
whatever things spell depends on from
the Python package
pi PI whatever it's called it's gonna go
ahead and just get that okay and then
once it's done installing I'll be able
to log in alright I can't remember it so
you see it greeted me hello Nabil
Hussain so that's me so I am logged in
as myself and if you ever forget who
your login is for some reason the spell
command has a lot of sub commands like
spell who am I will tell you who you are
but what I'm gonna go ahead and get
started with creating this model and the
first thing that I that we need to do is
to upload the file to spell ok so what I
want to run is this command here spell
upload the path on my local computer of
the final and then I want to give it a
name of where I'm going to upload it to
ok so I just got a piece that command
spell upload my data slash input.txt to
this destination oh it's actually gonna
prompt me for the destination in a
minute it doesn't want that yet but it's
gonna want that momentarily so let me
just say spell upload the name of the
file that I want to upload and now it's
asking me for the name for the upload I
was trying to
a little bit early and it tells me that
my the file this is the path to it on my
local computer that I'm typing on right
now will be accessible at uploads /name
/parent 0 spell live stream doom ok
total upload size 307 k the same as what
we saw or only very close what we saw
when we ran the do command earlier and
the upload completed so that's great so
what we're going to do now this is kind
of the most probably most complicated
command that we're gonna run but it's
really the only one this is really the
this is really what's saying to go ahead
and actually run the Python script that
we downloaded from train that training a
list en git repository ok height we're
gonna run that with Python this train
that py script with the data dear set to
what I happen to call data that's the
name of the folder where I put that
input dot txt and I'm going to run it
and I'm gonna mount the data that I'm
gonna mount the folder that i had just
created by uploading that file as the
name data so that it can understand this
data directory ok so I should get I
think one error when I do this and I'll
talk about why ok spell run mounts nice
Janish mount uploads slash Nabeel spell
doom oh I called it live stream my notes
I didn't white update from when from
when I practiced so let me go ahead and
fix that
okay live stream okay so let's try that
and it tells me that there are some
untracked files in this repository and
they won't be available on this run
could see me run anyway no that's really
the file that I care about so spell
encourages us
to use the get version control system to
make sure that the data that we're
training on is checked in and that's
very good for reproducibility if we want
to go back later and understand like
what was going on what was there so I'm
gonna go ahead and do and kind of follow
the suggested workflow so I'm gonna go
ahead and get adopt or I guess I could
get add data whatever that's the only
thing
same effect in this particular case and
I'm gonna say add data input dot txt
file of doom lyrics okay and now having
done that if I run the same command it
won't give me that same warning since
the files are now tracked instead of
being on tracked okay yeah so let me go
ahead and start to do this and then I'll
go ahead and mention that other thing
that I thought I was going to mention so
I'm just gonna press up a few times to
just go back to my street or run the
same command again slow run I'm mounting
that data folder that I uploaded to be
called data oh I put it in the wrong
order so one thing to mention I think is
that if you're gonna mount the data file
you didn't at you don't actually have to
commit it no they get commit because
they pull it from there so you can do
either oh and if you so if you don't
want to upload it with git then you can
do the mounting thing that you're
showing now okay yeah oh right yes sir
I'm kind of so there's more than one way
to work with spelling I think I kind of
conflated two of them a little bit so I
I didn't actually need to do the git
commit because of the way that I'm doing
that I'm doing this because I uploaded
it before and that will also kind of
give some of the same live
reproducibility benefits because spell
will keep a record of what we uploaded
but it doesn't hurt to get committed
either let me just fix that typo should
bring in this case it's such a small
file it doesn't really matter
yeah if you're working with like a huge
gigabyte file or something right want to
upload that separately without having
like commit it also right yeah because
git isn't always the best for dealing
with large files which is why there's
you know tools like spell and tools like
what does it get whatever there's a
bunch of tools that's cool so let me
just go ahead and fix that typo and I
should fix that on my notes as well
tells me everything is up to date
because I did make that commit although
like I mentioned I didn't really have to
it tells me it's casting spell number 16
so I happened to have you spell about 15
times before tells me I can stop viewing
the logs with ctrl C twelve meets
requesting the machine and building and
mounting and the run is running so this
is still running and like it told me
before I can just get out of the logs in
my local terminals control C but this
this is running on a remote machine that
spell has provisioned and set up very
nicely for me so I don't have to worry
about it so I'm not actually stopping
the run from happening when I control
see him just stopping the logs from
appearing in my own terminal if I want
to check out those logs I can say spell
logs 16 and they'll start appearing
again and there's also some other
commands that it told me about like I
could kill it with spell kill whatever
but I don't want to I'm gonna let it
keep burning and besides checking up the
logs locally with spell logs the name
the number of the run you could also
come over here to this fell in this
about web UI and check out different
information about the run in here but as
you may have noticed from this video I
tend to have a preference for the
command line so I'm gonna keep doing
things mostly that way cool so let's see
oh yeah so one thing I did want to
mention was the parameters or what are
sometimes called the hyper parameters of
the network so let's just go back to
this get read me really quick so yeah
like I said this gives you more
information about how you would run it
locally including how you can pass
additional flags that I didn't bother
passing to control more of the
characteristics of the network like its
size how many layers they are the length
of the sequence and various other things
that you can read more about in this
repository and they have here some
recommendations for what you
want to select for your hyper parameters
according to the size of your training
data set because of my file because my
training dataset is so small I've
decided that defaults are probably fine
the next thing that I wanted to talk
about is the difference between running
on CPU vs. GPU so I imagine this might
be review for many viewers but I'm a
teacher so I'm always a fan of just
reviewing material so the CPU is the
central processing unit of your computer
that has maybe if a little bit of
parallelism but for the most part is
best at running things sequentially very
fast and the model of computation is a
little bit different from that of a GPU
which at some point stood for graphics
processing unit and maybe still does but
maybe that acronym has been retired by
now because GPUs actually have very many
applications other than graphics
including training neural networks on
text for example GPUs historically like
they got I think that name because like
each pixel on a screen for the most part
is independent of each other one and so
it can be computed independently and so
a GPU is much more highly parallel
compared to a CPU like it's not going to
be as fast at completing like you know
one single task but it is very good for
displaying things on screens and it also
happens to be very good for training
neural networks so in the last in the
last command that I ran over here on the
command line to train the neural network
this is running by a CPU and what I
could do if I wants both to instead
might run my code on a GPU is just tell
it the best type of machine I want by
adding this - - Mitch machine type flag
and the machine type that I'm gonna use
is k80
okay so where does this ket come from
well if you check out spell that run
slash pricing you'll see some
information about how
spell charges for different types of
machine types according to your needs
for whether this GPU or that CPU is the
best for your particular task you can
see there's a few different ones CPU CPU
big you know all these things ke ke D
happens to be one of the less expensive
GPU units so it's good enough for my
purses and that is what I'm going to use
okay so I go ahead and run that command
everything's up to date it's casting
phone number 17 we see a very similar
bit of output as we did before as it
gets ready to start training the model
and the run is running so in a moment we
should start seeing the lungs after it
reads the text file all right so now
this this run is running and I don't
know how obvious this is if you're
following along but it's especially
noticeable at least for me that this is
happening a lot faster okay this this
model is being trained a lot faster via
GPU then the CPU one was so the CPU one
got a head start but I still expect that
the GPU one will actually finish
substantially faster and we see we're
already at like 413 out of 6,000
iterations and I think that it's going
through the cherian the model like if we
check in on the previous one let's see
how far it is
yeah actually okay no I mean the head
start ahead was pretty big but you can
see that the GP one is is moving faster
like if we actually go in because like I
mentioned before I've had a few practice
runs here before we can look at a few
ones that I did before yeah these are
kind of my first few practice runs using
a slightly different model you can see
here but this one on CPU took close to
five hours and on GPU took only a little
bit more than 15 minutes
and yeah so GPU is faster for this
particular use case okay so just for the
sake of time I'm going to grab a
that I had already trained before it
rather than just waiting for this one to
go all the way through although we could
we could do that maybe we can actually
use this model later if people are
interested in that but so what I want to
do to grab the data from spell is to run
this command here spell CP runs slash
the number of the run slash models and
that's how I'm gonna fetch that data
okay so I'm just gonna see the appear
and now I'm kind of in my like home
folder of all the different things that
I'm kind of you know grabbing from here
grabbing from there to put together into
this demo I'm gonna go ahead and run
spell CP and was 15 right let me just
look here again yeah yeah so you can see
this is using that same training OS TM I
was talking about it completed in about
5 minutes actually I guess this one
should complete pretty quickly too and
that was that was a practice run I did
just a few minutes before this
livestream started so I'm gonna spell CP
runs / 15 / models and it's copying 10
files that are from there okay io us hi
LS data it remembers the same data
directory that I passed in before as the
name and these 10 files constitute the
model okay I'm not really gonna go into
depth about what are these files and
what's in them but yeah if you're
following along you could poke into them
and check it out I'm cool so we framed
the model we've used spell to train a LS
TM model on a corpus of data that we
obtained and now that we have the model
let's use it for something so I'm going
to borrow and then modify an example
from this repository here on the ml 5 GS
github account they have a repository
called ml 5 examples so there's a whole
collection of examples there's a bunch
of them you can find out a little bit
about how it's organized and some other
stuff from their readme I'm going to use
one in the
v JS folder we are worried about LST m/s
yeah this interactive one is also
interesting that's more I mean it's more
interactive I'm not really gonna
describe it we're going to use the non
interactive version OST M text and we
have here just a few files so they
actually have a pre trained model that
I'm gonna just ignore it and not use
because we're gonna use our model that
we just trained into n but what I'm
gonna do is just fetch these two files
this HTML file and sketch that is final
and because this repository is big and I
just don't really want to wait to clone
it I'm literally just gonna fetch these
two files and nothing else okay so what
I'm gonna do is just create other
director you wanna ml v LS TM example
and I will change my current directory
to be in there let me just clear my
screen for clarity sake and then I'm
just gonna use the command line program
W gap which will just fetch the raw file
I did have to click raw on github and
will fetch it into my onto my local
machine so I do that and then I go back
and I do the same thing with sketched up
to s okay I just find this one raw file
copy the URL and I use the program W get
to download it locally and so now if I
list what's here I have these two finals
index dot HTML and sketch a s so let's
take a minute to check out what will
read the files themselves and we'll also
use them so what I'm gonna do is just
run a program called HTTP server which
you could install if you want if you
don't already have it with what is it
npm install - d HTTP - server you can
use you know if you're used to using a
different web server anything that will
serve up an index dot HTML and your
local folder is fine so it tells me
where tells me the URL i can go to on
localhost - check this out so I'm gonna
go there
it says lsdm text generation example
this example is a pre trained model on a
corpus of Virginia Woolf although I'm
actually not doing that so I might
change that so let's actually go ahead
and go into this file and also look at
the JavaScript file ok so let me I mean
he max user I'm just gonna go ahead and
I'm gonna have repose and I call it spa
livestream ok so these are the two files
that I had just downloaded a moment ago
it's indexed at HTML and sketched at Jas
so let me open those up in a way that's
gonna be a little bit more readable for
you my notes before we're so I mean like
Angus let me do it over here then like
the folders don't really bother the
video as much as this one does ok so we
have here an HTML document which relies
on p5 and ml v as the libraries that are
being used ok and pretty much nothing
else alright so this example uses a pre
training model on a corpus of MF DOOM so
let's just make this nice and accurate
okay it says the meaning of life is
which isn't something I'd remember Dean
saying but whatever we can leave that as
the seed text for now that's an input
field in HTML so if we can just change
that anyway so we have a few sliders for
how long we want the output to be in the
temperature which we'll talk about more
a little bit later and what's really
interesting is the sketch J's file so
let's actually take a look there this
open source software I can just do
whatever I want with it which is great
okay so we declare a few variables here
so again this video isn't about p5
there's kind of a lot of things that I'm
touching on or not getting into but p5
is a really cool library I encourage you
to check that out if you're not familiar
with it already it's great for a lot of
artistic coding Ivy's it for some other
projects as well so there's kind of two
main functions in well yeah I'm not
really get into p5 so we're gonna start
with the setup function now I'll just
say that p5 will run this
function for us at the beginning and it
says create the LS TM generator passing
it the model directory okay so I don't
have anything called models slash wolf
because I didn't clone that whole
repository so what I need to do is make
sure that this when it's generating like
when it's creating the LS TM that we're
gonna use I need to make sure that this
is pointing towards the proper path
where we have our files so let me go
ahead and just remind myself on the
command line of where I am keeping
everything
let me just control Co the server and
I'll start it again in a minute
let's see let me LS appear I have
something called data up there which had
what I wanted right yeah those are the
files for my model so why don't I just
copy that folder into here where I am
now I have to say what is it lowercase R
capital R for a cursive copy I guess
lowercase R worked so now when i LS here
besides the two files that I fetched
from github using W get I also have all
those data files that are right here so
what I'm going to do is I'm just going
to change this to say data maybe that's
where my data is okay and then here
there's some other code this is really
about the the user interaction of like
what happens when sliders and get moved
around and buttons get clicks I'm not
really going to go over that what we
will just take a minute to look at is
this generate function which again not
really gonna go all the way through but
it lets you know it's generating stuff
like just so that the user knows
something is happening grabs the input
from the C text it uses these parameters
temperature and length and then the mo5
jjs library does really all the heavy
lifting for us we just kind of call this
LS c m dot generate function with our
data and pass it this callback function
which we'll go ahead and update the Dom
kind of update the HTML page when that
function is done running done generating
the text that the model has predicted
based on the input seed okay so you can
see this is a pretty short file then go
through every detail but it's on github
you can check it out you can use all I
really just made one small change to it
cool so let me go back to my notes I'm
pretty sure I know what I want to do
next but it's always good to be sure if
the path yep I told you that I did that
all right so let me actually go ahead
and run the server again okay just
refresh the page you can see it's
updated with this okay the model is
loaded
I can click generate and it yeah I mean
I don't know how many people will listen
to do but if you don't maybe you can
just take my word for it this sounds a
little bit like something that you might
say so we can adjust the length and make
it wonder or make it shorter and we can
use this temperature thing like the
temperature is something like
intuitively it's kind of like the the
randomness of the text the higher the
temperature the less random it will be
kind of the more derivative it will be
of the original text and if you turn it
up very high it starts to become very
likely that you get kind of direct
quotes from the original corpus if it's
lower it is maybe a little bit more
chaotic so to speak and I think that can
generate things that are a little bit
more up there and more interesting or
original but if you start to do it maybe
too low you might start to get kind of
just nonsense it might not really make
very much sense at all especially if you
get like really low oh it's kind of it
okay it might or might not so yeah I
mean okay I'll withhold my opinion on
these on these inner heated lyrics for
now this is an art critique session a
race
so yeah I mean that's really that's
really the main thing so I mean if I was
gonna go ahead and like reproduce my
original project what I would do now is
pull in another dependency which is the
pronouncing library and then I would
actually what I would have what I should
have done maybe I can do this now is
train the model backwards like if we
actually look at if we actually look
wherever yeah if we actually look at
this input AC you can see that these
lyrics are forward and so the model does
that also so that's the thing that I
would want to do is just reverse that
input and train the model backwards and
then I can use the pronouncing thing to
go backwards and so on but yeah I think
instead of doing that I think what may
make more sense would be for me to take
any questions from the people who are on
the live stream because that is pretty
much yeah that's pretty much that
so we've got through what is LCM getting
data setting things up training the
model using spell and then using the
model in ml 5j s so that is what I have
pray for you today and with 40 questions
thank you so much to be all for this
wonderful tutorial again thank you to
spell for the sponsorship if you make
something with this please share it with
me I would really love to know about it
and I'll see you in a future tutorial
many more machine learning ml five
Python e tensorflow easy things to come
I hope goodbye
you