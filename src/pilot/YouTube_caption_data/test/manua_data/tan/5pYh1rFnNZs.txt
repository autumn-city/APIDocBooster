Hey guys and welcome back, so in the last
lecture, I spoke about how YOLOv4 works and
why its so awesome!
Today Im going to show you how to install
the prerequisites of YOLOv4 in 10 Steps.
If you follow these steps with me you should
be able to get YOLOv4 working on images, videos
and webcams in the upcoming tutorials.
Let’s go through the 10 steps that we need
to for YOLOv4.
1.
Install Python,
2.
Install Git,
3.
CMake Installation,
4.
Visual Studio Installation,
5.
Updating GPU Driver,
6.
CUDA installation,
7.
Install CuDNN,
8.
OpenCV Installation,
9.
CMake OpenCV Configuration, and
10.
Building OpenCV in Visual Studio
Sho!
It may seem like a lot of steps but, it is
more reliable that using Anaconda to install
everything.
Well at least from my experience.
So as you can see I'm ready for YOLOv4 because
you know, yellow - YOLO ...
Some Prerequisites that you will need for
this tutorial:
Are a mid to high range PC/Laptop with Windows
10,
we will be covering an Ubuntu version of this
YoloV4 soon, and
A CUDA supported NVIDIA GPU, Just note that
this will NOT work on any other GPU brand.
So it has to be an NVDIA CUDA supported GPU
So, looking at our road map
Tutorial 1 which is this one, we'll spend
setting up the pre-requisites
Tutorial 2, which is the next lecture, and
we'll will install darknet & implement YOLOv4
on an image
Tut 4,5, we'll take YOLOv4 into real time
object detection on video, and spend some
time for processing and saving a video and
detection on a webcam.
Okay so let’s get tight into the tutorial
Another thing, please don’t forget to Watch
right till the end, to find out about how
you can win one of 20 free enrolments to the
course of your choice including this one.
And, if you like this video, please give it
a thumbs up, comment down below if you have
any questions or any suggestions for future
videos.
Subscribe so you get notified when the next
AI/AR tutorial is out.
And feel free to share this video with any
of your friends if think it will be helpful.
So let’s get right into in and Roll Intro!
So the full Yolov4 course will be available
as a comprehensive course on Augmentedstartups.com.
Im pretty excited for it because we are going
to be covering a lot,
from execution of a pretrained model on images,
videos and webcam
Labelling a new dataset in YoloV4 format
Creating custom dataset from other datasets
but in YOLOv4 formation
and then we then train our own custom detector
natively on your PC,
We also Implement on a MultiGPU
Develop some real application
We also going to how you create a nice PyQT
user interface for object detection using
YOLOv4.
I really hope that are excited by this course
as I am, because if you are then you can enroll
down below.
Remember that I will not be publishing this
course anywhere else and will be exclusive
to AugmentedStartups.com
Okay so if you are ready to get started with
AI, Computer vision and Yolo V4!
Click the link down below and let's get started.
Okay so to get started we are going to first
install python.
You can go over to google.
Type in python and then to downloads.
Because we focusing on windows, we will get
the python release for windows, obviously.
The release that we are going to use is Python
3.7.7 and we will select the 64bit web based
installer.
Now remember the prerequisites that I mentioned
earlier, make sure that you have all them
downloaded already.
If you don’t then don't worry I’ll have
a link to them down below
Let's continue with installing Python 3.7.7,
but before you do, ensure that you ADD Python
to Path.
This is very important, and click Install
Now.
And let it install.
Once it is done and setup is successful, click
close.
Now if you want test that this process worked.
You can open up command prompt and simply
type in python.
If it does not return any error then you know
its working.
for OpenCV to work in Python we will need
numpy.
To install we can just say pip install numpy
and done.
2.
Git Installation
Next we install Git, I have version 2.26.2.
The installation is pretty straightforward
so you can click next until the installation
starts.
3.
CMAKE Installation
On to cmake, we are installing version 3.17.2.
Also make sure you have the 64bit version.
Open it up and click Run, Click next, Agree
to the term and click next until installation,
you can leave everything else as default.
4.
Visual Studio Installation
Now even though we are developing in python,
we need visual studio in order to build OpenCV.
We can go over to google and type in Visual
studio 2019.
Click on the official link and then click
this nice and convenient button and download
Community 2019.
Once it has downloaded you can go ahead and
install it.
Now this installation may take a while, so
Grab a cup of coffee or some chai, and wait
for it to complete.
Okay now that its done, It will prompt us
as to what we would like to do within VS2019,
in response we select Python development and
desktop development C++ so we can compile
our libraries.
Then click install and his installation will
take a while, so continue sipping on your
coffee or chai.
[Slirrp, ahh..]
So when prompted, restart your PC
5.
Updating GPU Drivers
Okay now we need to install our GPU drivers
for GPU acceleration of YOLOv4 if you haven’t
already.
In device manager.
We need to see if the drivers are installed
here under display adapters.
We have an NVIDIA 1080 TI.
So as long as you have an NVIDIA Graphics
card, this will work.
It wont work with any other brand of GPU as
Ive mentioned before.
Even though you have the drivers installed,
we will need updated GPU drivers.
So go to google and type in nvidia drivers,
click the first link to download the official
drivers.
Over here specify the driver that matches
your GPU.
And click Download.
You can go ahead and install these drivers.
I already have it installed on my PC.
6.
CUDA Installation
Next we have to install CUDA, for those who
don’t know what CUDA is, It is a parallel
computing platform developed by Nvidia which
allows us speed up compute-intensive applications
by harnessing the parallelizable power of
the GPU’s computation.
To see if you GPU is CUDA compatible, you
can google "cuda gpu support Wikipedia" This
page towards the middle will give you a list
of all cuda compatible GPU’s.
It looks like our GTX 1080 TI GPU is here.
To install, type in nvidia cuda toolkit, Click
on the first link and within the website,
click Download Now.
Select Windows as our operating system, 64bit
installation, Windows 10 and exe local type.
You can then proceed to download the toolkit
which may take a while to download depending
on your internet speed.
Currently we are using Cuda 10.2.89
Once it has downloaded, you can proceed to
installing cuda toolkit.
We want to change our directory so it's much
easier to access, in this case we can select
C:\CUDA, Click Okay to install.
Fast forwarding a bit.
In the installer you can leave everything
as default and click next until installation
has started.
Click Close.
Next we will need to instal Cudnn which stands
for CUDA Deep Neural Network.
So CUDNN is a GPU-accelerated library for
primitives specially for deep neural networks.
In otherwords, it makes life a whole lot more
easier and more efficient with parallelization
of neural network computations.
To install Cudnn, we’ll need to google cudnn
download.
Click on this first link.
And you need to log in or sign up If you haven’t
already.
The version we need is CuDNN v7.65 for CUDA
10.2 and then navigate to CuDNN library for
Window 10 link.
Once you have downloaded, we can copy it over
here to C drive.
extract it 
and we are going to need to copy cudnn64_7.dll
into C>>Program Files>>NVIDIA GPU Computing
Toolkit>>CUDA>>10.2>>bin
Just paste it right here.
Back into C>>Cuda>>Include, we need to copy
this headfile over here cudnn.h into C>>Program
Files>>NVIDIA GPU Computing Toolkit>>CUDA>>10.2>>include.
And lastly for this step, we can do the same
for cudnn.lib and paste it into C>>Program
Files>>NVIDIA GPU Computing Toolkit>>CUDA>>10.2>>lib>>x64
Open CV Installation
In Google, as usual type in OpenCV.
And you want to navigate to OpenCV version
4.1.0.
Click on sources to download.
While that’s downloading we also need to
download opencv contrib which we can clone
or download on GitHub.
Download Zip.
And when ready, you can go ahead and unzip
both folders.
And let just copy these folders into another
folder called opencv on C drive.
What we are going to do now is, we are going
generate the build the files using cmake.
So ensure that you have a new folder called
"build".
9.
CMake
Open up CMake, for source, we need to copy
the opencv main directory and paste into source
within cmake.
For build it should be C:/opencv/build which
was the folder that we have just created.
And over here, just press the configure button.
And the generator must be set to visual studio
2019.
The platform is x64 and then click the finish
button.
Now just give it some time to configure.
The only thing that we have to configure is
BUILD_opencv_world which we need to check.
If there were no errors, you can just click
generate.
Nice, Configuring done and generating done.
Head over to the build folder and check if
the files have been generated.
10.
Building OpenCV in Visual Studio
Now within the build folder, open up this
fill ALL_BUILD visual studio project file
and then Visual Studio will launch.
Now its important that you set this release.
In Solution Explorer Open up ALL_BUILD, right
click and select this which will build our
opencv project.
And then do the same for the INSTALL target.
Exit out of everything.
And now we are finally going to test to openCV
build.
Open Up Command prompt, type in python, and
type in import cv2.
If you type in cv2.__version__ and then you
get the version, in this case its v4.1.0,
and this ensure that you opencv was setup
correctly.
Okay great!
So now that we have all the fundamental component
necessary for YOLOv4.
So, looking at our road map
Tutorial 1 which is this one, we spend setting
up the pre-requisites
Tutorial 2, which is the next lecture, and
this we will focus on installing darknet & implement
YOLOv4 on an image
We take YOLOv4 into real time object detection
on video, for processing and saving a video
and detection on a webcam.
Tutorial 4, we'll use YOLOv4 to create social
distancing app
Dataset labelling and developing a custom
YOLOv4 objection detector and training will
be a part of my YOLOv4 course, I’ll have
a link down below.
Also check out Geeky Bee AI who are expert
developers in AI, deeplearning and computer
vision.
And, if you like this video, please give it
a thumbs up, comment down below if you have
any questions or any suggestions for future
videos.
Subscribe so you get notified when the next
AI/AR tutorial is out.
And feel free to share this video with any
of your friends if think it will be helpful.
Okay, so earlier I mentioned that if you are
interested in winning one of 20 free enrolments
to any of the augmented Startups courses,
then all you have to do is like and comment
on this video and sign up at the link below.
Winners will be announced every 3 months.
You can comment on anything or provide suggests
for upcoming video and ideas as I’ve mentioned
earlier.
Thank you for watching and we'll see you in
the next video.