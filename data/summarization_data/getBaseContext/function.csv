"The getBaseContext() is the method of ContextWrapper.  And ContextWrapper is, ""Proxying implementation of Context that simply delegates all of its calls to another Context. Can be subclassed to modify behavior without changing the original Context."" (as per javadocs)"
So this is used to delegate the calls to another context. 
The method getBaseContext() is only relevant when you have a ContextWrapper. 
"The method getBaseContext() can be used to access the “base” Context that the ContextWrapper wraps around.  You might need to access the “base” context if you need to, for example, check whether it’s a Service, Activity or Application:"
getBaseContext() -  If you want to access Context from another context within application you can access. 
Or if you need to call the “unwrapped” version of a method: 
"The answer by Waqas is very clear and complete, however I'd like to further clarify the difference between using this vs. getBaseContext(), or getApplication() vs. getApplicationContext(). "
"Both Activity and Application extend not Context itself, but ContextWrapper, which is a "
"""Proxying implementation of Context that simply delegates all of its calls to another Context"". "
"I doubt it makes any practical difference, though. "
The same logic applies to getApplication() vs. getApplicationContext(). 
getApplicationContext() 
this is used for application level and refer to all activities. 
