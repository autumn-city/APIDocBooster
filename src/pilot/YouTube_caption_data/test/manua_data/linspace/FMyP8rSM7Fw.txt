Welcome to my personal channel.
I’m Hans and today i’m going to explain
quickly what we need to know about Numpy for
Tensorflow in five f... float minutes.
import numpy as np
Data structure
In Python there are several data structures.
One of them is the list.
A list is nothing more than a set of values
​​in a collection.
It is native to python.
To manipulate this value in numpy we need
this to be of type np.ndarray.
The function to cast a list to an np.ndarray
is called np.array.
We can see how goes from being a list to an
array.
If we observe its type with the function type
() we observe that np_array returns a numpy.ndarray.
Generate structured data
One of the things that we will need in Tensorflow
is knowledge about generating these numpy
arrays to initialize our tensors.
np.arange will generate a numpy array of consecutive
numbers that go from the first argument to
the second argument.
np.arange also contains a third argument,
which will allow you to indicate the steps
between the numpy array numbers.
np.linspace will generate a numpy array of
values, which the first and the last value
will be the first and the last argument.
The third argument tells us the steps it has
to take until it reaches the last argument.
So that np.linspace (0, 10, 3) will return
a numpy array with 0, 5, 10.
np.zeros generates a numpy array filled with
the value 0.
np.zeros accepts a number or a dimension as
an argument.
So we can generate numpy multi-dimensional
arrays filled with 0.
np.ones is similar to np.zeros.
np.ones will generate a numpy array with value
1.
It also accepts a dimension as an argument.
So that we can generate numpy multi-dimensional
arrays filled with 1.
np.random.randint will generate a numpy array
of random integers between the first and the
second argument.
The third argument accepts a number or a dimension.
So we can create numpy arrays of several dimensions
with random numerical values.
Format data
Now that we know how to generate data structures,
we need to know how to manipulate them.
The following functions are methods applied
directly on the numpy array object.
One of the simplest ways is to obtain delimited
parts of the numpy array.
For this we can use the native selector [x,
y].
It accepts two values.
The first value is the row, and the second
the column.
If we only indicate two integer values, we
will obtain the value that is located in those
coordinates.
We can use ":" to indicate a range.
So that np_array [:, 4] we will obtain all
the values ​​of any row in column 4.
In the same way with np_array [1,:] we will
obtain all the columns of row 0.
Of course np_array [:,:] will return all the
values.
Another interesting functionality we have
about numpy arrays is the possibility of applying
filters to our arrays.
For this we declare a variable with the filter
in question and we pass it to our np_array.
np_array.reshape (x, y) will allow us to format
our array with the dimensions we want, as
long as the data numbers it contains are the
product of both arguments.
Bonus
To finish with this, I will give 5 more tips
about numpy arrays.
np_array.max () It will return the greatest
value.
np_array.argmax () It will return the index
of the highest value.
np_array.min () It will return the smallest
value.
np_array.argmin () It will return the index
of the lowest value.
np_array.mean () It will return the average
of all its values.
Well, it has been a quick starting about numpy
for Tensorflow.
I invite you to investigate more about it
and see you on the next video.
What do you think is essential to have a start
with Numpy oriented to Tensorflow?
Leave it in the comments.