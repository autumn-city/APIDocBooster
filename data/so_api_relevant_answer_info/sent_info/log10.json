["scale_y_continuous(formatter = 'log10') is now scale_y_continuous(trans = 'log10') (ggplot2 v2.2.1)\n", "Another solution using scale_y_log10 with trans_breaks, trans_format and annotation_logticks()\n", "Finally, if your input data is log10(lognormal_mean) and log10(lognormal_std) then the first step would be\n", "I would also check the source to find if they use the ambiguous phrase \"log10 mean\" to mean \"log10 of mean\" or \"mean of log10\".\n", "If it was \"mean of log10\" then you don't need anything above; you already have the parameters of underlying normal distribution, they just need to be multiplied by log(10) to convert from log10 to natural.\n", "ufuncs, like np.log10.\n", "Alternatively, you can pass log10 as a unary expression:\n", "'undefined reference to log10'.\n", "Reference: [man page (hyper-link)] for log10\n", "Do you neet a generic log10 function?\n", "If you need a generic aproach function for floating points it will be quite hard to be faster than the log10 function in the standard library.\n", "I'm not a math Ph.D., but log10 does what log10 says it does, namely, calculate the log-base-10 of a number.\n", "I've never heard of \"lower log10\" or \"upper log10\", nor has Google as far as I can tell.\n", "If you want a log10 x axis it's much better to use scale_x_log10() than converting the number itself in the aes as if you add other aes or limits etc they will also be transformed, also gives you labels of the original data not of log10.\n", "Try using log10() function as: std::log10().\n", "Numpy doesn't know what you might have stored in a object array, so it attempts to dispatch its functions (such as log10) to the objects in the array.\n", "This fails because Python floats don't have a log10 method.\n", "When you run this code you'll see I calculated the log10 values two different ways, the first was getting the mean of the log10 values while the second is to get the log10values of the mean.\n", "So yes, log10(0) will give you -inf, doesn't matter what library/compiler you use (as long as it's in line with spec).\n", "According to [cplusplus (hyper-link)], it depends on the library what you get for log10(0).\n", "However, in general the value of log10(0) is not defined (can be -inf if you like, but it is not a real number).\n", "What value you use in the case of log10(0) depends very much on your application.\n", "However, I think it is easier to check for 0 before doing the calculation instead of relying on log10(0) returning some particular value (as it might be -inf or something completely different).\n", "The behavior is very clear-cut for [log10 (hyper-link)] for floating point implementations that are IEC 60559 compliant:\n", "But honestly, we know that only the range (+0, +\u221e) is supported, so whether your implementation is compliant or not you could simply guard your log10 with an if-block.\n", "But C++ does guarantee a return: Given log10(foo):\n", "Whether your implementation supports infinity or whether these values expand to the maximum floating point value, the right way to handle this is still probably isnormal/isfinite but you could also test the return of log10:\n", "This will take log10 for all columns with index 0 to index 8 inclusive.\n", "Use log10f().\n", "Source:\nman 3 log10\n", "You are including a C header, math.h, which doesn't provide an overload for log10 taking float.\n", "If you want overloaded version of log10 include cmath and use [std::log10 (hyper-link)]:\n", "or, as suggested by Ongun, use [log10f (hyper-link)]:\n", "For an integer number that has n digits, it's value is between 10^(n - 1)(included) and 10^n, and so log10(number) is between n - 1(included) and n. Then the function floor cuts down the fractional part, leaves the result as n - 1.\n", "The log10 function implementation does not come from the libgfortran runtime library.\n", "A consistent answer across platforms should be attained by promoting the argument of the log10 function to double precision and then converting the result back to single.\n", "log10 0.1 (= -1), \u221a0.36 (= 0.6), etc.\n", "(Your professor's find_bounds method does solve the \u221a0.36 problem, but still won't handle the log10 0.1 problem.)\n", "Found that this is a bug of scales() (not only for the scale_x_log10()) when it is used with annotate() and xend value is provided (it is [already filled (hyper-link)] as issue by W.Chang).\n", "In this case transformation of xend is done only in one direction - log10 of value is not taked but power is calculated.\n", "scale_x_log10() works without problems if, for example, \"rect\" is used in annotate() and xmin, xmax values are provided.\n", "So in the LOG10 example, the 0 appears because LOG10(136/136) = LOG10(1) which by definition is 0\n", "log10( (1/136) x (22/136) x (103/136) x (10/136) ) = -4.179\n", "However, you cannot make a barplot with this, since bars start at 0 and log10(0) is not defined.\n", "This mean that with coord_trans() only coordinates (y axis) are affected with log10 but with scale_y_log10() your actual data are log transformed before other calculations.\n", "Second, your data have negative values and when you apply scale_y_log10() to your data those values are removed and all calculations are made with only part of your data, so the mean value you get is larger as with coord_trans().\n", "The standard does not specify complexity requirement for the log10 function.\n", "because NumPy ufuncs (such as np.log10) can be applied to pandas DataFrames because they operate [elementwise on all the values in the DataFrame (hyper-link)].\n", "data.apply(math.log10) did not work because apply tries to pass an entire column (a Series) of values to math.log10.\n", "math.log10 expects a scalar value only.\n", "data.apply(lambda x: math.log10(x)) fails for the same reason that data.apply(math.log10) does.\n", "You could use data.apply(np.log10), again since the NumPy ufunc np.log10 can be applied to Series, but there is no reason to bother doing this when np.log10(data) works.\n", "You could also use data.applymap(math.log10) since applymap calls\nmath.log10 on each value in data one-at-a-time.\n", "But this would be far slower\nthan calling the equivalent NumPy function, np.log10 on the entire\nDataFrame.\n", "[https://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#log10(double) (hyper-link)]\n", "Google search was \"java math log10\" and I then picked the first official API documentation, which was the third result.\n", "log10 is just the logarithm with base 10, see [here (hyper-link)].\n", "log10 11 = 1.04139269\n", "log10 101 = 2.00432137\n", "log10 1001 = 3.00043408\n", "log10 10001 = 4.00004343\n", "log10 99999 = 4.99999566\n", "log10 tells you how many digits (in base 10) the number has (minus 1).\n", "So all the five digit numbers, from 10000 to 99999, have a log10 that is greater than or equal to 4.0 but less than 5.0.\n", "If you take the ceil of the log10, you'll get 5.\n", "Put another way, if x is any 5-digit number, then int(ceil(log10 x)) = 5.\n", "So it is log10(n) exactly for the reason you stated in your question.\n", "If x is an integer, then floor(log10(x)) + 1 is equal to the number of digits in x.\n", "One option would be to loop through the columns 6:10, get the index of elements that are not 0 or -9, apply the log10 on those and return the vector.\n", "Or another option would be to create a logical matrix ('i1') subset the elements from the columns and update with the log10\n", "log2 or log10?\n", "It's a formula problem and nothing to do with log10 but rather because of how \"-\"-signs are interpreted in formula expressions:\n", "Not Log10 which cannot be applied to a range...\n", "+ coord_trans(y = 'log10') will make a log transformed coordinate system.\n", "You can modify your log scale by adding arguments breaks= to scale_y_log10(), only there shouldn't be a 0 value because from those values also log is calculated.\n", "Instead of using scale_y_log10 you can also use scale_y_continuous together with a log transformation from the scales package.\n", "You may need to do log10(zinc + 1) if any of the values in zinc are zero, since log10(0) is undefined.\n", "I found [this youtube video (hyper-link)] useful in explaining log10 in R.\n", "However, the reason that the general shape of the density is changing is that scale_x_log10() and coord_trans(x=\"log10\") do different things.\n", "In particular, the scale transformation (scale_x_log10()) happens before any statistics (such as density) are computed.\n", "So the density that is plotted in the second case is the density curve of log10(av).\n", "The coordinate transformation (coord_trans(x=\"log10\")) happens after the statistics are computed and only effects the positioning on the screen.\n", "Note the scale_y_continuous(trans = 'log10') function.\n", "std::log10 has to be no constexpr by standard.\n", "This would have been fairly obvious if you tried printing out the value stored in t rather than just log10(t).\n", "10^(log10(2^32) + 10^-15) - 2^32 == 9.8895 * 10^-6, but 2^(log2(2^32) + 10^-15) - 2^32 == 2.977  * 10^-6 and 100^(log100(2^32) + 10^-15) - 2^32 == 0.00001977, also log2(INT_MAX) > log10(INT_MAX) It means that with larger logarithm base, if logarithm function tries to \"search\" for a proper result, it'll sooner hit situation where modifying predicted result is no longer possible due to rounding off errors.\n", "For example, log10(x) == ln(x)/ln(10) if logarithm function were calculating it this way, you would get nearly similar timings.\n", "log10: 120s\n", "Correspondingly, the other implementations are: [log2 (hyper-link)], [log10 (hyper-link)].\n", "log10 is different:\n", "I think for the case of log10 you forgot to perform the multiplication!\n", "So you are just calling the log10 with the same value again and again ...\n", "I also doubt that GCC would do that for log10 but not for log and log2.\n", "log10(0) = Infinite, which cannot be plotted, so that limit is invalid for the log scale function.\n", "The following code uses scale_y_log10 to specify the limits, and solves both problems.\n", "It appears that VS2015 has changed the implementation of log10 in release builds, where it calls this new __sse2_log102 function instead of the old __libm_sse2_log10 and that this new implementation is the cause of a huge performance difference.\n", "numpy.log10 is a \"ufunc\", and the method Series.apply(func) has a special test for numpy ufuncs which makes test.apply(log10) equivalent to np.log10(test).\n", "This means test, a Pandas Series instance, is passed to log10.\n", "np.log10 doesn't know how to handle such a collection of objects (it doesn't \"know\" that those objects are, in fact, all np.float64 instances), so it attempts to dispatch the calculation to the individual elements in the Series.\n", "To do that, it expects the elements themselves to have a log10 method.\n", "That's when the error occurs: the elements in the Series (in this case, np.float64 instances) do not have a log10 method.\n", "A couple alternative expression that should do what you want are np.log10(test.astype(np.float64)) or test.astype(np.float64).apply(np.log10).\n", "I had a similar error message when using the standard deviation (np.std) instead of np.log10:\n", "You can do something like this, but plotting the x axis, which is not continuous, with a log10 scale doesn't make sense for me :\n", "If you only want an y axis with a log10 scale, just do :\n", "With regard to the log10 axes, my recommendation is to title the y-axis appropriately and do a log10 transform on the data itself rather than the axis.\n", "Your problem is that if f is a global variable, in C you need a compile-time constant expression to initialize it, and compile-time constant expressions can't include function calls such as log10().\n", "While math.log10(3e-320) returns the correct value, math.log10(3e-325) raises a ValueError: math domain error.\n", "You could compute log10 with arbitrary precision using [decimal module in Python (hyper-link)] e.g., using default precision:\n", "As you should be able to tell from the other answers, a better formula is -log10(value) or, in an OpenOffice Calc spreadsheet, =-LOG(value,10).\n", "The most direct way is to just compute the log10 of the limits, compute linearly spaced bins, and then convert back by raising to the power of 10, as below:\n", "Don't need to use log10s and such, just compare the modulos.\n", "Math.log10 is ECMAScript2015 (aka es6) extension; that's why babel complains when you ask to transpile it to es5.\n", "1/200 is performing integer division, which is 0, so you're doing log10(0) which gives you -inf.\n", "Try changing that to log10(1.0/200.0) (or only one of them should need the decimal) to tell the compiler to do floating point division.\n", "This is exactly the formatting you want, 10^.x, rather than 10^.x after a log10 transformation, which is what you get when you call it within trans_format(\"log10\", \nmath_format(10^.x))\n", "log(1000), log(10), log(1000)/log(10) and log10(1000).\n", "You should just use log10, which actually ends up calling a native function (i.e.\n", "it is not implemented in Java -- see [StrictMath.log10 (hyper-link)]).\n", "log(x)/log(10) is likely used by people who don't know about log10.\n", "log10(x) clearly conveys your intention, whereas with log(x)/log(10), it isn't as clear that you really want a base-10 logarithm.\n", "You can get the same effect by calling log10 on its own:\n", "Applying np.where after calling np.log10 isn't going to help.\n", "Of course there is no np.float64 small enough to give you -987.00005, so if you really need that value, and you also really need to use where, you'll need a second where after the log10.\n", "Use your actual data as labels, but scale the plotted data with log10.\n", "logarithmic: Will call log10 and floor, and add 1.\n", "Looks like O(1) but I'm not really sure how fast the log10 or floor functions are.\n", "So I guess it comes down to: is looking up digit mappings faster than multiple mathematical operations or whatever is happening in log10?\n", "As for Log10 algorithm, it will give you only approximate answer (that is close to real, but still), since analytic formula for computing Log function have infinite loop and can't be calculated precisely [Wiki (hyper-link)].\n", "0.105069875717163 for floor(log10(x))\n0.867973804473877 for div 10 iterations\n", "In Rust 1.51 (and below) functions like sin, cos, or log10 are not part of the core library (core::) but only the standard library (std::), therefore they are not available.\n", "Try using the scale_y_log10 function:\n", "It looks like invoking scale_y_log10 with a stacked histogram is causing ggplot to plot the product of the counts for each component of the stack within each x bin.\n", "As described in the linked answer, \"scale_y_log10 makes the counts, converts them to logs, stacks those logs, and then displays the scale in the anti-log form.\n", "Then log10(100) = 2 for all five and the sum of the logs will be 10.\n", "Hope the above answers were helpful, in case you or anyone want the inverse for log10 (base 10) and log (natural)\n", "y = np.log10(train_set[\"SalePrice\"])\n", "Computers use base 2 - According to the articles linked in reference, the computation of log2 is a 4 processor cycles process - that of log10 requires to multiply log2(val) by 1/log2(10) which adds another 5 cycles.\n", "By the relationship\n  log10(v) = log2(v) / log2(10), we need to multiply it by 1/log2(10),\n  which is approximately 1233/4096, or 1233 followed by a right shift of\n  12.\n", "Thanks to geza I realized that thw whole thing can be done without the log10:\nA working solution is posted below, and a MWE including the log variant posted on [ideone (hyper-link)].\n", "First get all columns start with log10.\n", "Distance to any row where s$log10 > 6:\n", "Get subset where log10 > 6\n[code snippet]\n", "Find all overlaps of data with log10 > 6 with all other SNPs with gap = +/- 500\n[code snippet]\n", "It looks like Java actually has a [log10 (hyper-link)] function:\n", "If you need integer log base 10, and you can use third-party libraries, Guava provides [IntMath.log10(int, RoundingMode) (hyper-link)].\n", "So if you take log10(0), it returns -Inf which causes the error.\n", "The thing is that log10(8)/log10(2) is always 3 in math.\n", "You can convert directly to the log10 scale (without exponentiating and then using log10) by dividing by log(10): dnorm(-100,log=TRUE)/log(10)=-2171, which would be too small to represent in floating point.\n", "Since you want log scale, let's keep scale_y_log10.\n", "You can certainly provide overloads to free functions such as your log10 that respectively take a DspBuffer& or a FixedPtDspBuffer, etc.\n", "The purpose of scale_y_log10() is to plot the log-transformed data on a scale that shows the original values, but with appropriately (unevenly) spaced axis ticks ...\n", "To use 10-based, you'd use Math.log10().\n", "10*log10(power) will result in a unit of dB/Hz, but remember that decibels are always a comparison between two power levels; you are quantifying a ratio of powers.\n", "A better definition of decibels is 10*log10(P1/P0), [as explained here (hyper-link)].\n", "The problem seems to be that your boxplots are based on log10 of value, whereas the axis you are drawing uses the original values.\n", "Either use log10 to generate your axis ticks, or else use log=\"y\" when you generate your boxplots to do the coordinate transformation.\n", "I would expect log10 to be more accurate then log(x, y), since it knows exactly what the base of the logarithm is, also there may be some hardware support for calculating base-10 logarithms.\n", "qnorm also has a log.p argument analogous to pnorm's, so you can reverse the operations that you used to get log10P in the first place (it took me a couple of tries to get this right ...)\n", "I rearranged your log10P calculation slightly.\n", "convert from -log10(p) to Z and back, see how close we got to the original value.)\n", "Numbers have no log10 method available by default, but you can extend the Numeric class to add that functionality:\n", "If you just want to use the methods without having to write Math all the time, you could include Math, then you can call log10 directly:\n", "-e:1:in <main>': undefined methodlog10' for main:Object\n  (NoMethodError)\n", "to be able to use your log10 method without writing it explicitly everytime:\n", "It's because df$value - df$sd produces negative values, which cannot be log10-transformed.\n", "Where abs returns the absolute value of N, which is always non-negative and thus can be used as an argument to log10.\n", "If std_x is too small for this to work, you can write your own version of errorbar by plotting vertical lines from 10*log10(x-2*std_x) to 10*log10(x+2*std_x)\n", "The fastest method of calculating log10 for arbitrary inputs, will be a table lookup based on leading zero count (a log2 approximation), followed by a possible adjustment by one depending on a second table which records the power of 10 which falls within the range of the log2 approximation.\n", "Take out your ylim(-3.5, 6) and use ggplot's scale_y_log10 instead with limits there:\n", "This is important, because now we can extract the names and automate the process of converting character variables to factor, and integer / double variables with a log10() transformation.\n", "You can also use log10 function to label you axis :\n", "You will have to manually feed labels to your log10 breaks.\n", "Now, please note that you are incurring in a misleading practice:\nThe axis breaks are transformed to log10(x) and not to log10 (x + 1).\n", "Well, log10 gives you the number of decimal digits.\n", "log10(224) is 7.2, or a little more than 7 decimal digits.\n", "The other way of doing this is to note that log10(2) is about 0.3.\n", "... no idea why we should calculate 2^24 and why we should take log10\n", "We take log10 to compare the binary float to decimal text.\n", "p log10 b .............  if b is a power of 10\n  \u23a3(p \u2212 1) log10 b\u23a6..  otherwise\n", "Notice \"log10 224\" is same as \"24 log10 2\".\n", "\u23a3(p \u2212 1) log10 b\u23a6 --> floor((24 \u2212 1) log10(2)) --> floor(6.923...) --> 6.\n", "To find out how many base-10 (decimal) digits can be represented by a bunch of base-2 digits (bits), you can use the log10() of the maximum representable value, i.e.\n", "log10(2^10) = log10(2) * 10 = 3.01....\n", "In 24 bits you can store log10(2^24) = 24 * log(2) base-10 digits.\n", "But because the top bit is always the same, you can in fact only store log10(2^23) = log10(8388608) = 6.92.\n", "...where ln is either the natural logarithm or log10, either logarithm will work.\n", "If you mean that one must have five more decimal digits that the other then you might want to round or trunc those log10 calls separately.\n", "Save the histogram as a variable and then apply log10 to the bin counts.\n", "Currently, your model use log10(brain), log10(body) and class.\n", "Numpy.log10 gives you a array where each values is the log of whatever you feed it (if it's negative it returns Nan check for that) with the same shape of whatever you feed it.\n", "Your code is:\nqqplot(life$p,log, main = \"Normal Q-Q Plot\",plot.it = TRUE)\nThe \"two datasets\" that you are giving it are life$p and log, so\nthis will plot the quantiles of life$p against the quantiles \nof log = log10(life$p).\n", "dspec = b\u00b7log10(2) \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(dspec\n  = specific decimal digits, b = bits)\n", "dmin = \u2308(b-1)\u00b7log10(2)\u2309\u00a0\u00a0\u00a0\u00a0(dmin\n  = min decimal digits, b = bits, \u2308x\u2309 = smallest integer \u2265 x)\n", "dmax = \u2308b\u00b7log10(2)\u2309\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0(dmax\n  = max decimal digits, b = bits, \u2308x\u2309 = smallest integer \u2265 x)\n", "dmax = \u230a(b-1)\u00b7log10(2)\u230b\u00a0\u00a0\u00a0\u00a0(dmax\n  = max decimal digits, b = bits, \u230ax\u230b = largest integer \u2264 x)\n", "Maybe you need to log10(median), since those are the values computed for the y-axis.\n", "math.log10(0) is minus infinity.\n", "For example, instead of using scale_x_log10() to transform the scale, you could transform the data instead and plot log10(x).\n", "The reason this happens is because position adjustments happen after statistical transformation, so instead of log10(A + B), you are getting log10(A) + log10(B) as top height.\n", "The problem seems to be that when you specify scale_x_log10 or scale_y_log10, the values of your data are transformed before being passed along to the different stats or geoms.\n", "You see the warning because log10 is defined for float, double and long double but not integer and it's being called with a integer.\n", "It is unnecessarily complicated and slow because you can simply searched for the largest absolute value in A then taken the log10 of that.\n", "log10 gives you the power of ten that corresponds to its argument, which, rounded to the next integer (hence the +1 followed by the (int) cast, which results in truncation), gives you the number of digits required for the number.\n", "The argument of log10 is a bit of a mess, since abs is called twice when just once would suffice.\n", "Still, the idea is to pass to log10 the absolute value of the number being examined if it's not zero, or 1 if it is zero - this because, if the argument were zero, the logarithm would diverge to minus infinity (which is not desirable in this case, I think that the conversion to int would lead to strange results).\n", "As for the \"ambiguous call\" error: you get it because you are calling log10 with an int argument, which can be converted equally to float, double and long double (all types for which log10 is overloaded), so the overload to choose is not clear to the compiler.\n", "Just stick a (double) cast before the whole log10 argument.\n", "There are 3 types of definition for log10 function which are float,double,long double input.\n", "(int)log10(x)+1 gives the number of digit present in that number.\n", "p2 <- p2 + scale_x_continuous(breaks = fPretty, \n                              expand = c(0,0), trans=\"log10\",\n                              sec.axis=sec_axis(~., breaks=fPretty,\n                                                labels = pPretty,\n                                                name=\"Period (1/f)\"))\n", "It is surprising to me that log10(\"Ag_ppm\") doesn't throw the same error, but I have often overcome this problem using get:\n", "But the log10(0) will still be evaluated, so add the else branch:\n", "If you specifically want numpy arrays, use np.log10 instead of math.log10 for direct implementation.\n", "log and log10 are not the same function, of course, so you are not solving the same problem.\n", "The binary distribution of couenne downloaded from ampl.com doesn't, for some odd reason, accept the log-function, only log10.\n", "After several searches ( [[StackOverFlow[1] (hyper-link)]), I redefined the function: \nOffset + 139.0/ ((numpy.exp(np.log10(np.abs(x))/a))**b)\nNon-numpy functions like math.log10() don't play nicely with numpy arrays\n", "You can log10-transform the density; here's a minimal & reproducible example\n", "Starting with [r21400 (hyper-link)], OpenModelica will handle the inverse of log10.\n", "The non-linear solver has trouble finding the solution because a lot of numbers are not valid input for log10 (and it is quite hard to try to numerically linearise it).\n", "Then create another cell which takes 10*log10 of the SUM of those cells.\n", "You need to use [log10() (hyper-link)] function.\n", "Thanks for sharing, updated latest formula to ceil((log10(_score+1)+5) * 100) * 10000 + (9999 - ceil(log10(doc['price'].value +1) * 1000)) added +1 to score because in some cases it returns errors like this:\n", "changed formula to ceil((log10(_score+1)+5) * 100) * 10000 + (9999 - ceil(log10(doc['price'].value +1) * 1000)) added +1 to doc value to fix this\n", "changed formula to ceil((log10(_score+1)+5) * 100) * 10000 + (9999 - ceil(log10(doc['price'].value > 0 ?\n", "It doesn't matter whether you choose log or log10in this case, dividing by the log of the new base does the trick.\n", "So at the end, I'd say d-10 = d-2 * log2 / log10 is almost right.\n", "Generally loge and log10 are used.\n", "For it to work the function needs to add an abs before the log10 function and there is an = sign after digits:\n", "You can say that the problem size is M = log10(N).\n", "That will change the big-O complexity, now it should depend on the problem size, that is M. If you do it this way, do not use log10(N) in the big-O notation.\n", "log10 exists in a different library called libm, and thus you need to explictly tell gcc to link that library, with -lm.\n", "log10(2^24) is roughly 7.22.\n", "The nearest value is 1.0E+17 when passed as a double parameter to log10.\n", "The same would be true of the log10(n) value: 16.999999999999999995657... - the nearest value that can be represented is 17.\n", "is log10(n)+1.\n", "It seems like you have X-values that are too close to zero, can you show the values you send to log_x = np.log10(x)?\n", "DECIMAL is a fixed point type, so can overflow when computing things like SUM, and will be ridiculously inaccurate for LOG10.\n", "I'm not aware of any mathematical reason why log2 of an arbitrary number (integer or not) would be more likely to result in an irrational number - and therefore loss of precision - than log10 or any other log.\n", "For these ranges there doesn't seem to be much difference between the Decimal methods ln and log10, and both generally do a lot better than math.log2 or Decimal(x).ln / Decimal(2).ln.\n", "To cope with both problems I compute Log10 myself as Log10(2) * Log2(source):\n", "this guarantees that I have at least 5 digits but may be 6 in case of rounding errors (note 0.30102999566398 < Log10(2)).\n", "You are calling math.log10, which only acts on a single number, not an array.\n", "In your function gam(x_2) you are using log10, but log is needed.\n", "The rounding errors that occur in floating-point arithmetic vary, so using log10 instead of log may happen to get rounding errors in the log10 and the division that cancel, resulting in a computed quotient of 5.\n", "f(n) = log10(n) * n/2 + n. The fast growing constituent is log10(n) * n/2.\n", "Select your log10 values and run this:\n", "The problem is that np.logspace(-1, 5, base=10) simply returns you logarithmically spaced values but you still need to take the base 10 log of your x-values because your x-axis in the plot is logarithmic (np.log10(x)) and do the following\n", "It is selecting x in linear space,\n    ignoring that scale_x_log10() has been specified.\n", "So if you want exact runtimes, algorithmic analysis isn't the right approach; the reason that it discards constant factors (making log2 equivalent to log10) is that to do otherwise would require much, much more information about the hardware and the program context and so on, which would make the results much less generally applicable.\n", "[ (hyper-link)]\nyou can also try if ggplot2 with scale_y_log10() and scale_x_log10() would work for you, see [this question and answer (hyper-link)].\n", "If you want to add second y-axis in same scale with the prior one, it can be implemented like this: scale_y_log10(sec_axis = sec_axis(~.\n", "The level is 10*log10(SNR)\n", "You forgot to add limits in the scale_x_log10 and scale_y_log10:\n", "This get's us most of the way to a solution since you actually want to evaluate torch.log10(1+torch.exp((Pss-k*Pvv)*s))/s\n", "And in Method 3, you'll get rounding errors with log10 (not to mention the obvious problems with attempting to take a log of any number <= 0).\n", "Someone has already mentioned log10, so here's a bit more obscure one:\n", "calculate arrayDim = ((int)Math.log10(121))+1 // 3\n", "dBV = 20 x log10(Vrms)\n", "I'm not quite sure how you're log10 will help you get the first non-zero digit, but assuming it does (and thus you know what decimal place you are rounding to), the following function will round correctly:\n", "This translates to setting the histogram breaks on the scale of log10(nPhotosClassified).\n", "The breaks depends on the range of log10(nPhotosClassified).\n", "You can define your own scale, instead of using scale_y_continuous(trans=\"log10\")).\n", "So, c is also a single float (c = math.log10(i/1024)).\n", "The expression map(lambda x: math.log10(float(x)/1024), in1) converts the values into db.\n", "log10 is going to involve floating point conversion - hence the rounding error.\n", "And since the ulong has to be converted to double before calling Math.Log10, you see this error.\n", "This by itself is not very interesting -- but I include it here because using this method in conjunction with Log10 can get the accuracy \"perfect\" for the entire range of an unsigned long without requiring a second log invocation.\n", "No matter what you put as x-ticks on the second axis they will always be labeled by: ax2.set_xticklabels(np.log10(second_ticks)).\n", "numpy.log10(prob) calculates the base 10 logarithm for all elements of prob, even the ones that aren't selected by the where.\n", "Just use the where argument in np.log10\n", "Just use Math.log10:\n", "You should use the Math.log10() static method.\n", "See the link here: [https://docs.oracle.com/javase/7/docs/api/java/lang/Math.html#log10(double) (hyper-link)]\n", "In the fast version, log10 is computed once and shared (the static argument is applied once only).\n", "where the name-pair 'mahalanobis',diag(log10(GSD)).^2 puts log10(GSD) as weights on the Eucledean, which is the known as the Mahalanobis distance.\n", "I however believe that the use of log10 is a mathematical error.\n", "Using LOG10 in SQL will throw this exception when passed a negative number (try it: SELECT LOG10(-1)).\n", "Edit - In addition to failing with negative numbers, LOG10 will fail when 0 is provided.\n", "Normal log: The second element of \"fg\" is: 0.01010101 => log10(0.01010101)=-1.995635.\n", "Tableplot calculates: log10(1+0.01010101)=0.004364805.\n", "As @John3136 commented the error is referring to the input of the log10 function.\n", "The compiler is telling you that it can't figure out whether you want log10(float) or log10(double).\n", "You were not putting the commands in the right order, and you cannot do a real log10 transformation, as values below 1 will became negative.\n", "From a data frame of dimensions r by c, it will return a list of length r * c, with each entry either being a transformed column (log10(x+0.00000000001)) or a single value (log10(1))\n", "You are passing 0 to the log10 function.\n", "It just creates a categorical variable with different category values in different ranges of log10.p.value.\n", "Note that the ordering of the colors in scale_fill_manual has to match the order of the corresponding values in log10.p.value.cat in order to get the desired color for each category.\n", "Try loading your .so library inside the java environment before making any calls to log10.\n", "This line of code y = 20*log10(4*pi/lambda)+10*@(x)x(1)*log10(d)-data; does not work (neither does the other one).\n", "What you are doing here is you are trying to add together a number (20*log10(4*pi/lambda)) and an anonymous function (10*@(x)x(1)*log10(d)-data);\n", "Note that the comparison to 0.0 is exact rather than within a particular epsilon since you want to ensure that log10_value is an integer.\n", "EDIT: Since this sparked a bit of controversy due to log10 possibly being imprecise and the generic understanding that you shouldn't compare doubles without an epsilon, here's a more precise way of determining if a double is a power of 10 using only properties of powers of 10 and IEEE 754 doubles.\n"]