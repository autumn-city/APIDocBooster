♪ (music) ♪
So now, let's just see
the practical for activity lifecycle.
For that I'm going 
to go create a new project.
Go to New Project.
I'm going to call it ActivityLifecycle.
Empty Activity and...
I'm going to call
my main activity as MainActivity.
So in this particular project
I'm going to create my main activity
and I'm going to put
all the lifecycle methods:
onCreate, onStart, onResume
onPause, onStop,
onRestart and onDestroy.
I'm going to override all the methods,
and while I'm doing that,
inside each method
I'm going to put a Toast and a Log.
And after that
I'm going to run my application.
While I'm doing that, when I do that,
what will happen,
each Toast will run in his order.
First, the onCreate toast will run
and then the onStart,
and then the onResume,
and each and every lifecycle method
which you just learned in your session
will run in the same way.
So now, let's just see how it goes.
So, for me, onCreate is already defined.
So let me just override
other methods also.
OnStart and onResume...
onPause...
onStop...
onRestart...
and last, onDestroy.
Okay. Now, let's just put toast
in each of these lifecycle methods.
Toast.makeText()
and it will take three arguments.
First is your context object.
I can put this because activity
itself has a context object.
Second, what message you want to show.
I'm going to put "onCreate Finished".
Third, I need the duration.
Toast can be shown only in two ways,
either long or short.
So, long will show it
for three to four seconds.
Short will show it for only one second.
So, I want it to be a short one.
And at the end,
don't forget to put .show().
As it is a dialog box,
non-interactive dialog box,
with which a user cannot interact,
you need to put 'show' at the end.
One more thing I'm going to do,
that is put the Log messages.
Toast will be my visible part
and Log I can come back
to my Android Studio
and see that logs have been generated
for that particular method.
So let's say, Mainactivity.
This will be my tag.
And this will be the message
I want to show, onCreate.
So, I will copy these two statements
for each and every method.
Now, you will see that in each 
and every lifecycle method,
I always do super. onStart
because before doing anything on...
because before doing
anything of my own
in that particular method,
I want the functionality
of [inaudible] class
for that particular method.
So, now I will paste...
this in each and every method.
Now, all I have to do is
start changing the messages.
Instead of onCreate in onDestroy,
I will put the message onDestroy.
Same goes with Toast, also.
And for onRestart it will be onRestart
for Toast and for Log, too.
For onStop it will be
onStop message in logcat
and onStop Finished for Toast.
And onPause it will be onPause,
onResume, onResume.
And start.
And that's all I have to do
to understand the lifecycle of activity.
Now, I need to run my application.
I will click on the Run button
and run the application
in the emulator.
So, here, now we will try to understand
how exactly the application--
our application's main activity works.
If I can see my activity
right on the screen,
that means it has already reached
to onResume state.
But to reach it to onResume state,
it has to go through first
onCreate and onStart.
So, first the Toast of onCreate
and then, the Toast of onStart
should be... there.
Okay.
The output has already generated.
Let me restart this application
to see the output.
See here?
OnCreate, onStart Finished
and onResume Finished.
So, you see the chronological order here.
First, the onCreate Toast was called,
then onStart, and then onResume.
In the same manner,
you can look at
the Android monitor tool also,
inside which there will be a logcat,
and in the logcat
you can see first the onCreate.
This is the log
which we actually put in our code
and it has been shown in my logcat.
So, Mainactivity onCreate is shown first.
Next, onStart, then onResume.
So, if I now try to click on Home button,
what should be the lifecycle now?
It should go to onPause first.
Then onStop.
So, onPause Finished
and onStop Finished.
In the same manner,
it should show here, too.
As you can see, onPause and onStop.
But this application is
still not destroyed.
It's still in the main memory.
I can still come back to this application
if I go to my task manager here.
And you can see
my application is still there,
and if I click it,
what will be the lifecycle?
It will start from onRestart,
then onStart, and then onResume.
So, onRestart, onStart
and then, onResume.
If I can see my applications,
that means it's already in onResume.
In the back, onRestart and onStart 
has already finished.
Same goes with the Toast,
so onRestart, onStart and onResume.
Last but not the least,
how we destroy our application,
that is the destroying lifecycle.
If I click my back button,
it goes to onPause, onStop
and all the way to onDestroy.
Now my application is indeed destroyed.
So you can see in Log also,
onPause, onStop, onDestroy.
But you must be thinking
that I can still see my application
in this task manager.
So, why exactly can I see
my application in this back stack?
That's because this is not 
in my main memory.
It's in my cache memory,
which has been maintained 
by my Android system itself.
So, if I try to open
this application from here now,
it will never start from onRestart.
It will always start from onCreate.
So, that will prove my point
that application was indeed
out of the memory,
and if it is starting from onCreate,
that means my application started
as a complete new application
and the activity started
as a complete new activity.
See? onCreate, onStart and onResume.
So, in the same way,
you can see Logs, also,
onCreate, after onDestroy.
It never started from onRestart,
onCreate, onStart and onResume.
So that was all about
activities lifecycle.
Thank you.
♪ (music) ♪