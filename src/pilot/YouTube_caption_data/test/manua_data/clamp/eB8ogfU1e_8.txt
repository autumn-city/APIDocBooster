Artificial intelligence (AI) applications
such as recommendation systems, web search,
language translation, driverless cars have
changed our lives. Right!
One of the hottest subfields of AI is deep
learning.
Deep learning is an extension of artificial
neural networks.
While artificial neural networks consist of
one hidden layer, deep neural networks consist
of multiple hidden layers.
Many matrix operations are used in deep learning
analysis.
You need to use a library to implement these
operations.
The most used libraries for deep learning
are PyTorch and TensorFlow.
TensorFlow is mostly used in industry while
PyTorch is used more for academic research.
In this video, I will talk about PyTorch for
deep learning.
In summary,
First of all, I will cover what PyTorch is.
and then I will talk about the advantages
of PyTorch.
Next, I will show you how to install PyTorch.
Finally, I will explain how to use a pre-trained
model in PyTorch.
I will get a picture from the internet and
predict the class of this picture using PyTorch.
This is a perfect example for the beginner
who wants to learn PyTorch.
In this example, I will use a dog picture
and predict the dog's genus.
If you want, you can use a different picture
such as tea or flowers.
Before getting started, we create the videos
about AI, data science, machine learning and deep learning.
Please don't forget to subscribe and hit the
notification bell.
Let's dive into what PyTorch is.
PyTorch is a popular library written in the
Python language.
It's used specifically for deep learning.
PyTorch was primarily developed by Facebook.
It later became a free and open-source library
in 2017.
With PyTorch, you can easily perform array
operations and build dynamic neural networks.
You can also speed up these processes using
the GPU.
In other words, you can make fast deep learning
projects with the simple and flexible with
PyTorch.
So why should we choose PyTorch?
Let's take a look at the advantages of PyTorch.
In this section, I am going to go through
the advantages of PyTorch.
PyTorch is very popular because it is easy to use.
It has a large community of developers and
users.
Many companies and research groups use PyTorch
for deep learning.
Knowing PyTorch is a sought-after skill in
both industry and academia.
You can also make end-to-end projects with
PyTorch.
With PyTorch you can use for deep learning
project steps such as data preprocessing,
model building, and model deployment.
As you know, Python is an interpretive language.
In PyTorch, it works in eager mode since it's
written in Python.
you can immediately see the
results of the codes you wrote in PyTorch.
Thus, you can easily find your debug codes.
Cloud is important for big data. Right!
Cloud services like AWS or Azure make your
data analyses easier.
You can use PyTorch on the cloud platforms.
A powerful computer is required for deep learning.
If you don't have a powerful computer, don't
worry.
You can use PyTorch for free on both Google
Colab and Kaggle Kernels.
PyTorch supports parallel computing.
So you can use GPU or TPU for mathematical
operations in PyTorch.
Thus, you can do your deep learning processes
faster.
PyTorch has a large ecosystem.
For example, fastai, which makes it easy to
write code for deep learning projects, is
written based on PyTorch.
With fastai, you can analyze both computer
vision and natural language processing.
As you can see, PyTorch is a perfect library
for deep learning projects.
There are many more reasons to choose PyTorch.
I have only mentioned some important advantages
here.
Let's move on and take a look at how to install
PyTorch.
If you have a powerful computer, you can install
PyTorch on your computer.
PyTorch's official website has made installation
easy by preparing an easy interface.
To install PyTorch, go to the official website
of PyTorch, choose the suitable options, and
then get this command.
After that, run this command in the terminal
or the virtual environment you created in
anaconda.
To install PyTorch on Anaconda, open the Anaconda
prompt.
First, create a new virtual environment here.
Let me set conda create --name PyTorch
With this command, a new virtual environment
called PyTorch is created.
I'm not going to create it again because I
have created it before.
Next, you have to activate this environment.
For this, let me set activate conda the name
of the virtual environment.
In our case, I'm gonna set PyTorch.
You can understand that the virtual environment
is active by the name of the environment at
the beginning of the line.
you paste the command you copied
from PyTorch's site here.
press enter.
If your computer has an NVIDIA graphics card,
don't forget to select the GPU option.
With GPU, you can do your deep learning analysis
50 times faster.
If you don't have a powerful computer, don't
worry, you can also do deep learning analysis
using cloud platforms like AWS.
But using this cloud service is paid.
Colab is a cloud-based free service offered
by Google.
Colab's interface is similar to Jupyter Notebook.
You can run your Python codes in Colab.
You can also use Colab with GPU.
PyTorch is installed in Colab so you don't
need to install it separately.
Let's see the installed version of PyTorch
now.
You can see the version of PyTorch.
One advantage of Colab is that its interface
is similar to Jupyter Notebook.
If you know how to use Jupyter Notebook, you
can use Colab easily.
By default, Colab doesn't work with GPU.
Let's check this out.
As you can see, the output is false.
To work with GPU, choose Change Run Type from
the Runtime menu and select GPU from the Hardware
accelerator section.
Now let's run this command again.
ops!
I got an error message.
Let's fix this.
I need to run commands from the first cell.
Let me run this cell and the next cell.
Okey
And true is written to the screen.
After that my codes are run on GPU.
Perfect guys.
If you buy the Pro version of Colab, you can
use a better GPU and more memory.
The free version is sufficient for the analysis
I'm gonna do in this lesson.
So far I've been introduced to PyTorch and
shown how to install it.
I hope everything is alright.
You can write your questions in the comments
section.
The best way to learn is by doing
Let's go ahead and show a simple example to
understand PyTorch.
Now let me show how to do image classification
with PyTorch.
In this practice, I'm gonna get a picture
from the internet and specify the class of
this picture.
Image classification was a difficult problem
in the 2000s.
But after 2010, with the development of new
architectures and the improvement of GPUs,
image classification became easier to do.
Let's get a picture of a dog.
If you want, you can use a different image
for this analysis.
Let's use the urllib library to pull an image
from the web.
First, let's import this library and request.
Okay, now let's take a url variable and assign
the link of the site where I will get the
picture to this variable.
Ok, I assigned the link to the variable.
You can find this link in the description
box below
Let's assign the name of the image found in
this link to the file_name variable.
let me get a picture from the Internet.
Now, we got a picture.
Let's read the picture with the Pillow library
and then see the picture with matplotlib.
First, let's import 
the libraries.
Let's assign the image to the img variable.
Let's see the picture with matplotlib.
You can see the picture.
This picture is a very cute dog, right!
We understand that this picture is a dog.
But how will the computer understand this
picture?
I'm gonna talk about this.
Our goal is to find the tag for this picture.
For this, I'm gonna use an algorithm based
on neural networks.
Before giving the image to the algorithm,
you need to preprocess the image.
Make sure the picture is available for the
algorithm.
Our picture is in color format.
It has 3 channels, RGB and the size of it
is 1600*1200.
Remember, data preprocessing steps in Pytorch
are called transforms.
Now let's make the image suitable for analysis
with transforms.
Let's first import PyTorch and then transforms.
Let's use Compose() to define a series of
transform to preprocess the picture.
First, let's resize the image to 256 sizes
with the Resize method.
Let's apply central clipping to fit the neural
network.
As you know, neural networks work with numerical
data.
Let's turn this picture into a tensor in picture
PIL format.
Remember, a tensor is the basic data object
in PyTorch.
You can think of Tensor as a NumPy array with
extra features.
As you know, pictures consist of pixel values.
Let's scale these pixel values ​​between
0–1.
With this scaling, we can make both faster
and more accurate predictions.
Thus, we created data preprocessing steps
to make the picture suitable for the neural
network and assigned it to the preprocess
variable.
Now let's apply these steps to the picture
we have.
img_tensor is 224*224 in size and
consists of 3 channels in the form of RGB.
Deep learning algorithms work with millions
of data.
It does not make sense to give all of these
data to the model at once.
Data is given to neural networks in groups
called batches.
The batch size for big data is usually 32
or 64.
You specify these values ​​according to
your analysis.
We only have one picture, but deep learning
models wait for data to be batched.
Now let's add a batch to our data.
I'm gonna use unsqueeze method to add a dimension
to the data.
In this method, we need to specify where to
add the dimension.
I set 0 to add dimension at the beginning.
Let's now see the size of the data.
Thus, our data was 1 batch, 3 channels, and
224*224 pixels.
Now the picture is ready to enter the neural
network.
As you know, training deep learning models
is both time-consuming and costly.
It makes more sense to use the pre-trained
model.
You can find the pre-trained models in the
PyTorch repo.
For example, it is very easy to upload a model
used to classify images with Torchvision.
Let's use AlexNet, which won the ImageNet
competition in 2012, to classify images.
First, let's import models from torchvision.
AlexNet works well for classifying pictures.
There are different models from AlexNet.
You can choose the model you want suitable
for your analysis.
Deep learning is more of an art than a science.
Now let's install alexnet.
With the pretrained=True option, the previously
trained coefficients of the model are loaded.
Now let's create a device variable so that
the analysis will run on the GPU if it's on
the GPU, and the CPU if it isn't.
Since I am showing a simple example, a GPU
is not required for this analysis.
You can also run this analysis on the CPU.
Now let's configure the model with model.eval.
Let's choose the device on which the model
will run.
For this, I use the device variable that I
just created.
Let's assign the command to run the model
to the variable y.
Let's see the dimension of y.
Here 1 represents the batch of data.
Since we have only 1 image, the batch number
is 1.
Since the number of classes is 1000, the value
of 1000 is written on the screen.
Now let's see the class that gets the most
value.
Let's print these variables to the screen.
Our model found the class with the 258th index
with the highest value of 16.8252.
But we don't know the class of this index.
Let's pull the class names from PyTorch's
site now.
Let's create a url variable first.
Let's create a 
class label variable.
Now let's pull the list from the internet
using these variables.
Let's open this list.
Let's assign the rows in the list to the classes
variable.
Let's see the tag with the 258th index.
As you can see, the breed of the dog is written
on the screen.
Let me search this breed.
As you can see, this is very nice dog.
That's it.
I've talked about PyTorch for
Deep Learning.
In summary, in this video, I first explained
what PyTorch is and its advantages.
Next, I showed you the installation.
And lastly, I explained how to predict the
class of an image using alexnet model.
I hope you enjoy it.
Please don't forget to subscribe, hit the
notification bell, give me a like.
You can find the notebook link I used in this
video in the description box below.
See you in the next video.
Bye for now…