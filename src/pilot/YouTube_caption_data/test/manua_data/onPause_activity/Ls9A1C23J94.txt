SPEAKER: One of the most
interesting data storage
options that Android provides
you is shared preferences.
So in this session
we will learn how
to save data using
shared preferences
and how to listen to changes
if preferences gets changed.
What is shared preferences?
Shared preferences is one of
the ways in which you would
basically store and retrieve
small pieces of primitive data
type such as String,
INT, Float, Boolean,
that make up your
preferences in an XML file
inside the app on
the device storage.
Shared preferences really can
be thought of as a dictionary
or a key value pair.
So for example, you might
have a key being user name,
and for the value, you might
store the user's username.
And they would
put that in there.
And then you could retrieve
that value by a key.
It is just like
using a dictionary.
You have a simple
shared preferences
API that you can use to store
preferences and pull them
back out.
Shared preferences is a table
in different situations.
For example, when user
settings needs to be saved
or to store data that can be
used in different activities
within an app.
As we have already know that
onPause() will always be called
before your activity is placed
in the background or destroyed.
So for the data to be saved
persistently we prefer saving
it in onPause(), which could
be restored in onCreate()
of the activity, as we already
know that onPause() will always
be called before your activity
is placed in the background
or destroyed.
So for the data to be
saved persistently,
we prefer saving
it to onPause(),
which could be restored in
onCreate() of the activity.
These are small bits of data
stored with a key value pair,
and is kept private within
the scope of the application.
But shared preferences are
different from that activity
instance state that you learned
about in the previous sessions.
Let's see how.
Data in shared references
will be persistent
even if the user closes
the application or apps get
killed and restarted, or
the device is rebooted.
Shared preferences values will
persist across user sessions.
They are the things that you
would have in an application
to store some kind of settings
that the user would set.
That's the basic
idea of preferences.
So that data can be remembered
across the stations.
Perhaps they could set
some preference settings
like log in details
or the game score.
And on the other hand,
save in stand state.
The data will be
preserved for the same use
session across the
activity instance
and not remembered
across different sessions,
which we commonly use.
The states get recreated
either after the device gets
rotated or some configuration
changes has been made.
So how do we create
our shared preferences?
The first thing that
we are going to do
is to create one
shared preferences file
that can be accessed via
all application components.
So name it with a
package name of your app
to make it unique and
easy to associate.
And when you wanted to get the
values from shared preferences,
use getSharedPreferences()
method.
Shared preferences
provides modes
of storing data inside the
shared preferences file,
such as the private mode
and the public mode.
I suggest you to store the data
inside the shared preferences
file in the private mode.
To get an instance of
shared preferences,
use the
getSharedPreferences() method.
The method takes
two parameters--
the name of the
preference settings,
that is, the shared
preferences file, and the mode.
If you want to edit or save
any value to shared preferences
file, we need to get the
reference to the shared
preference editor.
So this editor basically
is an interface
that allows you to edit the data
inside the shared preferences
file and take care of
all the file operations.
And whatever changes you
are going to make inside
the editor, that would be
reflected back in the shared
preferences file once you got
the apply() method in this
editor object to
save the data safely.
So this is how we save
the data in onPause().
Call edit to get the shared
preferences editor instance
and add the data with methods
such as putInt() to store
individual value with the key.
Here we are adding
two individual values
as preferences and finally call
apply() to save all the values
in the shared references.
Now, to restore the values on
onCreate() of activity you use
such methods as
getSharedPreferences()
or getInt() of shared references
instance to get an access
to the preferences
stored in the file.
Get method will
take two arguments--
the key and the default value.
In case the key is not
found the default argument
value will be used.
So we don't have to test if our
preferences exist in the file.
Use shared preferences,
getSharedPreferences() method.
This method,
getSharedPreferences() from
a specified file.
And this is how we read
the values from it.
If you want to give
users the ability
to create any preferences
you may have saved,
it's easy to be done.
Once you get an instance of the
editor you just call clear()
on it.
That will remove all the
values from the preferences.
You'll still need to call
apply() to apply the changes
after you have cleared
the preferences.
Also, if you set any preferences
and hit clear() together.
However to apply the changes,
clear() methods will always be
called first.
So this is how you can
clear the preferences.
Android uses a single instance
of the preference file
within the same application.
This means that if you open the
same preference file twice--
for example, in two different
activities at the same time,
every change that you
apply using one object
would immediately be
reflected in the other object.
So if you change a preference
within an activity,
you need a method to
notify the other components
of your application using
the same preference file
that the change has occurred.
So in order to
listen to changes,
you have to follow these steps.
Implement the shared
inferences onSharedPreference
ChangeListener() interface,
but then your component first.
Then, register the list
now with the register
onSharedPreferences()
to change this method
onSharedPreferences().
Now they have a
view to adjust this.
You've adjusted the list now
in the appropriate methods like
on onResume() of the activity.
And to unregister the list
now, you will unregister it
in onPause() of the activity.
Now, override the method
onSharedPreferenceChange()
in order to listen to
preference changes.
So this is how we implement
the onSharedPreferen
ceChangeListener() now interface
and onSharedPreferenceChange()
call back method.
And this is how you can listen
to changes in the preferences
via the register
onSharedPreferen
cesChangeListener() method
onSharedPreferences().
Now you know that another
component offered up
has adjusting the value
of the current references.
You need a strong
reference to the list now.
As we get reference objects
getGarbageCollector()
in a garbage collection pass.
On the other hand strong
references are the references
that you use all the time.
It doesn't let
garbage collection
for the other objects.
Let's say you registered
a onSharedPreferen
ceChangeListener() now with
the preference manager.
The preference manager will
store it as a weak reference.
This means that whenever the
garbage collection strikes,
the listener object
will get collecting
as there is no strong
references anywhere
to the list and that object.
As a result, the
preference manager
will lose the weak
reference it holds
to the listener you registered.
And you won't get any
preferencing callbacks
thereafter.
When registering the list
now, the preference manager
doesn't store a strong
reference to the listener.
You must store a strong
reference to the listener
or it will be susceptible
to garbage collection.
Keep a reference to the
listener in the instance
data of the objects that
will exist as long as you
need the list now.
Here is an app in
view, which you
are going to work with
in your practical,
where you will start
with the starter app
and Add Shared Preferences.
You will also add
a reset button that
sets both the count and the
background color to the default
and clears the preferences file.
Isn't it interesting?
Learn more from these links
and do the practical now.
Thanks for watching.
[MUSIC PLAYING]