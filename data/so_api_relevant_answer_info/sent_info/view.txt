For a graphical view I'd use gitk:
Use it to view history on a single file: tig [filename]
It has some minor gotchas, like showing fatal: Not a valid object name in the View tab when clicking on the deletion revision, but I can live with that.
If you are using [Eclipse (hyper-link)] with the Git plugin, it has an excellent comparison view with history.
Unfortunately (at this time) there is no easy way to launch this view from the command line — Sourcetree's CLI currently just opens repositories.
In the menu enable to display unchanged files: View / Show unchanged files
I'm probably about where the OP was when this started, looking for something simple that would let me use git difftool with vimdiff to review changes to files in my repo starting from a specific commit.
You can also view the diff using the same syntax
So now just keep that number in mind when viewing logs.
Similar: To view unmerged branches:
A model is the opposite of a view -- a view knows how to display data, but it knows nothing about what to do with data, whereas a model knows everything about how to work with data, but nothing about how to display it.
The role of a controller is to mediate between view and model.
Therefore, they need a reference to one or more view objects and one or more model objects.
The root view for your app displays that table, and it might be responsible for loading the array from a file.
In order to fill in the row, the controller creates a detail view controller and gives it the new dictionary.
The detail view controller fills in the dictionary and returns.
[Sharing data between view controllers and other objects (hyper-link)]
It worked fine and allowed me to pass a string and an array forward and back between my views.
Passing data forward to a view controller from another view controller.
You would use this method if you wanted to pass an object/value from one view controller to another view controller that you may be pushing on to a navigation stack.
For this example, we will have ViewControllerA and ViewControllerB
To pass a BOOL value from ViewControllerA to ViewControllerB we would do the following.
in ViewControllerB.h create a property for the BOOL
[code snippet]
in ViewControllerA you need to tell it about ViewControllerB so use an
[code snippet]
Then where you want to load the view, for example, didSelectRowAtIndex or some IBAction, you need to set the property in ViewControllerB before you push it onto the navigation stack.
This will set isSomethingEnabled in ViewControllerB to BOOL value YES.
This is similar to the above but instead of passing the data before you push the view controller, you use a method called
So to pass a BOOL from ViewControllerA to ViewControllerB we would do the following:
in ViewControllerB.h create a property for the BOOL
[code snippet]
in ViewControllerA you need to tell it about ViewControllerB, so use an
[code snippet]
Create the segue from ViewControllerA to ViewControllerB on the storyboard and give it an identifier.
Next, we need to add the method to ViewControllerA that is called when any segue is performed.
In our example, we will check for "showDetailSegue" and if that's performed, we will pass our BOOL value to ViewControllerB
[code snippet]
If you have your views embedded in a navigation controller, you need to change the method above slightly to the following
This will set isSomethingEnabled in ViewControllerB to BOOL value YES.
To pass data back from ViewControllerB to ViewControllerA you need to use Protocols and Delegates or Blocks, the latter can be used as a loosely coupled mechanism for callbacks.
To do this we will make ViewControllerA a delegate of ViewControllerB.
This allows ViewControllerB to send a message back to ViewControllerA enabling us to send data back.
For ViewControllerA to be a delegate of ViewControllerB it must conform to ViewControllerB's protocol which we have to specify.
This tells ViewControllerA which methods it must implement.
In ViewControllerB.h, below the #import, but above @interface you specify the protocol.
Next still in the ViewControllerB.h, you need to set up a delegate property and synthesize in ViewControllerB.m
[code snippet]
In ViewControllerB we call a message on the delegate when we pop the view controller.
That's it for ViewControllerB.
Now in ViewControllerA.h, tell ViewControllerA to import ViewControllerB and conform to its protocol.
In ViewControllerA.m implement the following method from our protocol
[code snippet]
Before pushing viewControllerB to navigation stack we need to tell  ViewControllerB that ViewControllerA is its delegate, otherwise we will get an error.
[Using Delegation to Communicate With Other View Controllers (hyper-link)] in the View Controller Programming Guide
Passing Data back from one class to another (A class can be any controller, Network/session manager, UIView subclass or any other class)
Create the instance of the first view controller in the second view controller and make its property @property (nonatomic,assign).
Assign the SecondviewController instance of this view controller.
When you finish the selection operation, copy the array to the first View Controller.
When you unload the second view, the first view will hold the array data.
If you want to send data from one to another viewController, here's a way to do it:
Say we have viewControllers: viewControllerA and viewControllerB
Now in file viewControllerB.h
In file viewControllerB.m:
In file viewControllerA.m:
So this is how you can pass data from viewControllerA to viewControllerB without setting any delegate.
The OP didn't mention view controllers but so many of the answers do, that I wanted to chime in with what some of the new features of the LLVM allow to make this easier when wanting to pass data from one view controller to another and then getting some results back.
Use notification center to pass data from one view to another.
Access the data objects to be passed, set them, and then push the view controller.
First of all, declare all the objects in your SecondViewController.h file like
Now you can fill that memory before pushing this ViewController.
Go to your SecondViewController.h and write two methods:
Go to the place where you want to push the SecondViewController and do the following stuff:
Set the value you want to share with respect to a key of your choice and get the value from NSUserDefault associated to that key in the next view controller.
You can just create a property in viewcontrollerA.
Create an object of viewcontrollerA in viewcontrollerB and assign the desired value to that property.
Let's name view controller that waits for returned data as "A" and returning view controller as "B".
and "B" view controller should declare callback property, BViewController.h:
Than in implementation file BViewController.m after we have desired values to return our callback should be called:
Passing data between FirstViewController to SecondViewController as below
FirstViewController String value as
We need to create a string object in the SecondViewController.h file
[code snippet]
Need synthesize that value in the FirstViewController.m file below the header declaration
[code snippet]
And in file FirstViewController.h:
[code snippet]
In FirstViewController, from which method we navigate to the second view, please write the below code in that method.
NewsViewController
NewsDetailViewController.h
NewsDetailViewController.m
SecondViewController.h
Create the property in the next view controller .h file and define getters and setters.
Passing data back from ViewController 2 (destination) to viewController 1 (source) is the more interesting thing.
Now you have a segue that "goes back" so you can use the destinationViewController property in the prepareForSegue of VC2 and
change any property of VC1 before it goes back.
It's easy to pass data around since it's a single object or couple of objects and if you have, let's say, a UINavigationController controller, you can keep the reference to the model inside and all pushed view controllers can access it directly from the navigation controller.
I'll assume we have two view controllers, ViewController1 and ViewController2, and this check thing is in the first one and when its state changes, you want to do something in ViewController2.
Now name it ViewController1Delegate or whatever you want and write these between the @interface and @end directives:
Now go to ViewController2.h and add:
Now go to ViewController2.m and inside the implementation add:
Now go to ViewController1.h and add the following property:
Now if you are creating ViewController1 inside ViewController2 after some event, then you should do it this way using NIB files:
Whenever you detect the event of check changed in ViewController1, all you have to do is the below:
I am currently contributing to an open source solution to this problem through a project called MCViewFactory, which may be found here:
[Manticore iOS View Factory (hyper-link)]
The idea is imitate Android's intent paradigm, using a global factory to manage which view you are looking at and using "intents" to switch and pass data between views.
You setup all your views in .XIB files and register them in the app delegate, while initializing the factory.
Now, in your view controller (VC), anytime you want to move to a new VC and pass data, you create a new intent and add data to its dictionary (savedInstanceState).
All of your views that conform to this need to be subclasses of MCViewController, which allow you to override the new onResume: method, allowing you access to the data you've passed in.
One approach is to share pointers to the model objects between view controllers.
Brute force iteration on view controllers (in Navigation or Tab Bar Controller) to set the data
Another approach is to handle a screen full of data at a time and instead of coupling the view controllers to each other couple each view controller to single data source that they can get to independently.
So if your singleton object was DataAccess you could do the following in the viewDidLoad method of UIViewController:
So if you want to just give a NotesViewController the notes object you can because it'll have an inverse relationship to something else like the notebook.
If you need data on the notebook in the NotesViewController you can walk back up the object graph by doing the following:
The question asks about passing information between view controllers.
The specific example given asks about passing information between views, but given the self-stated newness to iOS, the original poster likely meant between viewControllers, not between views (without any involvement from the ViewControllers).
It seems that all the answers focus on two view controllers, but what if the app evolves to need to involve more than two view controllers in the information exchange?
To help define a two-view-controller situation and a more-than-two-view-controller situation, I am going to define two concrete application scenarios.
Scenario one: maximum two view controllers ever need to share information.
There are two view controllers in the application.
There is a ViewControllerA (Data Entry Form), and View Controller B (Product List).
In this scenario, ViewControllerA and ViewControllerB must communicate directly with each other and no other view controllers.
Scenario two: more than two view controllers need to share the same information.
There are four view controllers in the application.
Three view controllers present differently filtered views of the same data:
ViewControllerA - Luxury Items
ViewControllerB - Non-insured Items
ViewControllerC - Entire Home Inventory
ViewControllerD - Add New Item Form
Any time an individual item is created or edited, it must also synchronize with the other view controllers.
For example, if we add a boat in ViewControllerD, but it is not yet insured, then the boat must appear when the user goes to ViewControllerA (Luxury Items), and also ViewControllerC (Entire Home Inventory), but not when the user goes to ViewControllerB (Non-insured Items).
We need be concerned with not only adding new items, but also deleting items (which may be allowed from any of the four view controllers), or editing existing items (which may be allowed from the "Add New Item Form", repurposing the same for editing).
Since all the view controllers do need to share the same data, all four view controllers need to remain in synchronization, and therefore there needs to be some sort of communication to all other view controllers, whenever any single view controller changes the underlying data.
It should be fairly obvious that we do not want each view controller communicating directly with each other view controller in this scenario.
In case it is not obvious, consider if we had 20 different view controllers (rather than just 4).
How difficult and error-prone would it be to notify each of the other 19 view controllers any time one view controller made a change?
setting properties on view controllers directly
In the second scenario, we have four different view controllers, who all want to know about changes to the underlying data.
When the collection of home inventory items changes, the view controllers need to be made aware of this change.
The view controllers must formally observe the sharedManager.
Each of the four view controllers would subscribe to notifications, and the sharedManager would send notifications to the notification center when appropriate.
The inventory manager does not need to know anything about the view controllers or instances of any other classes which may be interested in knowing when the collection of inventory items changes; the NSNotificationCenter takes care of these implementation details.
The View Controllers simply subscribe to notifications, and the data manager simply posts notifications.
[Managing Data Flow Between View Controllers (hyper-link)]
[Passing Data Between View Controllers (hyper-link)]
If you want to pass data from ViewControlerOne to ViewControllerTwo, try these...
Do these in ViewControlerOne.h:
Do these in ViewControllerTwo.h:
Synthesize str2 in ViewControllerTwo.m:
Do these in ViewControlerOne.m:
Do these in ViewControllerTwo.m:
You can save data in an App delegate to access it across view controllers in your application.
If you declare a NSArray object *arrayXYZ, then you can access it in any view controller by appDelegate.arrayXYZ.
The idea is to pass a string from the text field in the First View Controller to the label in the Second View Controller.
To make the segue, you just Control click on the button and drag over to the Second View Controller.
First View Controller
The code for the First View Controller is
Second View Controller
And the code for the Second View Controller is
Set the first and second View Controllers to the appropriate Swift files in [Interface Builder (hyper-link)].
To pass data back from the second view controller to the first view controller, you use [a protocol and a delegate (hyper-link)].
Again, to make the segue, you just Control drag from the button to the Second View Controller.
Set the segue identifier to showSecondViewController.
First View Controller
The code for the First View Controller is
Second View Controller and Protocol
The code for the second view controller is
Note that the protocol is outside of the View Controller class.
Running the app now, you should be able to send data back from the second view controller to the first.
Just simply passing data from one view to the next.
This is a very simple view layout with a segue between them.
The View Controllers
Once it is run, it should switch to the receiver view automatically and pass the value from the sender to the receiver, displaying the value in the console.
To send the data from one view controller (VC) to the other, use this simple approach:
There are many answers to this questions offering many different ways to perform view controller communication that would indeed work, but I don't see anywhere mentioned which one are actually best to use and which ones to avoid.
To pass data forward:


override the prepare(for:sender:) method of UIViewController when using a storyboard and segues
pass data through an initializer or through properties when performing view controller transitions thtough code
To pass data backwards


update the app shared state (which you can pass forward between view controllers with either one of the methods above)
use delegation
use an unwind segue
[How iOS View Controllers Communicate With Each Other (hyper-link)]
Suppose you have to pass string from FirstViewController to SecondViewController.
Your First View Controller.
Your Second View Controller
There are 3 types for passing data one ViewController to another
  ViewController.
Demo Project Link Here - [https://github.com/kamanijasmin13/Swift-Pass-data-between-viewcontrollers (hyper-link)]
Demo Project Link Here - [https://github.com/kamanijasmin13/Swift-Pass-data-between-viewcontrollers (hyper-link)]
There are two scenarios where you may want to pass data from a ViewController to another:
When there is an "A" ViewContoller in the hierarchy and you want to send some data to "B" which is the next viewcontroller.
Now the B viewcontroller should be blind about its parent.
Create a delegate protocol in the B viewcontroller and a delegate property.
In the A viewcontroller, we implement the B viewcontroller's delegate protocol and will set self as the delegate property of B viewcontroller in prepare(forSegue:) method.
You can create a push segue from the source viewcontroller to the destination viewcontroller and give an identifier name like below.
And you have to check the value in viewdidload of destination viewcontroller and then store it into the database.
As working with setter and getter methods, like in viewController.h
[code snippet]
Now, in viewController.m
[code snippet]
Here I have a PDF URL and a segue to another viewController like this and pdfObject is my pdfModel.
[code snippet]
Now successfully I received my PDF URL string and other ViewController and use that string in webview...
In this, you don’t need to create variables every time parsing data from one to another view controller.
[code snippet]
File Utilities.h:
[code snippet]
Now in file utilities.m:
[code snippet]
Now it's done, come to your file firstViewController.m and call the delegate
NSString*str = [NSString stringWithFormat:@"%@", pdfObject.objPath];
[Connection sharedInstance].strUrl = nil;
[Connection sharedInstance].strUrl = str;
Now go to you file secondViewController.m directly, and use it without creating a variable
In viewwillapear what I did:
[code snippet]
There are multiple options for passing data between view controllers.
Passing Data through Navigation Controller Push: From ViewControllerA to ViewControllerB
Declare variable in ViewControllerB
Print Variable in ViewControllerB' ViewDidLoad method
In ViewControllerA Pass Data while pushing through Navigation Controller
ViewControllerA
ViewControllerB
Passing Data through Segue: From ViewControllerA to ViewControllerB
Create Segue from ViewControllerA to ViewControllerB and give Identifier = showDetailSegue in Storyboard as shown below
In ViewControllerB Declare a viable named isSomethingEnabled and print its value.
In ViewControllerA pass isSomethingEnabled's value while passing Segue
ViewControllerA
ViewControllerB
Passing Data through Delegate: From ViewControllerB to ViewControllerA
Declare Protocol ViewControllerBDelegate in the ViewControllerB file, but outside the class
Declare Delegate variable instance in ViewControllerB
Send data for delegate inside viewDidLoad method of ViewControllerB
Confirm ViewControllerBDelegate in ViewControllerA
Confirm that you will implement a delegate in ViewControllerA
Implement delegate method for receiving data in ViewControllerA
ViewControllerA
ViewControllerB
Passing Data through Notification Observer: From ViewControllerB to ViewControllerA
Set and post data in the notification observer in ViewControllerB
Add Notification Observer in ViewControllerA
Receive Notification data value in ViewControllerA
ViewControllerA
ViewControllerB
Passing Data through Block: From ViewControllerB to ViewControllerA
Declare block in ViewControllerB
Set data in block in ViewControllerB
Receive block data in ViewControllerA
ViewControllerA
ViewControllerB
Think of @EnvironmentObject as a smarter, simpler way of using @ObservedObject on lots of views.
Rather than creating some data in view A, then passing it to view B, then view C, then view D before finally using it, you can create it in view and put it into the environment so that views B, C, and D will automatically have access to it.
Note: Environment objects must be supplied by an ancestor view – if SwiftUI can’t find an environment object of the correct type you’ll get a crash.
This applies for previews too, so be careful.
Let's take a simple example of passing an Int value of count between ViewControllers.
A parent ViewController (VC) has a variable named count, and child ViewController can let the user change the value of count.
Also favorite ways to passing data to the previous VC/view:
There are several ways to pass data between view controllers.
Both of these frameworks aim to seperate concerns - for instance, interaction with a data source (model), application logic (or turning this data into useful information) (Controller/Presenter) and display code (View).
The distinction made is that in an MVC application traditionally has the view and the controller interact with the model, but not with each other.
MVP designs have the Presenter access the model and interact with the view.
Having said that, ASP.NET MVC is by these definitions an MVP framework because the Controller accesses the Model to populate the View which is meant to have no logic (just  displays the variables provided by the Controller).
View is more loosely coupled to the model.
The presenter is
  responsible for binding the model to
  the view.
Easier to unit test because interaction with the view is through
  an interface
Usually view to presenter map one to one.
Complex views may have
  multi presenters.
Controller are based on behaviors and can be shared across
  views
Can be responsible for determining which view to display
MVP = Model-View-Presenter
MVC = Model-View-Controller

Both presentation patterns.
They separate the dependencies between a Model (think Domain objects), your screen/web page (the View), and how your UI is supposed to behave (Presenter/Controller)
They are fairly similar in concept, folks initialize the Presenter/Controller differently depending on taste.
Most notable is that MVC pattern has the Model updating the View.
The view, in most cases, creates its presenter.
The presenter will interact with the model and manipulate the view through an interface.
The view will sometimes interact with the presenter, usually through some interface.
This comes down to implementation; do you want the view to call methods on the presenter or do you want the view to have events the presenter listens to?
It boils down to this: The view knows about the presenter.
The view delegates to the presenter.
The controller then creates the appropriate view and interacts with the model to further configure the view.
It boils down to: the controller creates and manages the view; the view is slave to the controller.
The view does not know about the controller.
Fowler has broken the pattern into two - Passive View and Supervising Controller.
When using Passive View, your View typically implement a fine-grained interface with properties mapping more or less directly to the underlaying UI widget.
For instance, you might have a ICustomerView with properties like Name and Address.
Your Presenter class will talk to the model and "map" it to the view.
This approach is called the "Passive View".
The benefit is that the view is easy to test, and it is easier to move between UI platforms (Web, Windows/XAML, etc.).
In that case your View might have a property called Customer, which then again is databound to the UI widgets.
You don't have to think about synchronizing and micro-manage the view, and the Supervising Controller can step in and help when needed, for instance with compled interaction logic.
The third "flavor" of MVP (or someone would perhaps call it a separate pattern) is the Presentation Model (or sometimes referred to Model-View-ViewModel).
I have also blogged about the Model-View-ViewModel pattern in the context of Silverlight over at [YouCard Re-visited: Implementing the ViewModel pattern (hyper-link)].
MVP is not necessarily a scenario where the View is in charge (see Taligent's MVP for example).
I find it unfortunate that people are still preaching this as a pattern (View in charge) as opposed to an anti-pattern as it contradicts "It's just a view" (Pragmatic Programmer).
"It's just a view" states that the final view shown to the user is a secondary concern of the application.
Microsoft's MVP pattern renders re-use of Views much more difficult and conveniently excuses Microsoft's designer from encouraging bad practice.
As long as you are following separation of concerns between the view (that displays the data), the controller (that initialises and controls user interaction) and the model (the underlying data and/or services)) then you are achieving the benefits of MVC.
In MVP, the Presenter contains the UI business logic for the View.
All invocations from the View delegate directly to the Presenter.
The Presenter is also decoupled directly from the View and talks to it through an interface.
This is to allow mocking of the View in a unit test.
Once the save is completed, the Presenter will then call back the View through its interface so that the View can display that the save has completed.
The reason is that the View is always created first by the ASP.NET runtime.
Passive View: The View is as dumb as possible and contains almost zero logic.
A Presenter is a middle man that talks to the View and the Model.
The View and Model are completely shielded from one another.
The Model may raise events, but the Presenter subscribes to them for updating the View.
In Passive View there is no direct data binding, instead, the View exposes setter properties that the Presenter uses to set the data.
All state is managed in the Presenter and not the View.
Pro: maximum testability surface; clean separation of the View and Model
The View binds to the Model directly through data binding.
In this case, it's the Presenter's job to pass off the Model to the View so that it can bind to it.
Con: there's a less testable surface (because of data binding), and there's less encapsulation in the View since it talks directly to the Model.
In the MVC, the Controller is responsible for determining which View to display in response to any action including when the application loads.
This differs from MVP where actions route through the View to the Presenter.
In MVC, every action in the View correlates with a call to a Controller along with an action.
Once that Controller has completed its processing, it will return the correct View.
One other big difference about MVC is that the View does not directly bind to the Model.
The view simply renders and is completely stateless.
In implementations of MVC, the View usually will not have any logic in the code behind.
This is contrary to MVP where it is absolutely necessary because, if the View does not delegate to the Presenter, it will never get called.
Instead, the View binds directly to a Presentation Model.
The Presentation Model is a Model crafted specifically for the View.
The View then subscribes to events coming from the Presentation Model and updates itself accordingly.
The Presentation Model can expose commands which the view uses for invoking actions.
The advantage of this approach is that you can essentially remove the code-behind altogether as the PM completely encapsulates all of the behavior for the view.
This pattern is a very strong candidate for use in WPF applications and is also called [Model-View-ViewModel (hyper-link)].
MVC on other hand changes completely the game because the request gets intercepted by controller class before page is loaded, the business logic is executed there and then at the end result of controller processing the data just dumped to the page ("view")
In that sense, MVC looks (at least to me) a lot to Supervising Controller flavor of MVP enhanced with routing engine
[http://blog.vuscode.com/malovicn/archive/2007/12/18/model-view-presenter-mvp-vs-model-view-controller-mvc.aspx (hyper-link)]
My humble short view: MVP is for large scales, and MVC for tiny scales.
In MVP the view draws data from the presenter which draws and prepares/normalizes data from the model while in MVC the controller draws data from the model and set, by push in the view.
In MVP you can have a single view working with multiple types of presenters and a single presenter working with different multiple views.
In those frameworks, the UI/HTML5/XAML, is aware of what property of the presenter each UI element displays, so when you bind a view to a presenter, the view looks for the properties and knows how to draw data from them and how to set them when a value is changed in the UI by the user.
to the view.
The view knows that the text field called 'car maker' needs to display the presenter Maker property.
You can then bind to the view many different types of presenter, all must have Maker property - it can be of a plane, train or what ever , the view doesn't care.
The view draws data from the presenter - no matter which - as long as it implements an agreed interface.
MVC is great, but the problem is that usually its controller per view.
Controller A knows how to set fields of View A.
If now, you want View A to display data of model B, you need Controller A to know model B, or you need Controller A to receive an object with an interface - which is like MVP only without the bindings, or you need to rewrite the UI set code in Controller B.
MVC (Model View Controller)
The input is directed at the Controller first, not the view.
There is a many-to-one relationship between the Controller and the View.
That’s because a single controller may select different views to be rendered based on the operation being executed.
Note the one way arrow from Controller to View.
This is because the View doesn’t have any knowledge of or reference to the controller.
The Controller does pass back the Model, so there is knowledge between the View and the expected Model being passed into it, but not the Controller serving it up.
MVP (Model View Presenter)
The input begins with the View, not the Presenter.
There is a one-to-one mapping between the View and the associated Presenter.
The View holds a reference to the Presenter.
The Presenter is also reacting to events being triggered from the View, so its aware of the View its associated with.
The Presenter updates the View based on the requested actions it performs on the Model, but the View is not Model aware.
MVP stands for Model - View- Presenter.
A presenter is acting as a supervisory role in MVP which binding View events and business logic from models.
View event binding will be implemented in the Presenter from a view interface.
The view is the initiator for user inputs and then delegates the events to the Presenter and the presenter handles event bindings and gets data from models.
Pros:
    The view is having only  UI not any logics
    High level of testability
MVC stands for Model-View-Controller.
Controller is responsible for creating models and rendering views with binding models.
Controller is the initiator and it decides which view to render.
Cons:
  Sometimes too much workload for Controllers, if try to render multiple views in same controller.
The simplest answer is how the view interacts with the model.
In MVP the view is updated by the presenter, which acts as as intermediary between the view and the model.
The presenter takes the input from the view, which retrieves the data from the model and then performs any business logic required and then updates the view.
In MVC the model updates the view directly rather than going back through the controller.
Model-View-Controller
Views for handling graphical user interface objects and presentation
Model-View-Presenter
The model is the data that will be displayed in the view (user interface).
The view is an interface that displays data (the model) and routes user commands (events) to the Presenter to act upon that data.
The view usually has a reference to its Presenter.
The Presenter is the “middle-man” (played by the controller in MVC) and has references to both, view and model.
For instance: If you have a database storing User in a database table and your View wants to display a list of users, then the Presenter would have a reference to your database business logic (like a DAO) from where the Presenter will query a list of Users.
Controller are based on behaviors and can be shared across views
Can be responsible for determining which view to display (Front Controller Pattern)
View is more loosely coupled to the model.
The presenter is responsible for binding the model to the view.
Easier to unit test because interaction with the view is through an interface
Usually view to presenter map one to one.
Complex views may have multi presenters.
IMO, MVP is an improved version of MVC where you basically separate the concern of what you're gonna show (the data) from how you're gonna show (the view).
The presenter includes kinda the business logic of your UI, implicitly imposes what data should be presented and gives you a list of dumb view models.
And when the time comes to show the data, you simply plug your view (probably includes the same id's) into your adapter and set the relevant view fields using those view models with a minimum amount of code being introduced (just using setters).
Its main benefit is you can test your UI business logic against many/various views like showing items in a horizontal list or vertical list.
In that sense, MVP is kind of an MVC with a concept of views being pluggable to the controller over adapters.
View: Who’s that?
View: Ok, hold on a sec … .
( View calling the Presenter|Controller … ) [MVP|MVC]
View: Hey Presenter|Controller, a User has just clicked on the search button, what shall I do?
Presenter|Controller: Hey View, is there any search term on that page?
View: Yes,… here it is … “piano” [MVP|MVC]
Presenter|Controller: Thanks View,… meanwhile I’m looking up the search term on the Model, please show him/her a progress bar [MVP|MVC]
(Presenter|Controller thanks Model and gets back to the View) [MVP|MVC]
Presenter: Thanks for waiting View, I found a list of matching results for you and arranged them in a presentable format: ["Piano Teacher 2001","Piano 1993"].
Controller: Thanks for waiting View, I have asked Model about your search query.
View: Thank you very much Presenter [MVP]
View: Thank you "Controller" [MVC]
(Now the View is questioning itself: How should I present the results I get from the Model to the user?
In MVC, View has the UI part, which calls the controller which in turn calls the model & model in turn fires events back to view.
In MVP, View contains UI and calls the presenter for implementation part.
The presenter calls the view directly for updates to the UI part.
Model which contains business logic is called by the presenter and no interaction whatsoever with the view.
As explained in some graphics above, there's a direct relation/link between the Model and the View in MVC.
That action in the Model, will trigger a reaction in the View.
The View, is always updated when the Model's state changes.
MVC wasn't originally created for the Web, but for Desktop applications instead, where the Controller, Model and View would co-exist together.
Laravel) that still use the same naming conventions (model-view-controller), we tend to think that it must be MVC, but it's actually something else.
view()) for rendering.
In ADR, there's no connection between the Model/Domain and the View (Reponser's response).
[mvc (hyper-link)] [adr (hyper-link)] [model-view-controller (hyper-link)] [action-domain-responder (hyper-link)]
My view implements observer and overrides the update method.
So, my main thread create the view and another thread call the update method that update the ProgressDialop and....:
Only the original thread that created a view hierarchy can touch its
  views.
All I mean to say that when we created particular view we created it on UI Thread and later try to modifying in a Worker Thread.
But in that case, also after processing your work in doinBackground(), you need to return the finished view in onPostExecute().
The Android implementation allows only main UI thread to interact with views.
It says whichever thread created a view, only that can touch its views.
It is because the created view is inside that thread's space.
The view creation (GUI) happens in the UI (main) thread.
So it was not possible for me to use runOnUIThread(); I used view.post(); and it was solved.
You can use Handler to Delete View without disturbing the main UI Thread.
[https://developer.android.com/reference/android/view/View#post(java.lang.Runnable) (hyper-link)]
[https://developer.android.com/reference/android/view/View#postDelayed(java.lang.Runnable,%20long) (hyper-link)]
Or if you don't need to be so generalizable, and just need to set the text of a TextView object:
For example, to view the version of file <repository-root>/src/main.c from 4 commits ago, use:
Just implement [getItemViewType() (hyper-link)], and take care of the viewType parameter in onCreateViewHolder().
Following [Anton's solution (hyper-link)], I came up with this ViewHolder which holds/handles/delegates different type of layouts.
But I am not sure if the replacing new layout would work when the recycling view's ViewHolder is not the type of the data roll in.
So basically,
onCreateViewHolder(ViewGroup parent, int viewType) is only called when new view layout is needed;
getItemViewType(int position) will be called for the viewType;
onBindViewHolder(ViewHolder holder, int position) is always called when recycling the view (new data is brought in and try to display with that ViewHolder).
So when onBindViewHolder is called it needs to be put in the right view layout and update the ViewHolder.
ViewHolder has member mItemViewType to hold the view.
It looks like in onBindViewHolder(ViewHolder holder, int position) the ViewHolder passed in has been picked up (or created) by looked at getItemViewType(int position) to make sure it is a match, so it may not need to worry there that ViewHolder's type does not match the data[position]'s type.
It looks like The recycle ViewHolder is picked by type, so no warrior there.
[Building a RecyclerView LayoutManager – Part 1 (hyper-link)] answers this question.
It gets the recycle ViewHolder like:
Or create a new one if not find recycle ViewHolder of the right type.
If the layouts for view types are only a few and binding logics are simple, follow [Anton's solution (hyper-link)].
I believe the following solution will be useful for someone who need to handle complex view types.
The functions needed to define in this class are pretty much same as the adapter class when creating the single view type.
For each view type, create the class by extending this DataBinder.
getItemViewType 
Define the mapping logic between the adapter position and view type.
getDataBinder 
Return the DataBinder instance based on the view type
I left a more detailed solution and samples on GitHub, so please refer to [RecyclerView-MultipleViewTypeAdapter (hyper-link)] if you need.
I wanted to create a headerview in my recyclerview and then display a list of pictures below the header which the user can click on.
I have a better solution which allows to create multiple view types in a declarative and type safe way.
Simple view holders for all required view types
Note that a view type is represented by a hashCode of particular view holder class (KClass in Kotlin)
Only bindViewHolder needs to be overridden in concrete adapter item classes (type safe way).
The important part of this solution is a view holder factory which will provide fresh instances of a specific ViewHolder:
There are only three steps to create a new view type:
create a view holder class
register the view holder class in ViewHolderProvider
It goes even further - a view type which acts as a spinner component, with selectable adapter items.
Write a generic view holder:
then create your view holders and make them extend the GenericViewHolder.
then the RecyclerView.Adapter class will look like this one:
Since getItemViewType(int position) returns an integer value, you can return the layout resource ID you'd need to inflate.
That way you'd save some logic in onCreateViewHolder(ViewGroup parent, int viewType) method.
Just override the [getItemViewType() (hyper-link)] method in your adapter.
On the basis of data return different itemViewType values.
E.g., consider an object of type Person with a member isMale, if isMale is true, return 1 and isMale is false, return 2 in the [getItemViewType() (hyper-link)] method.
Now coming to the [createViewHolder (ViewGroup parent, int viewType) (hyper-link)], on the basis of different viewType yon can inflate the different layout file.
in [onBindViewHolder (VH holder,int position) (hyper-link)] check where holder is an instance of AdapterFemaleViewHolder or AdapterMaleViewHolder by instanceof and accordingly assign the values.
ViewHolder may be like this
You can use the library: [https://github.com/vivchar/RendererRecyclerViewAdapter (hyper-link)]
For each item, you should to implement a ViewRenderer, ViewHolder, SomeModel:
ViewHolder - it is a simple view holder of recycler view.
In your adapter getItemViewType Layout like this ....
For the reference link: [Android RecyclerView Example – Multiple ViewTypes (hyper-link)]
RecyclerView can have any number of viewholders you want, but for better readability let’s see how to create one with two ViewHolders.
Override public int getItemViewType(int position)
Return different ViewHolders based on the ViewType in onCreateViewHolder() method
Populate View based on the itemViewType in onBindViewHolder() method
In my opinion, the starting point to create this kind of recyclerView is the knowledge of this method.
Since this method is optional to override, it is not visible in RecylerView class by default which in turn makes many developers (including me) wonder where to begin.
Once you know that this method exists, creating such RecyclerView would be a cakewalk.
View types implementation becomes easier with Kotlin.
It encapsulates all the logic related to a particular view type in a separate object called "AdapterDelegate".
You can deal with multipleViewTypes RecyclerAdapter by making getItemViewType() return the expected viewType value for that position.
I prepared an MultipleViewTypeAdapter for constructing an MCQ list for examinations which may throw a question that may have two or more valid answers (checkbox options) and a single answer questions (radiobutton options).
For this I get the type of question from the API response and I used that for deciding which view I have to show for that question.
You can avoid multiple conditionals based viewHolder data fillings in onBindViewHolder() by assigning same ids for the similar views across viewHolders which differ in their positioning.
If you want to use it in conjunction with Android Data Binding look into the [https://github.com/evant/binding-collection-adapter (hyper-link)] - it is by far the best solution for the multiple view types RecyclerView I have even seen.
And the item view should look something like this:
After that inside recyclerview adapter TYPE_CALL and TYPE_EMAIL are two static values with 1 and 2 respectively in the adapter class.
Now define two static values ​​at the Recycler view Adapter class level, for example: private static int TYPE_CALL = 1; private static int TYPE_EMAIL = 2;
Now create the view holder with multiple views like this:
Now code as below in onCreateViewHolder and onBindViewHolder method in the recyclerview adapter:
I found a useful [Custom Adapter for multiple View Types in RecyclerView (hyper-link)].
The example in the blogpost is based on creating Sectioned RecyclerView:
[https://brona.blog/2020/06/sectioned-recyclerview-in-three-steps/ (hyper-link)]
Simpler than ever, forget about ViewTypes.
It is not recommended to use multiple viewtypes inside one adapter.
It will mess the code and break the single responsibility principle since now the adapter needs to handle logic to know which view to inflate.
Now imagine working in large teams where each team has to work in one of those viewtypes features.
It will be a mess to touch the same adapter by all the teams that work in the different viewtypes.
Code them one by one and then just merge them inside one view.
From recyclerview:1.2.0-alpha04 you now can use ConcatAdapter.
If you need a view with different viewTypes, you can just write the Adapters for each section and just use ConcatAdapter to merge all of them inside one recyclerview.
This image shows three different viewtypes that one recyclerview has, header, content and footer.
You only create one adapter for each section, and then just use ConcatAdapter to merge them inside one recyclerview:
When a new view type comes, you have to edit your adapter and you have to handle so many messy things.
You may check this two project, they can give the idea about how to handle different ViewTypes in Adapter:
I passed "fragmentType" and created two ViewHolders and on basis of this, I classified my Layouts accordingly in a single adapter that can have different Layouts and LayoutManagers
Here is a complete sample to show a RecyclerView with two types, the view type decided by the object.
[Android Kotlin Fundamentals: Headers in RecyclerView (hyper-link)]
You can only add to one or the other, but each time you add you fire a change event, which now has an inconsistent view of the world.
Likewise, for expressions that appear right in the views, those are executed by AngularJS so it does the $apply.
Misko already gave an excellent description of how the data bindings work, but I would like to add my view on the performance issue with the data binding.
That way if you modify the value of the object controller, this will be reflected automatically in the view.
An example where I passed the model is updated from server data is when you ask for a zip code and zip code based on written loads a list of colonies and cities associated with that view, and by default set the first value with the user.
In our case, ng-model is bind to our view, using the mustache notation {{}}.
Means you can access data View -> Controller & Controller -> View
ng-model binds our view and render it in expression {{ }}.
ng-model is the data which is shown to the user in the view and with which the user interacts.
Angular.js creates a watcher for every model we create in view.
There is no way to update model from view.
Data-binding in Angular apps is the automatic synchronisation of data between the model and view components.
The view is a projection of the model at all times.
If the model is changed, the view reflects the change and vice versa.
Whenever the user changes the data in the view , there occurs an update of that change in the scope model, and viceversa.
npm view <package> version - returns the latest available version on the package.
You can use npm view [module] version, npm info [module] version, npm show [module] version or npm v [module] version to check the version on an installed npm module.
We can  use npm view any-promise(your module name) -v
You can also view package.json to manually in a text editor, see what packages are dependencies.
This works for both git log and [gitk (hyper-link)] - the 2 most common ways of viewing history.
You can filter commits by author in the commit view by appending param ?author=github_handle.
If you'd be interested in a visual side-by-side view, the [diffuse (hyper-link)] visual diff tool can do that.
git gui and git-cola are graphical utilities that let you view and manipulate the index.
The top answers here correctly show how to view the cached/staged changes in the Index:
For those who prefer a visual representation of the staged file differences, there is a script available within git which launches a visual diff tool for each file viewed rather than showing them on the command line, called difftool:
Its default view lists both staged and unstaged changes.
If you need root view of your activity (so you can add your contents there) use
If you need to get view that you added to your activity using setContentView() method then as pottedmeat wrote you can use
But better just set id to this view in your xml layout and use this id instead.
This is what I use to get the root view as found in the XML file assigned with setContentView:
give the same view what we get from
The following code gives a view of the whole activity:
View v1 = getWindow().getDecorView().getRootView();
To get a certian view in the activity,for example an imageView inside the activity, simply add the id of that view you want to get:
if you are in a activity, assume there is only one root view,you can get it like this.
notice this will include the actionbar view, your view is below the actionbar view
Inside our activity we can get the root view with:
to get View of the current Activity
in any onClick we will be getting "View view", by using 'view' get the rootView.
View view = view.getRootView();
and to get View in fragment
View view = FragmentClass.getView();
anyview.getRootView(); will be the easiest way.
Then you can directly refer to rootView from the Activity, or activity.rootView outside of it:
If your activity's view is declared in xml (ex activity_root.xml), open the xml and assign an id to the root view:
Now in your class, import the view using:
You can now use root_activity as the view.
Then in the view
This is the complete implementation to properly output HTML markup in a view in the intended and safe way.
And in your view:
The main thrust of the Model/View/ViewModel architecture seems to be that on top of the data (”the Model”), there’s another layer of non-visual components (”the ViewModel”) that map the concepts of the data more closely to the concepts of the view of the data (”the View”).
It’s the ViewModel that the View binds to, not the Model directly.
[MVVM (hyper-link)] Model-View ViewModel is similar to MVC, Model-View Controller
The controller is replaced with a ViewModel.
The ViewModel sits below the UI layer.
The ViewModel exposes the data and command objects that the view needs.
You could think of this as a container object that view goes to get its data and actions from.
The ViewModel pulls its data from the model.
MVVM adds the view model into the mix.
The viewmodel is an "abstract" model for your user interface elements.
It must allow you to execute the commands, and actions in your view in a non-visual way (for example to test it).
If you have worked with MVC, you probably have sometime found useful to create model objects to reflect the state of your view, for example, to show and hide some edit dialog, etc.
In that case you are using a viewmodel.
For ASP.Net, MVVM is used to two-way bind data within views.
One assumption, that frequently came out of this pattern, was that the ViewModel simply replaced the controller in MVC (as if you could just substitute VM for C in the acronym and all would be forgiven)...
The problem is: that to be independently testable*, and especially reusable when needed, a view-model has no idea what view is displaying it, but more importantly no idea where its data is coming from.
*Note: in practice Controllers remove most of the logic, from the ViewModel, that requires unit testing.
Even in MVVM, controllers will typically contain all processing logic and decide what data to display in which views using which view models.
From what we have seen so far the main benefit of the ViewModel pattern to remove code from XAML code-behind to make XAML editing a more independent task.
Views display a certain shape of data.
ViewModels hold a certain shape of data and commands, they do not know where the data, or code, comes from or how it is displayed.
Controllers provide the command code to the ViewModel so that the ViewModel is actually reusable.
There are issues with combining MVCVM with the common navigation systems, as most navigation systems just use Views and VMs, but I will go into that in later articles.
This makes for much less memory-intensive apps than solutions where view-models have to be retained and it is ideal for certain types of mobile development (e.g.
This post was intended to cover the broader use of MVVM in Silverlight, WPF and ASP.Net and try to discourage people from replacing controllers with ViewModels.
While it is nice to separate the UI from business and interaction logic, the 'pure' MVVM pattern and most available examples work best on singular views.
Not sure about your designs, but most of my applications, however, contain pages and several (reusable) views and thus the ViewModels do need to interact to some degree.
[http://en.wikipedia.org/wiki/Model_View_ViewModel#References (hyper-link)]
For »code inbetween«, let's assume code mapping user clicks to actions, possibly affecting the database, definitely causing another view to be displayed.
The »view« is generated anew each time around.
That data, essentially a cache on the client, now gets called »ViewModel«.
MVC = model, controller, view = essentially one-way communication = poor interactivity
MVVM = model, controller, cache, view = two-way communication = rich interactivity
In the Model-View-ViewModel design pattern, an app is composed of
  three general components.
View: An app typically is composed of multiple pages of UI.
Each page shown to the user is a view in MVVM terminology.
The view is
  the XAML code used to define and style what the user sees.
The data
  from the model is displayed to the user, and it’s the job of the
  ViewModel to feed the UI this data based on the current state of the
  app.
For example, in a picture sharing app, the views would be the UI
  that show the user the list of albums on the device, the pictures in
  an album, and perhaps another that shows the user a particular
  picture.
ViewModel: The ViewModel ties the data model, or simply the model, to the UI, or views, of the app.
It contains the logic with
  which to manage the data from the model and exposes the data as a set
  of properties to which the XAML UI, or views, can bind.
For example,
  in a picture sharing app, the ViewModel would expose a list of albums,
  and for each album expose a list of pictures.
It simply
  knows of a set of pictures as exposed by the ViewModel and shows them
  to the user.
It might have a sense to use a ViewModel as a "Model" of MVC and your real Model basically will be a part of this VM.
The controller is responsible for newing up the ViewModel and injecting it into the View.
The ViewModel is the container for DataContext and view state such as the last selected item etc.
The ViewModel gets the data and does the business rules and validation
The controller on post back will cal the ViewModel Post method and wait for results.
The controller will inject the newly updated Viewmodel to the View.
The View uses only strong type binding.
The view merely renders the data, and posts events back to the controller.
Assume a ViewModel like this:
This is MVC instantiating the ViewModel for you based on the query strings!
The advantage of this pattern is the ViewModel does all the "clutter" work interfacing to the Model/Buisness logic, the controller is merely a router of sorts.
From a practical point of view, MVC (Model-View-Controller) is a pattern.
At least as I used MVVM, the View Models interacted with models that depended upon business objects, which were in turn "hand-made" and after a lot of effort, one was lucky to get models as good as what EF gives one "out-of-the-box".
From a practical programming point of view, MVC seems a good choice because it gives one lots of utility out-of-box, but there is still a potential for bells-and-whistles to be added.
Complementary to many of the responses given, I wanted to add some additional perspective from the Modern client-side web - or Rich Web Application point of view.
Built by Steve Sanderson, [Knockout (hyper-link)] provides support for the MVVM pattern which mimics one of the most important behaviors in the pattern: data-binding through the View Model.
Interestingly, it is touted as Model-View-Whatever (MVW).
Additionally, with the rise of Progressive web frameworks such as Angular 2, we're seeing a change in terminology and perhaps a new architectural pattern where Components comprise of a View or Template and interact with a Service - all of which can be contained in a Module; and a series of Modules makes up the application.
MVC (Model View Controller)
Does not call or use Controller and View.
Some of this data, in some form, may be displayed in the view.
Controller: Acts as the connection between view and model.
View calls Controller and Controller calls the model.
It basically informs the model and/or the view to change as appropriate.
View: Deals with UI part.
MVVM (Model View View Model)
ViewModel:
It is the representation of the state of the view.
It holds the data that’s displayed in the view.
Responds to view events, aka presentation logic.
Never directly asks the view to display anything.
However; in the web world MVC easily gets divided into view creation logic and view dynamic logic.
You see this a lot with ASP.NET MVC combined with AngularJS whereas the server will create a View and pass in a Model and send it to the client.
The client will then interact with the View in which case AngularJS steps in to as a local controller.
In XAML, where MVVM thrives, this is all easily done with the built in databinding framework BUT as mentioned this will work on any system in any View with any programming language.
The ViewModel fires (usually a property changed event) and the View reacts to it based on whatever triggers you create.
This can get technical but the bottom line is the View is stateless and without logic.
Furthermore, ViewModels are stateless with very little logic, and Models are the State with essentially Zero logic as they should only maintain state.
I describe this as application state (Model), state translator (ViewModel), and then the visual state / interaction (View).
Based on the Model the controller will modify the View.
Views are usually tied to Controllers with Interfaces so that the Controller can work with a variety of Views.
In ASP.NET the logic for MVC is slightly backwards on the server as the Controller manages the Models and passes the Models to a selected View.
The View is then filled with data based on the model and has it's own logic (usually another MVC set such as done with AngularJS).
DO NOT write View logic in the code behind of the View (or in the View via JS for web) to accommodate Controller or Model data.
Let the Controller change the View.
The ONLY logic that should live in a View is whatever it takes to create and run via the Interface it's using.
Whether desktop or web page (on client) the Controller should handle the submit process whenever the View fires the Submit action.
If a Model changes state the ViewModel listens and translates that state and that's it!!!
The View is then listening to the ViewModel for state change and it also updates based on the translation from the ViewModel.
Some people call it pure MVVM but there's really only one and I don't care how you argue it and it's always Pure MVVM where the View contains absolutely no logic.
The Controller will know when you click the Menu button and then tell the View to slide in the Menu based on another Interface method such as SlideMenuIn.
The Controller should be in charge of the View with the View doing nothing unless the Controller says so.
So it listens to the ViewModel and when the ViewModel says, IsMenuActive = true (or however) the animation for that takes place.
IsMenuActive is probably BAD MVVM or ViewModel design.
When designing a ViewModel you should never assume a View will have any features at all and just pass translated model state.
That way if you decide to change your View to remove the Menu and just show the data / options another way, the ViewModel doesn't care.
So, one way to do this is to give the Menu a list of options (probably an array of inner ViewModels).
You simply have data for the menu or not in the ViewModel.
DO NOT decide to show  / hide that data in the ViewModel.. simply translate the state of the Model.
This way the View is completely reactive and generic and can be used in many different situations.
If you do MVC, which is great, then make sure you Controller is manageable and in full control of your View.
If you have a large View consider adding controls to the View that have different Controllers.
The ideal dependency setup for MVC in is View ← Controller → Model  or with ASP.NET (don't get me started) Model ← View ↔ Controller → Model (where Model can be the same or a totally different Model from Controller to View) ...of course the only need to know of Controller in View at this point is mostly for endpoint reference to know where back to pass a Model.
Let your View decide how it's going to look based on values.
Play with the View with Mock data.
If you end up having a View that is showing you a Menu (as per the example) even though you didn't want it at the time then GOOD.
You're view is working as it should and reacting based on the values as it should.
Just add a few more requirements to your trigger to make sure this doesn't happen when the ViewModel is in a particular translated state or command the ViewModel to empty this state.
In your ViewModel DO NOT remove this with internal logic either as if you're deciding from there whether or not the View should see it.
Remember you can't assume there is a menu or not in the ViewModel.
When the ViewModel realizes this it will translate what's dirty, and the View will then realize this and show some information via another trigger.
All data in the View can be binded to the ViewModel so everything can be dynamic only the Model and ViewModel has absolutely no idea about how the View will react to the binding.
As a matter of fact the Model has no idea of a ViewModel either.
When setting up dependencies they should point like so and only like so View → ViewModel → Model  (and a side note here... and this will probably get argued as well but I don't care... DO NOT PASS THE MODEL to the VIEW unless that MODEL is immutable; otherwise wrap it with a proper ViewModel.
The View should not see a model period.
In MVC, for each view in your app, you have a model and a controller, so I would call it view, view model, view controller.
The pattern does not tell you how one view can communicate with another.
There are even implementations in which the view models communicate with each other, which is a break of the MVC pattern because the view model should only be accessed by the view controller.
In MVVM, you also have a view model for each component.
The pattern does not specify how the heck the view should influence the view model, so usually most frameworks just include controller's functionality in the view model.
However, MVVM does tell you that your view model's data should come from the model, which is the entire model that's not aware or custom to a specific view.
Flux pattern tells how different views in the app should communicate.
Each view listens to a store and fires actions using the dispatcher.
it's not custom to any specific view.
When an action occurs, the view model calls the dispatcher, and finally it's getting updated according to the changes in the store, which is the model.
You can't say that each component implements MVC because in MVC only the controller can update the view model.
So MVVM can work with Flux together (MVVM handles the communication between the view and the view model, and Flux handles the communication between different views), whereas MVC can't work with Flux without breaking a key principle.
View: Who’s that?
View: Ok, hold on a sec … .
( View calling the ViewModel|Presenter|Controller … ) [MVVM|MVP|MVC]
View: Hey ViewModel|Presenter|Controller, a User has just clicked on the search button, what shall I do?
ViewModel|Presenter|Controller: Hey View, is there any search term on that page?
View: Yes,… here it is … “piano” [MVVM|MVP|MVC]
Presenter|Controller: Thanks View,… meanwhile I’m looking up the search term on the Model, please show him/her a progress bar [MVP|MVC]
ViewModel: Thanks, I’ll be looking up the search term on the Model but will not update you directly.
(While observing on any trigger in searchResultsListObservable, the View thinks it should show some progress bar to the user, since ViewModel would not talk to it on that)
ViewModel|Presenter|Controller: Hey Model, Do you have any match for this search term?
Model: Hey ViewModel|Presenter|Controller, let me check … [MVVM|MVP|MVC]
Model: I found a list for you, ViewModel|Presenter, here it is in JSON “[{“name”:”Piano Teacher”,”year”:2001},{“name”:”Piano”,”year”:1993}]” [MVVM|MVP]
(Presenter|Controller thanks Model and gets back to the View) [MVP|MVC]
Presenter: Thanks for waiting View, I found a list of matching results for you and arranged them in a presentable format: [“Piano Teacher 2001″,”Piano 1993”].
Controller: Thanks for waiting View, I have asked Model about your search query.
ViewModel: Any observer on searchResultsListObservable be notified that there is this new list in presentable format: [“Piano Teacher 2001″,”Piano 1993”].
View: Thank you very much Presenter [MVP]
View: Thank you “Controller” [MVC] (Now the View is questioning itself: How should I present the results I get from the Model to the user?
View: Oh, there is a new trigger in searchResultsListObservable … , good, there is a presentable list, now I only have to show it in a list.
The Controller is not replaced by a ViewModel in MVVM, because the ViewModel has a totally different functionality then a Controller.
You still need a Controller, because without a Controller your Model, ViewModel and View will not do much...
As you can see the ViewModel is just an addition to the MVC pattern.
It moves conversion-logic (for example convert object to a string) from the Controller to the ViewModel.
In very short - in MVC Controler is aware of (controls) view, while in MVVM, ViewModel is unaware of who consumes it.
ViewModel exposes its observable properties and actions to whoever might be interested in using it.
That fact makes testing easier since there is no reference to UI within ViewModel.
View ➡ ViewModel ➡ Model
The view has a reference to the ViewModel but not vice versa.
The ViewModel has a reference to the Model but not vice versa.
The View has no reference to the Model and vice versa.
If you are using a controller, it can have a reference to Views and ViewModels, though a Controller is not always necessary as demonstrated in [SwiftUI (hyper-link)].
Data Binding: we create listeners for ViewModel Properties so that data can flow from the view to the model through the view model.
While the references go one way: View ➡ ViewModel ➡ Model, data needs to flow: View ↔ ViewModel ↔ Model.
Its clear how the view gets data from the model, by reading its own properties.
Data Binding is how to detect events within the view and feed them back to the model.
Business logic is held in the controller for MVC and the ViewModels for MVVM.
Events are passed directly from the View to the controller in MVC while events are passed from the View to the ViewModel to the Controller (if there is one) for MVVM.
Both MVVM and MVC do not allow the View to send messages directly to the Model/s.
Both have views.
Because the ViewModels hold business logic, they are smaller concrete objects making them easy to unit tests.
On the other hand, in MVC, the business logic is in the ViewController.
How can you trust that a unit test of a view controller is comprehensively safe without testing all the methods and listeners simultaneously?
In MVVM, because business logic is siphoned out of the Controller into atomic ViewModel units, the size of the ViewController shrinks and this makes the ViewController code more legible.
Providing business logic within the controller reduces the need for branching and therefore statements are more likely to run on the cache which is more performant over encapsulating business logic into ViewModels.
Providing business logic in the ViewController is easier to think about for new developers.
Model–View–Controller (usually known as MVC) is a software design pattern commonly used for developing user interfaces that divide the related program logic into three interconnected elements.
View
Multiple views of the same information are possible, such as a bar chart for management and a tabular view for accountants.
Accepts input and converts it to commands for the model or view.
In addition to dividing the application into these components, the model–view–controller design defines the interactions between them.
The view means a presentation of the model in a particular format.
Model–View–ViewModel (MVVM) is a software architectural pattern.
The view model of MVVM is a value converter, meaning the view model is responsible for exposing (converting) the data objects from the model in such a way that objects are easily managed and presented.
In this respect, the view model is more model than a view and handles most if not all of the view's display logic.
The view model may implement a mediator pattern, organizing access to the back-end logic around the set of use cases supported by the view.
MVVM abstracts a view's state and behavior in the same way, but a Presentation Model abstracts a view (creates a view model) in a manner not dependent on a specific user-interface platform.
Model–View–ViewModel is also referred to as model–view–binder, especially in implementations not involving the .NET platform.
ZK (a web application framework written in Java) and KnockoutJS (a JavaScript library) use model–view–binder.
The View Identity - Class Identity was not set.
If you don't see the right-hand sidebar, click on the third icon above "view" in your toolbar.
Under "Custom Class" at the top, make sure Class is the name of the ViewController that should correspond to this view.
You should see "outlets" with "view" under it.
Drag the circle next to it over to the "view" icon on the left bar (bottom one, looks like a white square with a thick gray outline
Just spent more than hour trying to find out why my view property is not set in my view controller upon initiating it from nib.
Remember to call "[super initWithNibName...]" inside your view controller's initWithNibName.
My issue with this was caused by having a duplicate nib in the class folder that did not have the view set.
I also had the same problem and my issue was that i added an other Localisation (English) to the ViewControllers nib so my App with the Localisation German could´t find the nib with the Localisation English!!
I am using table view cells from a nib file to define entry forms that sit on tableViews.
As I don't have a view, doesn't make sense to hook to one.
The problem in this case was the class of the File Owner, rather than the class of the View.
To set this, I had to click the "backwards play" icon in the lower left corner of the Interface Builder window, and options then appeared that isolated the characteristics of the File Owner, the First Responder, and the View.
One was "ReallyLargeNameView" and another was "ReallyLargeNameViewController"
So I delete the similar named class (which is a view).
Soon, new error "outlet inside not hooked up" literally was "webView not key value" blah... basically saying "Visual Studio's better".
I can generally fix it by remaking the connection between File's Owner and the view.
Control-drag from the File's owner to your View (in IB) and select view from the pop-up menu.
In my case I had an IBOutlet setup with the name "View" in my custom UITableViewController class.
I knew "view" was special because that is a member of the base class, but I didn't think View (different case) would also be a problem.
So I just renamed it to DefaultView and all is good now.
If none of the above methods works and still you can't see the view outlet then give new referencing outlet Connection to the File's Owner then you can able to see the view outlet.
Click on the view Outlet to make a connection between the View Outlet and File's owner.
In my case, the view was not viewed in xib.
in xib the View was size = none (4th tab right hand).
view was appealed and I set the proper link to View.
I had started out with a couple files named MySettingsView.h and .m but deleted them in favor of MySettingsViewController.h, but despite trying most of the hints mentioned here, it still kept erroring with,
2013-07-05 11:48:17.205 MyApp[39024:c07] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason:
  '-[UIViewController _loadViewFromNibNamed:bundle:] loaded the
  "MySettingsView" nib but the view outlet was not set.'
It was evidently still "confused", trying to load MySettingsView.xib instead of MySettingsView Controller.xib.
So I worked around the problem by hardcoding the NIB/XIB name in MySettingsViewController.m:
Are you sure you have a UIView (or subclass) assigned to the "view" property of yourViewController?
Right click on "File Owner" in the left pane of the xib for yourViewController and verify that the "view" outlet is set.
If not, set it to a view!
For me all the things stated here [https://stackoverflow.com/a/6395750/939501 (hyper-link)] were true but still it was throwing error, reason was I created a View class with name ABCView and then deleted it later I added a view controller as ABCViewController so somehow it was referring to old ABCView in new view controller, I had to delete the ABCViewController and add a new one with different name that solved my issue.
I ran into something very similar tonight, with a Swift UIViewController subclass.
Drag view outlet to view component
Finally the View Controller is instantiated with the rolling code:
I have a ViewController class ( .mm/h ) associated with the Nib file,
UIView from this ViewController has to be loaded on the another view as a subview,
Here loadView was missing,,, adding this line resolved my problem.
In my case , the designated initializer - (instancetype)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil in ***ViewController class was implemented so even if when I call other initializer to initialize the object ,the designated initializer will be called .
I had face the same problem while accidentally deleted xib reference and added it again.I just fixed by making connection between Files owner and the view.Also make sure that your FilesOwner's custom class is your expected viewController.
I had the same problem, I figured out and it is because of i had ticked "Static cells" in the properties of Table View under Content option.
To anyone that is using an xib method to create a UIView and having this problem, you will notice that you won't have the "view" outlet under the connections inspector menu.
But if you set the File's Owners custom class to a UIViewController and then you will see the "view" outlet, which you can just CMND connect an outlet to the CustomView.
Set the file owner to be the UIView subclass.
Drag an outlet from the View to the UIView subclass, name it "contentView"
Add this custom initializer so when the xib loads it attaches the contentView
In this case, you need to use NamespacedSomeViewController in the IB.
Open your storyboard file where your viewController exists, or XIB related file with textEdit.app and check if the storyboard or XIB name is the same of your viewController, then change it, save and reload/restart Xcode.
I used custom .xib for my custom view.
View shouldn't have a class
Outlets are connected to File's Owner and not to the View.
If I simply created a new xib file, added a UIViewController to it in Interface Builder, and set that UIViewController's custom class to my view controller, that resulted in the "view outlet was not set" crash.
The other solutions here say to control-drag the view outlet to the View, but for me the view outlet was greyed out and I couldn't control-drag it.
I figured out that my mistake was in adding a UIViewController in Interface Builder.
Instead, I had to add a UIView, and set the Custom Class of the File's Owner to my view controller.
Then I could control-drag the view outlet of the File's Owner to my new view UIView and everything worked as it should.
In your UITableViewCell subclass, add constraints so that the subviews of the cell have their edges pinned to the edges of the cell's contentView (most importantly to the top AND bottom edges).
NOTE: don't pin subviews to the cell itself; only to the cell's contentView!
Let the intrinsic content size of these subviews drive the height of the table view cell's content view by making sure the content compression resistance and content hugging constraints in the vertical dimension for each subview are not being overridden by higher-priority constraints you have added.
Remember, the idea is to have the cell's subviews connected vertically to the cell's content view so that they can "exert pressure" and make the content view expand to fit them.
Using an example cell with a few subviews, here is a visual illustration of what some (not all!)
If you're adding constraints in code, you should do this once from within the updateConstraints method of your UITableViewCell subclass.
(A good hint that you need to use a new reuse identifier is when your cell variant has a different number of subviews, or the subviews are arranged in a distinct fashion.)
Don't confuse fundamentally different layouts (different constraints) with different calculated view frames (solved from identical constraints) due to different sizes of content.
To enable self-sizing table view cells, you must set the table view’s
rowHeight property to UITableViewAutomaticDimension.
Apple: [Working with Self-Sizing Table View Cells (hyper-link)]
In order to allow the self-sizing cell mechanism to work, you must first set the rowHeight property on the table view to the constant UITableView.automaticDimension.
Then, you simply need to enable row height estimation by setting the table view's estimatedRowHeight property to a nonzero value, for example:
What this does is provide the table view with a temporary estimate/placeholder for the row heights of cells that are not yet onscreen.
To determine the actual height for each row, the table view automatically asks each cell what height its contentView needs to be based on the known fixed width of the content view (which is based on the table view's width, minus any additional things like a section index or accessory view) and the auto layout constraints you have added to the cell's content view and subviews.
Once this actual cell height has been determined, the old estimated height for the row is updated with the new actual height (and any adjustments to the table view's contentSize/contentOffset are made as needed for you).
Generally speaking, the estimate you provide doesn't have to be very accurate -- it is only used to correctly size the scroll indicator in the table view, and the table view does a good job of adjusting the scroll indicator for incorrect estimates as you scroll cells onscreen.
You should set the estimatedRowHeight property on the table view (in viewDidLoad or similar) to a constant value that is the "average" row height.
differ by an order of magnitude) and you notice the scroll indicator "jumping" as you scroll should you bother implementing tableView:estimatedHeightForRowAtIndexPath: to do the minimal calculation required to return a more accurate estimate for each row.
First, instantiate an offscreen instance of a table view cell, one instance for each reuse identifier, that is used strictly for height calculations.
(Offscreen meaning the cell reference is stored in a property/ivar on the view controller and never returned from tableView:cellForRowAtIndexPath: for the table view to actually render onscreen.)
text, images, etc) that it would hold if it were to be displayed in the table view.
Then, force the cell to immediately layout its subviews, and then use the systemLayoutSizeFittingSize: method on the UITableViewCell's contentView to find out what the required height of the cell is.
The height can then be returned from the tableView:heightForRowAtIndexPath: delegate method.
If your table view has more than a couple dozen rows in it, you will find that doing the Auto Layout constraint solving can quickly bog down the main thread when first loading the table view, as tableView:heightForRowAtIndexPath: is called on each and every row upon first load (in order to calculate the size of the scroll indicator).
As of iOS 7, you can (and absolutely should) use the estimatedRowHeight property on the table view.
What this does is provide the table view with a temporary estimate/placeholder for the row heights of cells that are not yet onscreen.
Then, when these cells are about to scroll on screen, the actual row height will be calculated (by calling tableView:heightForRowAtIndexPath:), and the estimated height updated with the actual one.
Generally speaking, the estimate you provide doesn't have to be very accurate -- it is only used to correctly size the scroll indicator in the table view, and the table view does a good job of adjusting the scroll indicator for incorrect estimates as you scroll cells onscreen.
You should set the estimatedRowHeight property on the table view (in viewDidLoad or similar) to a constant value that is the "average" row height.
differ by an order of magnitude) and you notice the scroll indicator "jumping" as you scroll should you bother implementing tableView:estimatedHeightForRowAtIndexPath: to do the minimal calculation required to return a more accurate estimate for each row.
If you've done all the above and are still finding that performance is unacceptably slow when doing the constraint solving in tableView:heightForRowAtIndexPath:, you'll unfortunately need to implement some caching for cell heights.
These projects are fully working examples of table views with variable row heights due to table view cells containing dynamic content in UILabels.
If you have a custom cell and you want one or more UILabel with dynamic heights then the systemLayoutSizeFittingSize method combined with AutoLayout enabled returns a CGSizeZero unless you move all your cell constraints from the cell to its contentView (as suggested by @TomSwift here [How to resize superview to fit all subviews with autolayout?
To do so you need to insert the following code in your custom UITableViewCell implementation (thanks to @Adrian).
However, if you have any code in the layoutSubviews method of your custom cell class, for instance setting the preferredMaxLayoutWidth, then it won't be run with this code:
Then I realized it's because those are only triggering layoutSubviews on the contentView, not the cell itself.
As @smileyborg mentions, "your table view cell hasn't yet had its width fixed to the table view's width".
This is true, and trouble if you are doing your work in your subclass and not in the view controller.
I wrote a quick blog post about using Autolayout with UITableViews [Leveraging Autolayout For Dynamic Cell Heights (hyper-link)] as well as an open source component to help make this more abstract and easier to implement.
I decided to wrap this clever solution by @smileyborg into a UICollectionViewCell+AutoLayoutDynamicHeightCalculation category.
in IB when you instantiate the cell with [[YourTableViewCellClass alloc] init] it will not instantiate all the other elements within that cell unless you've written code to do that.
To have the storyboard instantiate all the additional elements obtain your cell with [tableView dequeueReusableCellWithIdentifier:@"DoseNeeded"] (Not [tableView dequeueReusableCellWithIdentifier:forIndexPath:] as this'll cause interesting problems.)
[Dynamic Table View Cell Height and Auto Layout (hyper-link)]
You need to tell the TableView the estimatedHeight before it loads the view.
Another "solution": skip all this frustration and use a UIScrollView instead to get a result that looks and feels identical to UITableView.
And that UITableView is complete overkill generally unless you're using some of the advanced row editing features and/or really need to support 1000+ "rows" (in our app, it's realistically never more than 20 rows).
The added bonus is that the code gets insanely simple versus all the delegate crap and back and forth that comes with UITableView.
It's just one single loop of code in viewOnLoad that looks elegant and is easy to manage.
Using either Storyboard or a nib file, create a ViewController and associated root view.
Drag over a UIScrollView onto your root view.
Add constraints top, bottom, left, and right constraints to the top-level view so the UIScrollView fills the entire root view.
Add a UIView inside the UIScrollView and call it "container".
Add top, bottom, left and right constraints to the UIScrollView (its parent).
KEY TRICK: Also add an "Equal widths" constraint to link the UIScrollView and UIView.
NOTE: You will get an error "scroll view has ambiguous scrollable content height" and that your container UIView should have a height of 0 pixels.
Use UIView not UITableViewCell.
In your root ViewController, you essentially add all the "rows" to the container UIView and programmatically add constraints linking their left and right edges to the container view, their top edges to either the container view top (for the first item) or the previous cell.
And here's the code for UITools.addViewToTop:
The only "gotcha" I've found with this approach so far is that UITableView has a nice feature of "floating" section headers at the top of the view as you scroll.
If you want dividers between your cells, just add a 1 pixel high UIView at the bottom of your custom "cell" that looks like a divider.
Be sure to turn on "bounces" and "bounce vertically" for the refresh control to work and so it seems more like a tableview.
TableView shows some empty rows and dividers under your content, if it doesn't fill the full screen where as this solution doesn't.
Here's hoping some other programmer reads my post BEFORE wasting 20+ hours trying to figure it out with Table View in their own app.
Don't forget label.preferredMaxLayoutWidth = CGRectGetWidth(tableView.bounds)
I had to use dynamic views (setup views and constraints by code) and when I wanted to set preferredMaxLayoutWidth label's width was 0.
The example below is my test project while learning to make a UITableView with variable cell heights.
I based it on [this basic UITableView example for Swift (hyper-link)].
It can be just a Single View Application.
This class will hold the outlets for the views that you add to your cell in the storyboard.
Open ViewController.swift and make sure you have the following content:
Add a Table View to your view controller and use auto layout to pin it to the four sides.
Then drag a Table View Cell onto the Table View.
Use auto layout to pin the label to the four edges of the content view of the Table View Cell.
Select the Table View Cell and set the custom class to be MyCustomCell (the name of the class in the Swift file we added).
Control drag from the Table View in the storyboard to the tableView variable in the ViewController code.
For example, if you had added a Center Horizontally constraint to the label in the project above rather than pin the leading and trailing edges, then you would need to add this line to the tableView:cellForRowAtIndexPath method:
[code snippet]
[Table View Cells with Varying Row Heights (hyper-link)]
[UITableView example for Swift (hyper-link)]
No use of systemLayoutSizeFittingSize (should have use but not working for me, i dont know what it is doing internally), but instead my method -(float)getViewHeight working and i know what it's doing internally.
[Is it possible to have differing heights in a UITableView Cell when I use several different ways of displaying the cell?
To prevent the annoying IB warnings/errors, you can select the views involved and in Size Inspector for the property Ambiguity choose Verify Position Only
Let's say you have a cell with a subview, and you want the cell's height to be high enough to encompass the subview + padding.
1) Set the subview's bottom constraint equal to the cell.contentView minus the padding you want.
Do not set constraints on the cell or cell.contentView itself.
2) Set either the tableView's rowHeight property or tableView:heightForRowAtIndexPath: to UITableViewAutomaticDimension.
3) Set either the tableView's estimatedRowHeight property or tableView:estimatedHeightForRowAtIndexPath: to a best guess of the height.
So in viewDidLoad method:
NUMBER 1: set this two properties of tableview on viewDidLoad, the first one is telling to the tableview that should expect dynamic sizes on their cells, the second one is just to let the app calculate the size of the scrollbar indicator, so it helps for performance.
NUMBER 2: This is important you need to add the subviews to the contentView of the cell not to the view, and also use its layoutsmarginguide to anchor the subviews to the top and bottom, this is a working example of how to do it.
Create a method that will add the subviews and perform the layout, call it in the init method.
Follow this 3 rules for dynamic cells in tableviews.
here is a working implementation 
[https://github.com/jamesrochabrun/MinimalViewController (hyper-link)]
Assign and implement tableview dataSource and delegate
Assign UITableViewAutomaticDimension to rowHeight & estimatedRowHeight
heightForRowAt and return a value UITableViewAutomaticDimension to it)
For label instance in UITableviewCell
Set all constraints (top, bottom, right left) with respect to its superview/ cell container.
Better to force the layout engine to calculate the height in one direction, by using the helper category on UIView below:
Where w: is the width of the tableview
Simply add these two functions in your viewcontroller it will solve your problem.
So back to your tableViewCell example:
An easy way is to define the counting method in the table view cell code for controller to call at the table cell height delegate method.
The code for generating cell object could be defined in another method for different table view cell delegate method to call.
UITableView.automaticDimension can be set via Interface Builder:
Table View Cell > Row Height > Automatic
In ASP.NET MVC 3 Preview1 you can import a namespace on all your razor views with this code in Global.asax.cs
In the "web.config" file in "Views" directory of your project (notice it is not the main web.config in project's root), find this section:
that will add the namespace to all of .cshtml (and/or .vbhtml) files;
also you can change views inheritance from here, like:
If you're working within an area, you must add the namespace within the Web.config under /Areas/<AreaName>/Views/ rather than
/Views/
One issue that you must know is that when you import a namespace via web.config in Views folder, that namespace is imported JUST for views in that folder.
Means if you want to import a namespace in an area views, you must also import that namespace, in that area's web.config file, located in area's Views folder;
I think in order import namespace in razor view, you just need to add below way:
In first line/s of view add "using your.domainName;" (if it is
required in specific view only)
if required in all subsequent views
then add "using your.domainName;" in _ViewStart.cshtml.
You can find
more about this in: [Where and how is the _ViewStart.cshtml layout file linked?
Or add Assembly reference in View web.config as described by others explained in: [How do you implement a @using across all Views in Asp.Net MVC 3?
Now when you type "git diff", it will invoke your external diff viewer.
The usual use case for this script is when you have either staged or unstaged changes and you'd like to see the changes in a side-by-side diff viewer (e.g.
Specify a custom command for viewing diffs.
You run xd when you want to run git diff or svn diff and it will show you a list of files, a preview window and you can launch any diff tool you like, including tkdiff, xxdiff, gvimdiff, Emacs (ediff), [XEmacs (hyper-link)] (ediff), [Meld (hyper-link)], [Diffuse (hyper-link)], [Kompare (hyper-link)] and [KDiff3 (hyper-link)].
If you happen to already have a diff tool associated with filetypes (say, because you installed TortoiseSVN which comes with a diff viewer) you could just pipe the regular git diff output to a "temp" file, then just open that file directly without needing to know anything about the viewer:
After looking at some other external diff tools, I found that the diff view in IntelliJ IDEA (and Android Studio) is the best one for me.
The HTML meta tag will only be used when the page is viewed from a local disk file system via a file:// URL.
Not sure if my answer sounds simple and stupid, and perhaps it has already been known to you since long time ago, but since preventing someone from using browser back button to view your historical pages is one of your goals, you can use:
window.location.replace("https://www.example.com/page-not-to-be-viewed-in-browser-history-back-button.html");
Note that you need to specify template_name= if using a QuerySetChain with generic views, even if the chained querysets all use the same model.
To view the SQL that will be generated, simply call ToTraceString().
For those using Entity Framework 6 and up, if you want to view the output SQL in Visual Studio (like I did) you have to use the new logging/interception functionality.
To view the generated queries from EF 6.x, use the DBContext.Database.Log property
As of Flask 1.1.0 a view can directly return a Python dict and Flask will call [jsonify (hyper-link)] automatically.
I think it is more readable when a view has multiple returns.
The answer is the same when using Flask's class-based views.
As of version 1.1.0 Flask, [if a view returns a dict it will be turned into a JSON response (hyper-link)].
@@ is the escape character for @ in Razor views as stated above.
One of the main uses for this is to identify email addresses within a Razor view - it should not be necessary to escape the @ character in an email address.
This way, when you call notifyDataSetChanged(), the view pager will remove all views and reload them all.
The second option, [suggested by Alvaro Luis Bustamante (previously alvarolb) (hyper-link)], is to setTag() method in instantiateItem() when instantiating a new view.
Then instead of using notifyDataSetChanged(), you can use findViewWithTag() to find the view you want to update.
For doing the exact same thing, I simply took the source code of the ViewPager and PagerAdapter from the compatibility library and compiled it within my code (You need to sort out all the errors and imports yourself, but it definitely can be done).
Then, in the CustomViewPager, create a method called updateViewAt(int position).
The view itself can be gotten from ArrayList mItems defined in the ViewPager class (you need to set an Id for the views at instantiate item and compare this id with position in the updateViewAt() method).
Then you can update the view as necessary.
I had a similar problem in which I had four pages and one of the pages updated views on the other three.
I was able to updated the widgets(SeekBars, TextViews, etc.)
You can see a slight flicker in the ListView on the main updating page, but nothing noticeable.
Looking at the solutions explained here, there is a misunderstanding and therefore a poor usage of instantiated views from my point of view.
The last few days I have been working with PagerAdapter and ViewPager, and I found the following:
The notifyDataSetChanged() method on the PagerAdapter will only notify the ViewPager that the underlying pages have changed.
For example, if you have created/deleted pages dynamically (adding or removing items from your list) the ViewPager should take care of that.
In this case I think that the ViewPager determines if a new view should be deleted or instantiated using the getItemPosition() and getCount() methods.
I think that ViewPager, after a notifyDataSetChanged() call takes it's child views and checks their position with the getItemPosition().
If for a child view this method returns POSITION_NONE, the ViewPager understands that the view has been deleted, calling the destroyItem(), and removing this view.
In this way, overriding getItemPosition() to always return POSITION_NONE is completely wrong if you only want to update the content of the pages, because the previously created views will be destroyed and new ones will be created every time you call notifyDatasetChanged().
It may seem to be not so wrong just for a few TextViews, but when you have complex views, like ListViews populated from a database, this can be a real problem and a waste of resources.
So there are several approaches to efficiently change the content of a view without having to remove and instantiate the view again.
My approach is to use the setTag() method for any instantiated view in the instantiateItem() method.
So when you want to change the data or invalidate the view that you need, you can call the findViewWithTag() method on the ViewPager to retrieve the previously instantiated view and  modify/use it as you want without having to delete/create a new view each time you want to update some value.
Imagine for example that you have 100 pages with 100 TextViews and you only want to update one value periodically.
With the approaches explained before, this means you are removing and instantiating 100 TextViews on each update.
Essentially, instantiateItem only gets called when the view is instantiated and never again unless the view is destroyed (this is what happens when you override the getItemPosition function to return POSITION_NONE).
Instead, what you want to do is save the created views and either update them in the adapter, generate a get function so someone else can update it, or a set function which updates the adapter (my favorite).
So, in your MyViewPagerAdapter add a variable like:
so, this way, you can create a function that will update your view:
Trigger mTabsAdapter.onTabChanged(mTabHost.getCurrentTabTag()); before updating the view.
Building upon his answer, an easy way to implement this is to simply store out the active views by position:
Then once by overriding the notifyDataSetChanged method you can refresh the views...
You can actually use similar code in instantiateItem and notifyDataSetChanged to refresh your view.
A much easier way: use a FragmentPagerAdapter, and wrap your paged views onto fragments.
I actually use notifyDataSetChanged() on ViewPager and CirclePageIndicator and after that I call destroyDrawingCache() on ViewPager and it works.. None of the other solutions worked for me.
Just in case anyone are using [FragmentStatePagerAdapter (hyper-link)] based adapter(which will let ViewPager create minimum pages needed for display purpose, at most 2 for my case), @rui.araujo's answer of overwriting getItemPosition in your adapter will not cause significant waste, but it still can be improved.
Instead of returning POSITION_NONE and creating all fragments again, you can do as I suggested here: [Update ViewPager dynamically?
1.First you have to set the getItemposition method in your Pageradapter class 
2.You have to read the Exact position of your View Pager
3.then send that position as data location of your new one 
4.Write update button onclick listener inside the setonPageChange listener
I took all the code which populates the form out of onCreateView and put it in a function called PopulateForm which may be called from anywhere, rather than by the framework.
This function attempts to get the current View using getView, and if that is null, it just returns.
Now, for each of the affected pages, see if the page is active by using pager.getChildAt(i) - this tells you if you have a view.
If so, call pager.PopulateView().
After hours of frustration while trying all the above solutions to overcome this problem and also trying many solutions on other similar questions like [this (hyper-link)], [this (hyper-link)] and [this (hyper-link)] which all FAILED with me to solve this problem and to make the ViewPager to destroy the old Fragment and fill the pager with the new Fragments.
1) Make the ViewPager class to extends FragmentPagerAdapter as following:
2) Create an Item for the ViewPager that store the title and the fragment as following:
3) Make the constructor of the ViewPager take my FragmentManager instance to store it in my class as following:
for "updateView" , fill the view with all the data you wish to fill (setText,setBitmapImage,...) .
verify that destroyView works like this:
For example if you wish to notify all of the views that are being shown by the viewPager that something has changed, you can call:
Eventually, it will listen to the notifyDataSetChanged() on view pager.
what worked for me was going viewPager.getAdapter().notifyDataSetChanged();
and in the adapter putting your code for updating the view inside getItemPosition like so
For what it's worth, on KitKat+ it seems that adapter.notifyDataSetChanged() is enough to cause the new views to show up, provided that you've setOffscreenPageLimit sufficiently high.
I'm able to get desired behavior by doing viewPager.setOffscreenPageLimit(2).
I leave here my own solution, which is a workaround because seems as the problem is the FragmentPagerAdapter doesn't clean the previous fragments, you can be added to the ViewPager, in the Fragment Manager.
In my case every time the Fragment entered onCreateView I was restarting values so handle null or empty values like:
Fragment class could enter onCreateView every time we change and get back to the view from the UI at runtime.
I m using Tablayout with ViewPagerAdapter.
I guess, I've got the logics of ViewPager.
Then, ViewPager makes a number of calls to getItemPosition(), passing there Fragment as an Object.
In my case I have a 2-pane layout with a list of top items on the left pane and a swipe view (ViewPager) on the right.
This is for all those like me, which need to update the Viewpager from a service (or other background thread) and none of the proposals have worked:
 After a bit of logchecking i realized, that the notifyDataSetChanged() method never returns.
I suppose that ViewPager checks if itemId was changed and recreates page only if it was.
But not-overriden version returns the same position as itemId even if page is actually different, and ViewPager doesn't define that page is replaced one and needs to be recreated.
I think that it is more consistent way rather using of Tags of view mentioned as a solution in this topic.
You can add pager transform on Viewpager like this
In the below code I changed my view color on runtime when pager scroll
For example in my case, Fragment0 contained a GLSurfaceView which displays a 3d object based on a path to a .ply file, so inside my updateFragment method I change the path to this ply file.
then create a ViewPager instance,
Then inside the class were you initialized the Adapter class above and created a viewPager, every time you want to update one of your fragments (in our case Fragment0) use the following:
In short, you need to attach/save the data you are using to paint your view, to your view.
From there, when getItemPosition() is invoked, the ViewPager can determine if the currently displayed view is still present on the adapter or not, and act accordingly.
If you haven't changed offscreenPageLimit of the ViewPager, it always has 3 to 4 children depending on which direction you are going.
now when you call removeAllViews() on your ViewPager, only 3 to 4 Views are actually being removed from the Window's hierarchy, and by calling instantiateItem(ViewGroup viewPager, int index), you are only recreating 3 to 4 Views.
Then everything is back to normal, you swipe and scroll, the ViewPager shows contents using its adapter.
ViewPager was not designed to support dynamic view change.
This question is a bit old, but Google recently solved this problem with [ViewPager2 (hyper-link)] .
It also prevents recreating views needlessly as some answers do.
For ViewPager2 examples, you can check [https://github.com/googlesamples/android-viewpager2 (hyper-link)]
If you want to use ViewPager2, you will need to add the following dependency in your build.gradle file :
Then you can replace your ViewPager in your xml file with :
After that, you will need to replace ViewPager by ViewPager2 in your activity
ViewPager2 needs either a RecyclerView.Adapter, or a FragmentStateAdapter, in your case it can be a RecyclerView.Adapter
Then you will be able to refresh your views by modifying your adapter's data and calling notifyDataSetChanged method
The only one worked for me is that I have to set the adapter to viewpager again, then it will refresh the content.
removeView(int pos) in my PagerAdaper
In my case there is a textView in my Viewpager, on a button click in mainActivity I want to  change the color of that textView and update pagerAdapter.
So, I update viewPager view the following way .
Thus, when I click the button, the color changes immediately in pagerAdapter's Textview.
In ViewPager2 you can re-initialize the adapter again to refresh the pager list with new views.
viewPager2.adapter = myPagerAdapter
The only catch is that you often miss queries which execute very quickly, so it is most useful for longer-running queries or when the MySQL server has queries which are backing up - in my experience this is exactly the time when I want to view "live" queries.
Use MySQL probes to view the live MySQL queries without touching the server.
NOTE: on newer versions of chrome, you have to open Developer Tools > Security, and select View certificate.
Click on View Certificate.
In Chrome's cert viewer (which has moved to "Security" tab under F12) you should see it listed under Extensions as Certificate Subject Alternative Name:
In chrome open Developer Tools > Security, and select View certificate.
Safari then would let me view the page.
Chrome showed that the certificate was trusted, but wouldn't let me view the page.
You can set in the XML or by calling setSingleLine(false);
[http://developer.android.com/reference/android/widget/TextView.html#setSingleLine%28%29 (hyper-link)]
All of these are nice but will not work in case you have your edittext inside upper level scroll view :) Perhaps most common example is "Settings" view that has so many items that the they go beyond of visible area.
In this case you put them all into scroll view to make settings scrollable.
Try this,
add these lines to your edit text view, i'll add mine.
If you want multiline BUT want to retain the enter button as a post button, set the listview's "horizontally scrolling" to false.
listView.setHorizontallyScrolling(false);
You can [review the differences (hyper-link)] with a:
To view the differences:
I think this is a more versatile solution than pull with rebase, because the local commit can be reviewed and even moved to another branch.
I had an issue where I was attempting to present a modal view controller within the viewDidLoad method.
The solution for me was to move this call to the viewDidAppear: method.
My presumption is that the view controller's view is not in the window's view hierarchy at the point that it has been loaded (when the viewDidLoad message is sent), but it is in the window hierarchy after it has been presented (when the viewDidAppear: message is sent).
If you do make a call to presentViewController:animated:completion: in the viewDidAppear: you may run into an issue whereby the modal view controller is always being presented whenever the view controller's view appears (which makes sense!)
and so the modal view controller being presented will never go away...
Maybe this isn't the best place to present the modal view controller, or perhaps some additional state needs to be kept which allows the presenting view controller to decide whether or not it should present the modal view controller immediately.
I also encountered this problem when I tried to present a UIViewController in viewDidLoad.
After some research, I've found a way to solve this using the addChildViewController.
viewWillLayoutSubviews and viewDidLayoutSubviews (iOS 5.0+) can be used for this purpose.
They are called earlier than viewDidAppear.
Probably, like me, you have a wrong root viewController
I want to display a ViewController in a non-UIViewController context,
So, I get a UIViewController:
For some reason (logical bug), the rootViewController is something other than expected (a normal UIViewController).
Then I correct the bug, replacing rootViewController with a UINavigationController, and the problem is gone.
While I've seen no documented guarantee that your VC would be on the view hierarchy on the time dispatch block is scheduled to execution, I've observed it would work just fine.
And the best thing - this way you don't need to mess with boolean variable in viewDidAppear:
I had this issue when I was accidentally presenting the same view controller twice.
Effectively, two segues were firing at the same time, and I got the error: Attempt to present X on Y whose view is not in the window hierarchy!
TL;DR You can only have 1 rootViewController and its the most recently presented one.
So don't try having a viewcontroller present another viewcontroller when it's already presented one that hasn't been dismissed.
If you have a rootViewController that you want to present everything then you can run into this problem.
Here is my rootController code (open is my shortcut for presenting a viewcontroller from the root).
However if I close the most recently presented view then call open, it works just fine when I call open again (on another viewcontroller).
What I have concluded is that the rootViewController of only the MOST-RECENT-CALL is on the view Hierarchy (even if you didn't dismiss it or remove a view).
I tried playing with all the loader calls (viewDidLoad, viewDidAppear, and doing delayed dispatch calls) and I have found that the only way I could get it to work is ONLY calling present from the top most view controller.
You can also get this warning when performing a segue from a view controller that is embedded in a container.
The correct solution is to use segue from the parent of container, not from container's view controller.
in UIViewController
I've ended up with such a code that finally works to me (Swift), considering you want to display some viewController from virtually anywhere.
This code will obviously crash when there is no rootViewController available, that's the open ending.
For Display any  subview to main view,Please use following code
For Dismiss any  subview from main view,Please use following code
Of course, after you call the modal once, the viewcontroller that calls it it's not longer in the view hierarchy, that's why we see this issue.
Another possible cause to this, which happened to me, was having a segue from a tableViewCell to another ViewController on the Storyboard.
I fixed this issue by making a segue from ViewController to ViewController.
It was subscribing in ViewWillAppear, which was being called multiple times since we had added navigation to go to another controller, and then unwind back to it.
I was trying to navigate to a new View Controller right after unwind from another View Controller.
Then present the wanted VC with present(_ viewControllerToPresent: UIViewController)
This kind of warning can mean that You're trying to present new View Controller through Navigation Controller while this Navigation Controller is currently presenting another View Controller.
To fix it You have to dismiss currently presented View Controller at first and on completion present the new one.
Another cause of the warning can be trying to present View Controller on thread another than main.
I had similar issue on Swift 4.2 but my view was not presented from the view cycle.
This works for to present any view controller ,if you have navigation controller available.
self.navigationController?.present(MyViewController, animated: true, completion: nil)
Also , I can able to present alerts and mail controller also.
I fixed this error with storing top most viewcontroller into constant which is found within while cycle over rootViewController:
The problem was happening when I programatically launched a segue directly after unwinding a view controller.
It was fixed by changing the Presentation mode on all the view controllers from Automatic to Full Screen.
I have encountered it for more than one reason, mostly complicated viewcontroller scenarios.
Present ViewControllerA from MainViewController and without dismissing the ViewControllerA you try to present viewControllerB from MainViewController (using a delegate method).
In this scenario, you'd have to make sure your ViewControllerA is dismissed and then the ViewControllerB is called.
Because after presenting ViewControllerA (ViewControllerA becomes responsible for displaying views and viewcontrollers and when MainViewController attempts to load another viewcontoller, it refuses to work with throwing a warning).
I call present in viewDidLayoutSubviews as presenting in viewDidAppear causes a split second showing of the view controller before the modal is loaded which looks like an ugly glitch
If an alert controller is executed on a background thread then the "Attempt to present ... whose view is not in the window hierarchy" error may occur.
I found a way to view it in PHP.
After doing some more snooping I found 2 solutions for offline and online viewing of .md files:
Offline: [https://github.com/WolfieZero/Markdown-Viewer-PHP (hyper-link)]
You can use [texts (hyper-link)] as a md viewer and md editor, its lightweight and neat.
I just coded up an offline markdown viewer using the node.js file watcher and socket.io, so you point your browser at localhost and run ./markdownviewer /path/to/README.md and it streams it to the browser using websockets.
markdownviewer [https://github.com/Hainish/markdownviewer/ (hyper-link)]
I've been using [Markdown Preview Plus (hyper-link)].
I found [MarkView Google Chrome extension (hyper-link)] pretty useful, actually it's working like a charm:
MarkView is a Chrome extention for editing and viewing markdown file with an outline view, support multiple table format styles, code block syntax highlight and Github Flavored Markdown.
Editing and Viewing markdown file in web page style.
Have buttons for GoTop, ViewSource and GoBottom
MarkView will view all markdown files except those under raw.github.com 
  because that subdomain only displays the source.
More features have been added to MarkView:
Strapdown is Javascript-based solution that renders the markdown content in the browser, which makes it great for offline-viewing.
It features when-you-type preview, code highlight, fenced code blocks, github style
I created this to build a tool for sending code reviews, it is easily extensible, by importing it as a module you can add custom actions.
This php viewer come with responsive support and a numbers of option to customize.
Codespire Dokumen: [http://www.binpress.com/app/codespire-dokumen-responsive-markdown-viewer/2112 (hyper-link)]
There is no live preview feature for this, you have to toggle Edit Code and Edit Visually to preview your text.
Just recently used [Brackets (hyper-link)] + [Markdown Preview Extension (hyper-link)].
The popular Web Essentials plugin for Visual Studio offers a Markdown viewer and editor.
If you're a vim person, you can try the [vim-preview (hyper-link)] plugin.
Then you can open a Markdown file with vim and use the command :Preview which will open a new window in your browser and display the end result.
I am not certain if the results are correlated 100% with Github but they are pretty good and make for a tiny unobtrusive offline viewer only solution.
Gives you a side by side preview.
[Geany (hyper-link)] has a [plugin for markdown (hyper-link)] which does a fair job, giving you also a Markdown preview in the sidebar.
Live preview
You may use Firefox Markdown Viewer plugin that is so easy to install and use.
There is a Firefox add-on called [Markdown Viewer (hyper-link)] which is able to read Markdown files offline.
The editor provides good support to toggle between the markdown code and the preview mode.
An easy solution for most situations: copy/paste the markdown into a viewer in the "cloud."
FYI, the [Calibre (hyper-link)] ebook viewer does an OK job of parsing markdown files and displaying them.
Once calibre is installed, just ebook-viewer myfile.md.
View:
For a strongly typed Model just add it to the ViewData.Model property before passing to RenderViewToString.
I found a new solution that renders a view to string without having to mess with the Response stream of the current HttpContext (which doesn't allow you to change the response's ContentType or other headers).
Basically, all you do is create a fake HttpContext for the view to render itself:
Update: in ASP.NET MVC 2.0 RC, the code changes a bit because we have to pass in the StringWriter used to write the view into the ViewContext:
More on [Razor render- MVC3 View Render to String (hyper-link)]
[This article (hyper-link)] describes how to render a View to a string in different scenarios:
The solution/code is provided as a class called ViewRenderer.
you are get the view in string using this way
I found a better way to render razor view page when I got error with the methods above, this solution for both web form environment and mvc environment.
To render a view to a string in the Service Layer without having to pass ControllerContext around, there is a good Rick Strahl article here [http://www.codemag.com/Article/1312081 (hyper-link)] that creates a generic controller.
Then to render the View in the Service class:
Using RequestHeaderMapping works even better, because it also sets the Content-Type = application/json in the response header, which allows Firefox (with JSONView add-on) to format the response as JSON.
imageView.setColorFilter(Color.argb(255, 255, 255, 255)); // White Tint
Place another view on top of the image
Change the alpha value of the view however you want (programmatically) to get the desired effect.
As @milosmns said, you should use

imageView.setColorFilter(getResouces().getColor(R.color.blue),android.graphics.PorterDuff.Mode.MULTIPLY);
Beginning in Lollipop, there is a method called [ImageView#setImageTintList() (hyper-link)] that you can use... the advantage being that it takes a ColorStateList as opposed to just a single color, thus making the image's tint state-aware.
On pre-Lollipop devices, you can get the same behavior by tinting the drawable and then setting it as the ImageView's image drawable:
To set the tint on all Android versions, use the ImageViewCompat:
You can use an ImageViewCompat to resolve that issue, tho.
For set tint for an image view programmatically in android
I use it with card and image views but i thins it works in any view to change their tints colors.
cardBookmark is my cardView.
Let's say you generate a bunch of views that are similar.
You could set an OnClickListener for each view individually:
Then you have to create a unique onClick method for each view even if they do the similar things, like:
This is because onClick has only one parameter, a View, and it has to get other information from instance variables or final local variables in enclosing scopes.
What we really want is to get information from the views themselves.
It's basically a way for views to have memories.
There setTag used as reference to object that references on some parts of layout (that displaying in ListView) instead of findViewById.
Although using get/setTag(Object) seems to be very useful in the particular case of a ViewHolder pattern, I'd recommend to think twice before using it in other cases.
It is non-obvious for other developers what you designed to store as tag in the view.
Here's a real-life story: We had a pretty big project with a lot of adapters, async operations with views and so on.
One developer decided to set/getTag in his part of code, but another one had already set the tag to this view.
Prior to Android 4.0, the implementation of View.setTag(int, Object)
  would store the objects in a static map, where the values were
  strongly referenced.
If you pass a view, the view
  provides a reference to the context that created it.
Similarly, view
  holders typically contain a view, and cursors are sometimes also
  associated with views.
Unlike IDs, tags are not used to identify views.
Tags are essentially an extra piece of information that can be associated with a view.
They are most often used as a convenience to store data related to views in the views themselves rather than by putting them in a separate structure.
Reference: [http://developer.android.com/reference/android/view/View.html (hyper-link)]
Setting of TAGs is really useful when you have a ListView and want to recycle/reuse the views.
In that way the ListView is becoming very similar to the newer RecyclerView.
Attach your gesture listener to all the views you add to the main layout;
Watch in awe as your overridden methods are hit, both the onClick(View v) of the activity and the onFling of the gesture listener.
It is worth noting that you can actually obtain scaled, reasonable values from the system using ViewConfiguration class:
I do it a little different, and wrote an extra detector class that implements the View.onTouchListener
where id.lowestLayout is the id.xxx for the view lowest in the layout hierarchy and lowestLayout is declared as a RelativeLayout
You can see how it's used in a [view for sliding images (hyper-link)].
And in implementing Activity you need to implement methods from SwipeInterface, and you can find out on which View the Swipe Event was called.
There's some proposition over the web (and this page) to use ViewConfiguration.getScaledTouchSlop() to have a device-scaled value for SWIPE_MIN_DISTANCE.
This question is kind of old and in July 2011 Google released the [Compatibility Package, revision 3) (hyper-link)] which includes the ViewPager that works with Android 1.6 upwards.
If you're looking for the code used in switching between photos in the Android Gallery or switching views in the new Play Market app then it's definitely ViewPager.
[http://android-developers.blogspot.com/2011/08/horizontal-view-swiping-with-viewpager.html (hyper-link)]
[http://mobile.tutsplus.com/tutorials/android/android-user-interface-design-horizontal-view-paging/ (hyper-link)]
[http://thepseudocoder.wordpress.com/2011/10/05/android-page-swiping-using-viewpager/ (hyper-link)]
I also provide a  RelativeLayout to show how to override a View's onTouch method to allow both swipe events and other detected events (such as clicks or long clicks).
Swipe Interceptor View
the interface returns one of the four final int defined
in the class and will return the view on which it was activated upon.
I know its too late to answer but Still I am posting Swipe Detection for ListView that How to use Swipe Touch Listener in ListView Item.
namVyuVar can be any name of the View on which you need to set the listner
The view's [window property (hyper-link)] is non-nil if a view is currently visible, so check the main view in the view controller:
Invoking the [view (hyper-link)] method causes the view to load (if it is not loaded) which is unnecessary and may be undesirable.
I've added the call to isViewLoaded to avoid this problem.
Or if you have a UINavigationController managing the view controllers, you could check its [visibleViewController (hyper-link)] property instead.
You want to use the UITabBarController's selectedViewController property.
All view controllers attached to a tab bar controller have a tabBarController property set, so you can, from within any of the view controllers' code:
Here's @progrmr's solution as a UIViewController category:
if you're utilizing a UINavigationController and also want to handle modal views, the following is what i use:
The approach that I used for a modal presented view controller was to check the class of the presented controller.
If the presented view controller was ViewController2 then I would execute some code.
If you are using, for example, a UISplitViewController, the master view will always return true for
For my purposes, in the context of a container view controller, I've found that
For over-full-screen or over-context modal presentation, "is visible" could mean it is on top of the view controller stack or just visible but covered by another view controller.
To check if the view controller "is the top view controller" is quite different from "is visible", you should check the view controller's navigation controller's view controller stack.
It allows you to easily check if a UIViewController is on screen like so:
I found those function in UIViewController.h.
Maybe the above functions can detect the ViewController is appeared or not.
This can be used in any view controller in the following way,
If you call this property in -(void)viewDidLoad you get 0, then if you call this after -(void)viewDidAppear:(BOOL)animated you get 1.
I needed this to check if the view controller is the current viewed controller, I did it via checking if there's any presented view controller or pushed through the navigator, I'm posting it in case anyone needed such a solution:
I use this small extension in Swift 5, which keeps it simple and easy to check for any object that is member of UIView.
Good point that view is appeared if it's already in window hierarchy stack.
Then, in your XML for the actual View you would reference this TransitionDrawable in the android:background attribute.
Make your view a ViewGroup
Add a child view to it at index 0, with match_parent layout dimensions
Depending on how your view gets its background color and how you get your target color there are several different ways to do this.
Your view have its background color defined as a argb value in a xml file.
Your view have previously had its color set by view.setBackgroundColor()
Your view have its background color defined in a drawable that DOES NOT defines any extra properties like stroke or corner radiuses.
Your view have its background color defined in a drawable and you want to remove any extra properties like stroke or corner radiuses, keep in mind that the removal of the extra properties will not animated.
The object animator works by calling view.setBackgroundColor which replaces the defined drawable unless is it an instance of a ColorDrawable, which it rarely is.
Your view have its background color defined in a drawable that also sets properties like the stroke or corner radiuses AND you want to change it to a new color that is decided while running.
Your view should switch between two drawable that have been defined before deployment.
You will have to modify the Value Animator example if you want to use a [StateLists drawable (hyper-link)] or a [LayerLists drawable (hyper-link)], otherwise it will crash on the final GradientDrawable background = (GradientDrawable) view.getBackground(); line.
View definition:
View definition:
View definition:
For example, I have a targetView and I want to change your background color:
Then just use it as background for your view.
Based on [ademar111190's answer (hyper-link)], I have created this method the will pulse the background color of a view between any two colors:
Pass whatever view you want to change color of.
Yes, views can have a clustered index assigned and, when they do, they'll store temporary results that can speed up resulting queries.
With all due respect, I think that they are just wrong; Microsoft's own documentation makes it very clear that Views can improve performance.
First, simple views are expanded in place and so do not directly contribute to performance improvements - that much is true.
However, indexed views can dramatically improve performance.
After a unique clustered index is created on the view, the view's result set is materialized immediately and persisted in physical storage in the database, saving the overhead of performing this costly operation at execution time.
Second, these indexed views can work even when they are not directly referenced by another query as the optimizer will use them in place of a table reference when appropriate.
The indexed view can be used in a query execution in two ways.
The query can reference the indexed view directly, or, more importantly, the query optimizer can select the view if it determines that the view can be substituted for some or all of the query in the lowest-cost query plan.
In the second case, the indexed view is used instead of the underlying tables and their ordinary indexes.
The view does not need to be referenced in the query for the query optimizer to use it during query execution.
This allows existing applications to benefit from the newly created indexed views without changing those applications.
Update 2: the answer has been criticized on the basis that it is the "index" that provides the performance advantage, not the "View."
By creating an indexed view of just the Lithuanian records, we get to keep the records we need in an indexed cache as described in the MS documentation.
If we were to do the same without the VIEW and just relying on an index into the table, we'd have to traverse an index tree with a search depth of 21!
Clearly, the View itself would provide us with a performance advantage (3x) over the simple use of the index alone.
Update 3: The question has come up about whether an Indexed View just uses an index placed on the underlying table.
That is, to paraphrase: "an indexed view is just the equivalent of a standard index and it offers nothing new or unique to a view."
Using indexes to improve query performance is not a new concept; however, indexed views provide additional performance benefits that cannot be achieved using standard indexes.
Together with the above quote regarding the persistence of data in physical storage and other information in the documentation about how indices are created on Views, I think it is safe to say that an Indexed View is not just a cached SQL Select that happens to use an index defined on the main table.
The only potential benefit that you get, performance wise, from using a view is that it could potentially create some access paths based on the query.
But the main reason to use a view is to simplify a query or to standardize a way of accessing some data in a table.
It may be faster if you create a materialized view (with schema binding).
Non-materialized views execute just like the regular query.
My understanding is that a while back, a view would be faster because SQL Server could store an execution plan and then just use it instead of trying to figure one out on the fly.
I think the performance gains nowadays is probably not as great as it once was, but I would have to guess there would be some marginal improvement to use the view.
A view is nothing more than a stored query definition, there is no caching or storing of data for a view.
In SQL Server at least, Query plans are stored in the plan cache for both views and ordinary SQL queries, based on query/view parameters.
So no, there is no difference, given that you are reusing the same SQL query and the same view with the same frequency.
Obviously, in general, a view, by it's very nature (That someone thought it was to be used often enough to make it into a view) is generally more likely to be "reused" than any arbitrary SQL statement.
The purpose of a view is to use the query over and over again.
will typically provide a "cached" or "compiled" version of your view, thus improving its performance.
Now, if you're doing a complex query, create the view.
Definitely a view is better than a nested query for SQL Server.
Without knowing exactly why it is better (until I read Mark Brittingham's post), I had run some tests and experienced almost shocking performance improvements when using a view versus a nested query.
After running each version of the query several hundred times in a row, the view version of the query completed in half the time.
Views are primarily used for convenience and security, and won't (by themselves) produce any speed benefit.
That said, SQL Server 2000 and above do have a feature called Indexed Views that can greatly improve performance, with a few caveats:
Not every view can be made into an indexed view; they have to follow a [specific set of guidelines (hyper-link)], which (among other restrictions) means you can't include common query elements like COUNT, MIN, MAX, or TOP.
Indexed views use physical space in the database, just like indexes on a table.
This article describes additional [benefits and limitations of indexed views (hyper-link)]:
The view definition can reference one or more tables in the
same database.
Once the unique clustered index is created, additional nonclustered
indexes can be created against the view.
The view definition can’t reference other views, or tables
in other databases.
The view is
created with the WITH SCHEMABINDING option.
In my finding, using the view is a little bit faster than a normal query.
My [stored procedure (hyper-link)] was taking around 25 minutes (working with a different larger record sets and multiple joins) and after using the view (non-clustered), the performance was just a little bit faster but not significant at all.
MS SQL Indexed views are faster than a normal view or query but indexed views can not be used in a mirrored database invironment (MS SQL).
A view in any kind of a loop will cause serious slowdown because the view is repopulated each time it is called in the loop.
In this situation a temporary table using # or @ to hold your data to loop through is faster than a view or a query.
Select from a View or from a table will not make too much sense.
Of course if the View does not have unnecessary joins, fields, etc.
You can check the execution plan of your queries, joins and indexes used to improve the View performance.
You can even create index on views for faster search requirements.
referred to answer on asp forums :
[https://forums.asp.net/t/1697933.aspx?Which+is+faster+when+using+SELECT+query+VIEW+or+Table+ (hyper-link)]
Against all expectation, views are way slower in some circumstances.
To do this we imported the oracle data as unchanged as I could into a table and then used views to extract data.
We had secondary views based on those views.
Maybe 3-4 levels of views.
That query was based on a cascade of views.
I could take each of the views in question, insert its sql into one nested query, and execute it in a couple of seconds.
We even found that we could even write each view into a temp table and query that in place of the view and it was still way faster than simply using nested views.
So, using queries which pull from views which pull from views is much slower than a nested query - which makes no sense for me.
From Nick Lockwood: [https://github.com/nicklockwood/FXBlurView (hyper-link)] The example shows the blur over a scroll view.
It blurs with dispatch_async, then syncs to call updates with UITrackingRunLoopMode so the blur is not lagged when UIKit gives more priority to the scroll of the UIScrollView.
See [https://github.com/mochidev/MDBlurView/issues/4 (hyper-link)]
From Evadne blog: [LiveFrost: Fast, Synchronous UIView Snapshot Convolving (hyper-link)].
A peek at the private headers of Apple's [SBFProceduralWallpaperView (hyper-link)].
Finally, this isn't a real blur, but remember you can set rasterizationScale to get a pixelated image: [http://www.dimzzy.com/blog/2010/11/blur-effect-for-uiview/ (hyper-link)]
You can do it with any view, just make it a subclass of UIToolbar instead of UIView.
You can even do it with a UIViewController's view property, for example...
1) create a new class that is a "Subclass of" UIViewController and check the box for "With XIB for user interface".
2) Select the View and go to the identity inspector in the right-hand panel (alt-command-3).
3) Add a subview to the main view and hook it up to an IBOutlet in your interface.
Call it backgroundColorView.
4) Go to the view controller implementation (.m) file and change the -viewDidLoad method, to look as follows:
This will give you a dark gray view, which blurs everything behind it.
You can add this view controller's view to another view, as follows:
This will give a blue-ish tint to the blurred view.
You can use UIVisualEffectView to achieve this effect.
If you are presenting this view controller modally to blur the underlying content, you'll need to set the modal presentation style to Over Current Context and set the background color to clear to ensure the underlying view controller will remain visible once this is presented overtop.
In  this class you have the desired methods for blurring your view
Accepted answer is correct but there's an important step missing here, in case this view - for which you want blurred background - is presented using
[self presentViewController:vc animated:YES completion:nil]
By default, this will negate the blur as UIKit removes the presenter's view, which you are actually blurring.
Simple answer is Add a subview and change it's alpha.
I've converted it to swift 3, added an explanation to what's happening in coments, made it an extension of a UIViewController so any VC can call it at will, added an unblurred view to show selective application, and added a completion block so that the calling view controller can do whatever it wants at the completion of the blur.
This applies to a situation where you want to present a blurred-background UIViewController with UINavigationController.
To add an overlay, or the popup view You can also use the Container View with which you get a free View Controller ( you get the Container View from the usual object palette/library)
Have a View (ViewForContainer in the pic) that holds this Container View, to dim it when the contents of Container View are displayed.
Connect the outlet inside the first View Controller
Hide this View when 1st VC loads
To dim this View when the Container View content is displayed, set the Views Background to Black and opacity to 30%
I have added an answer to the popview view creation in other Stackoverflow question
[https://stackoverflow.com/a/49729431/5438240 (hyper-link)]
Drage visual effect view on your uiview or imageview.
If adds a dark blur view for tableView, this will beautifully make it:
[You can try (hyper-link)] UIVisualEffectView with custom setting as -
You can directly make your Background Blur using "Visual Effect View with Blur" and "Visual Effect View with Blur and Vibrancy".
Go and search for "Visual Effect View with Blur" in Object Library
Drag the "Visual Effect View with Blur" in your Storyboard and setup it...
[Application View After Clicking on Button which makes the whole application background Blur!
Here's an easy way to add custom blur without haggling with private APIs using [UIViewPropertyAnimator (hyper-link)]:
Then set your blur view in viewDidLoad():
Note: This solution is not suitable for UICollectionView/UITableView cells
{Aside: as a general iOS engineering matter, didMoveToWindow may be more suitable to you than didMoveToSuperview.
BlurryBall is just a UIVisualEffectView.
Notice the inits for a visual effects view.
NOTE: If you want to blur the background of an UILabel without affecting the text, you should create a container UIView, add the UILabel to the container UIView as a subview, set the UILabel's backgroundColor to UIColor.clear, and then call blurBackground(style: UIBlurEffect.Style, fallbackColor: UIColor) on the container UIView.
Then I went back to "index.html" and added the nav.html using ng-include and the ng-view for my partials:
The module [angularjs-viewhead (hyper-link)] shows a mechanism to set the title on a per-view basis using only a custom directive.
It can either be applied to an existing view element whose content is already the view title:
...or it can be used as a standalone element, in which case the element will be invisible in the rendered document and will only be used to set the view title:
The content of this directive is made available in the root scope as viewTitle, so it can be used on the title element just like any other variable:
To use it, just throw this in your view, much as you would do for a regular <title> tag:
While others may have better methods, I was able to use $rootScope in my controllers, as each of my views/templates has a distinct controller.
The first solution I can think of, is to use ViewBag to store the values that must be rendered.
Onestly I never tried if this work from a partial view, but it should imo.
You could add those partial view scripts into separate .js file and reference them into @scripts section from parent view.
Sections don't work in partial views and that's by design.
You may use [some custom helpers (hyper-link)] to achieve similar behavior, but honestly it's the view's responsibility to include the necessary scripts, not the partial's responsibility.
I would recommend using the @scripts section of the main view to do that and not have the partials worry about scripts.
I had the same problem and although it isn't ideal, I think it actually works quite well and doesn't make the partial dependant on the view.
My scenario was that an action was accessible by itself but also could be embedded into a a view - a google map.
In my index view I have:
In my clients view I have (all the map and assoc.
My Clients_Scripts view contains the javascript to be rendered onto the page.
This way my script is isolated and can be rendered into the page where required, with the body_scripts tag only being rendered on the first occurrence that the razor view engine finds it.
The flaw is that JavaScript is somehow the view's responsibility.
A view is a view, JavaScript (behavioral or otherwise) is JavaScript.
In Silverlight and WPF's MVVM pattern we we're faced with "view first" or "model first".
Seperate your JavaScript in modules, define your functionality and hook into your html from JavaScript instead of relying on a view to load the JavaScript.
Typical scenario: In a partial view, only include the block one time no matter how many times the partial view is repeated in the page:
[code snippet]
In a partial view, include the block for every time the partial is used:
[code snippet]
In a partial view, only include the block once no matter how many times the partial is repeated, but later render it specifically by name when-i-call-you:
[code snippet]
display the delayed section in a parent view)
You can't need using sections in partial view.
Include in your Partial View.
There is a way to insert sections in partial views, though it's not pretty.
You need to have access to two variables from the parent View.
Since part of your partial view's very purpose is to create that section, it makes sense to require these variables.
Here's what it looks like to insert a section in the partial view:
And in the page inserting the partial view...
assume you have a partial view called _contact.cshtml, your contact can be a legal (name) or a physical subject (first name, lastname).
your view should take care about what's rendered and that can be achived with javascript.
so delayed rendering and JS inside view may be needed.
also note that MVC 6 will have a so called View Component, even MVC futures had some similar stuff and Telerik also supports such a thing...
I wrapped my Partial View in a big if-else statement:
Then, I called the Partial twice with a custom ViewData:
but the partial view depended on some JavaScript in the Scripts section.
I solved it by encoding the partial view as JSON, loading it into a JavaScript variable and then using this to populate a div, so:
But, I reckon that, if your script is tightly coupled to your partial, just put your javascript directly inside an inline <script> tag within your partial and be done with it (just be careful of script duplication if you intend on using the partial more than once in a single view);
and it will working over all your partialviews.
CustomWebViewPage.cs:
Views\web.config:
View:
This worked for me allowing me to co-locate javascript and html for partial view in same file.
Helps with thought process to see html and related part in same partial view file.
I have just added this code on my partial view and solved the problem, though not very clean, it works.
The goal of the OP is that he wants to define inline scripts into his Partial View, which I assume that this script is specific only to that Partial View, and have that block included into his script section.
I get that he wants to have that Partial View to be self contained.
My way would be to just keep the scripts inside the Partial View as is.
Now the problem with that is when calling Partial View, it may execute the script in there before all other scripts (which is typically added to the bottom of the layout page).
In that case, you just have the Partial View script wait for the other scripts.
Then on my Partial View (at the bottom):
Then in the javacript, check for the presence of one of the elements in the parial view.
[Visual Event (hyper-link)] is a nice little bookmarklet that you can use to view an element's event handlers.
On online demo can be viewed [here (hyper-link)].
I was able to get divider lines nicely after importing this file in my project and add it as an item decoration to the recycler view.
Here's how my onCreateView look like in my fragment containing the Recyclerview:
DividerItemDecoration is a RecyclerView.ItemDecoration that can be used as a divider between items of a LinearLayoutManager.
Unlike ListView, the RecyclerView class doesn't have any divider-related parameters.
Instead, you need to extend [ItemDecoration (hyper-link)], a RecyclerView's inner class:
An ItemDecoration allows the application to add a special drawing and layout offset to specific item views from the adapter's data set.
All ItemDecorations are drawn in the order they were added, before the item views (in onDraw()) and after the items (in onDrawOver(Canvas, RecyclerView, RecyclerView.State).
To use your new class, add VerticalSpaceItemDecoration or DividerSpaceItemDecoration to RecyclerView, for example in your fragment's onCreateView() method:
Add a margin to your view.
If you just want to add equal spacing and want to do it in XML, just set padding to your RecyclerView and equal amount of layoutMargin to the item you inflate into your RecyclerView, and let the background color determine the spacing color.
Taken from a Google search, add this [ItemDecoration (hyper-link)] to your RecyclerView:
I simply ended up in having a view line in my item view layout file of each item.
You just need to add padding property to your item view
For those who are looking just for spaces between items in the RecyclerView, see my approach where you get equal spaces between all items, except in the first and last items where I gave a bigger padding.
If you want to add the same space for items, the simplest way is to add top+left padding for RecycleView and right+bottom margins to card items.
Here's my lazy approach, but it works:
wrap the CardView in a layout and set a padding/margin on the parent layout to mimic the divider, and force the normal divider to null.
Implement its own version of RecyclerView.ItemDecoration
The simple one is to set the background color for [RecyclerView (hyper-link)] and a different background color for items.
And the [TextView (hyper-link)] item (it can be anything though) with bottom margin "x" dp or px.
The RecyclerView is a bit different from the ListView.
Actually, the RecyclerView needs a ListView like structure in it.
In the code below I have a RecyclerView comprised of CardView objects within a LinearLayout with a "padding" that will put some space between items.
Here's the Recycler view in file recyclerview_layout.xml:
Here is the final result - a RecyclerView with divider.
I forked the DividerItemDecoration from an older gist and simplified it to fit my use case, and I also modified it to draw the dividers the way they are drawn in ListView, including a divider after the last list item.
2) Add the decorator to your RecylerView:
We can decorate the items using various decorators attached to the recyclerview such as the DividerItemDecoration:
And for those of who are looking for more details can check out this guide [Using the RecyclerView _ CodePath Android Cliffnotes (hyper-link)].
If you want to hide the divider for the last row, then use divider.setVisiblity(View.GONE); on the onBindViewHolder for the last list Item.
A really easy solution is to use [RecyclerView-FlexibleDivider (hyper-link)]
Add to your recyclerview:
RecyclerView doesn't provide a straightforward interface for drawing dividers of lists.
We use [RecyclerView.ItemDecoration (hyper-link)] to decorate RecyclerView's tiles with dividers or anything you want.
You can check out my GitHub repository [Dividers-For-RecyclerView (hyper-link)].
Also you may need to add the dependency
implementation 'com.android.support:recyclerview-v7:28.0.0'
DividerItemDecoration is a RecyclerView.ItemDecoration that can be
used as a divider between items of a LinearLayoutManager.
One of the ways is by using the cardview and recycler view together.
Example: [Create dynamic lists with RecyclerView (hyper-link)]
And another is by adding a view as a divider to a list_item_layout of a recycler view.
I have a very simple way of adding a divider in RecyclerView.
Use a custom adapter to modify the recycler view layout and then along with the recycler view items add LinearLayout with a background color (which will be the divider color) and add a height of 1 dp (or as per your requirement) and width to match parent.
Then you can set it to your recyclerView.
Use this class to set divider in your RecyclerView.
Just add this line after init in the recycler view object.
This does the same thing as @Nerdy's original answer, except it sets the height of the divider to 24dp instead of a percentage of another view's height.
By using [PrimeAdapter (hyper-link)], handling dividers in RecyclerViews could be so simple.
The way how I'm handling the Divider view and also Divider Insets is by adding a RecyclerView extension.
Add a new extension file by naming View or RecyclerView:
and add the setDivider extension method inside the RecyclerViewExtension.kt file.
Create a Drawable resource file inside of drawable package like recycler_view_divider.xml:
On your Activity or Fragment where the RecyclerView is initialized, you can set the custom drawable by calling:
In order to accomplish spacing between items in a RecylerView, we can use ItemDecorators:
Under Ubuntu or debian, you can view crontab by /var/spool/cron/crontabs/ and then a file for each user is in there.
Yes you can view XML files of an Android APK file.
This is an old thread, but I thought I would mention, of your phone has root, you can view it directly on your phone using the root explorer app.
You can also use my app, [App Detective (hyper-link)] to view the manifest file of any app you have installed on your device.
I know this doesn't really answer your question, but different View Engines have different purposes.
The [Spark View Engine (hyper-link)], for example, aims to rid your views of "tag soup" by trying to make everything fluent and readable.
You can mix and match view engines in MVC, so it shouldn't be an issue if you decide to not go with a specific engine.
Anything implementing IViewEngine (e.g.
VirtualPathProviderViewEngine) is fair game here.
Just alphabetize new View Engines (leaving WebFormViewEngine and Razor at the top), and try to be objective in comparisons.
[System.Web.Mvc.WebFormViewEngine (hyper-link)]
A view engine that is used to render a
  Web Forms page to the response.
on-demand compilation or [precompiled (hyper-link)] views
ViewState PostBack)
Enforce strict Model-View separation
The Brail view engine has been ported
  from MonoRail to work with the
  Microsoft ASP.NET MVC Framework.
On-demand compiled views (but no precompilation available)
Hasic uses VB.NET's XML literals instead of strings like most other view engines.
Compiled views
[NDjango release 0.9.1.0 seems to be more stable under stress than WebFormViewEngine (hyper-link)]
.NET port of Rails Haml view engine.
[NVelocityViewEngine (MvcContrib) (hyper-link)]
A view engine based upon
  [NVelocity (hyper-link)] which is a .NET port
  of the popular Java project
  [Velocity (hyper-link)].
concise view code
limited number of helper methods available on the view
does not automatically have Visual Studio integration (IntelliSense, compile-time checking of views, or refactoring)
[Spark View Engine (hyper-link)]
Provides a powerful [Bindings feature (hyper-link)] to get rid of all code in your views and allows you to easily invent your own HTML tags
[StringTemplate View Engine MVC (hyper-link)]
It is based on F# and includes an ASP.NET MVC view engine, but can also be used solely for its capability of creating XHTML.
Compiled views
[XsltViewEngine (MvcContrib) (hyper-link)]
Builds views from familiar XSLT
I think this list should also include samples of each view engine so users can get a flavour of each without having to visit every website.
Pictures say a thousand words and markup samples are like screenshots for view engines :) So here's one from my favourite [Spark View Engine (hyper-link)]
You can easily extend view functionality with custom tags and filters.
This is a c# 4.0 internal dsl for generating html and also asp.net mvc view engine.
It is very clean and easy to read and keeps the view pages very easy to maintain.
You can still view its source code via the ::: function (i.e.
You can view the source code of unexported functions by using the ::: operator or getAnywhere.
The <bytecode: 0x294e410> line in the above output indicates that the function is byte-compiled, and you can still view the source from the R command line.
If you want to view compiled code in a package, you will need to download/unpack the package source.
If you want to view the code built-in to the R interpreter, you will need to download/unpack the R sources; or you can view the sources online via the R [Subversion repository (hyper-link)] or [Winston Chang's github mirror (hyper-link)].
Uwe Ligges's [R news article (PDF) (hyper-link)] (p. 43) is a good general reference of how to view the source code for .Internal and .Primitive functions.
Note that edit() opens a text editor (of user's choice), whereas
View() invokes a spreadsheet-style data viewer.
View() is great for browsing (multi-columnar) data, but usually terrible for code of anything other than toy length.
so when only want to view code, edit() is IMO actually far better than View(), since with edit() you can collapse/hide/dummy out all the arg-parsing/checking/default/error-message logic which can take up to 70% of an R function, and just get to the part where the function actually operationally does something(!
I like this function very much to view code or to debug the code, e.g, print some messages or variables or even assign them to a global variables for further investigation (of course you can use debug).
If you just want to view the source code and don't want the annoying long source code printed on your console, you can use
Clearly, this cannot be used to view C/C++ or Fortran source code.
For instance the source of the print.Date() function can be viewed:
View(function_name) - eg.
View(mean) Make sure to use uppercase [V].
View(function_name) (as stated above)
Make Hidden provides more control over your project's directory by enabling context menus that allow you to perform hide/show actions effortlessly, a view pane explorer to see hidden items and the ability to save workspaces to quickly toggle between bulk hidden items.
To hide these files from the explorer view, we need to edit the settings.json for VSCode.
Use [View.getLocationOnScreen() (hyper-link)] and/or [getLocationInWindow() (hyper-link)].
First you have to get the localVisible rectangle of the view
I was indeed trying to get the positions of the views before they had been laid out on the screen but it wasn't at all obvious that was happening.
if something is set to View.GONE or child views are added/removed.
You pass in an int array of length 2 and the values are replaced with the view's (x, y) coordinates (of the top, left corner).
You will get (0,0) if you call this method in onCreate because the view has not been laid out yet.
You can use a ViewTreeObserver to listen for when the layout is done and you can get the measured coordinates.
My utils function for get view location, it will return a Point object with x value and y value
In Kotlin we can create a simple extension for view:
and simply get absolute X by view.absX() and Y by view.absY()
You can get a View's coordinates using [getLocationOnScreen() (hyper-link)] or [getLocationInWindow() (hyper-link)]
Afterwards, x and y should be the top-left corner of the view.
NOTE: If value is always 0, you are likely changing the view immediately before requesting location.
To ensure view has had a chance to update, run your location request after the View's new layout has been calculated by using view.post:
NOTE: If value is always 0, you are likely changing the view immediately before requesting location.
To ensure view has had a chance to update, run your location request after the View's new layout has been calculated by using view.post:
For any information that is related to the view, will be available only after the view has been laid out(created) on the screen.
So to get the location put your code inside view.post(Runnable) which is called after view has been laid out, like this:
with your BigViewModel
you do: 
[code snippet]
you can create 2 additional views
Login.cshtml
[code snippet]
and register.cshtml same thing
after creation you have to render them in the main view and pass them the viewmodel/viewdata
so it could be like this:
[code snippet]
or
[code snippet]
I'd recommend using Html.RenderAction and PartialViewResults to accomplish this; it will allow you to display the same data, but each partial view would still have a single view model and removes the need for a BigViewModel
So your view contain something like the following:
The Login & Register would then be user controls residing in either the current View folder, or in the Shared folder and would like something like this:
/Views/Shared/Login.cshtml: (or /Views/MyView/Login.cshtml)
/Views/Shared/Register.cshtml: (or /Views/MyView/Register.cshtml)
And there you have a single controller action, view and view file for each action with each totally distinct and not reliant upon one another for anything.
I have explained how to use this method both in the view and controller for another example: [Two models in one view in ASP MVC 3 (hyper-link)]
In the view:
Login1 method requires to have a parameter of type RegisterViewModel and Login2 requires a parameter of type LoginViewModel.
in the controller's method for the view, a variable of type Tuple needs to be created and then passed to the view.
or you can fill the two instances of LoginViewModel and RegisterViewModel with values and then pass it to the view.
then send your model with viewbag
and in view
I want to say that my solution was like the answer provided on this stackoverflow page:   [ASP.NET MVC 4, multiple models in one view?
Consequently, "in your view just specify that you're using a collection of view models" did not work for me either.
Here is my view model in which I know I will have just one team but that team may have multiple boards (and I have a ViewModels folder within my Models folder btw, hence the namespace):
I build out the ViewModel to send to the view differently.
Then in my view I do not specify it as a list.
I just do "@model TaskBoard.Models.ViewModels.TeamBoards" Then I only need a for each when I iterate over the Team's boards.
Here is my view:
Use a view model that contains multiple view models:
In your view:
Create one new class in your model and properties of LoginViewModel and RegisterViewModel:
[code snippet]
Then use UserDefinedModel in your view.
The View:
Do I need to make another view which holds these 2 views?
Isn't there another way such as (without the BigViewModel):
Yes, you can use Tuple (brings magic in view having multiple model).
you can always pass the second object in a ViewBag or View Data.
My advice is to make a big view model:
I was using two models on the view: a form with search criteria (SearchParams model), and a grid for results, and I struggled with how to add the IEnumerable model and the other model on the same view.
SearchViewModel.cs:
SearchParamsViewModel.cs:
Here is a Chrome extension that allows you to view request-, response headers and cookies without any extra clicks right after the page is loaded.
There you can find the Header information for that request along with some other information like Preview, Response and Timing.
To view Request Headers of a particular XHR request, click on that request.
To view the request or response HTTP headers in Google Chrome, take the following steps :
Do NEVER put a ListView inside of a ScrollView!
In your case, use a LinearLayout instead of the ListView and add the elements programmatically.
you can use this code for listview in scrollview
The shortest & easiest solution for any ChildView to scroll inside a ScrollView.
Anything like ListView, RecyclerView, etc.
Just replace ScrollView with [androidx.core.widget.NestedScrollView (hyper-link)] in your current xml and then magic happens.
As others had already mentioned, don't use ListView inside a ScrollView.
To workaround, you can use a LinearLayout, but to still keep things neat - populate your LinearLayout with an Adapter, same as you do with a ListView
Use a Header View or/and Footer View on the list itself.
Don't mix a ScrollView with a ListView or anything that can scroll.
Essentially, take all the content above your ListView, put it in another .xml file as a layout and then in code inflate it and add it to the list as a header view.
That is,  create linear layout and it will have 2 childs, scrollview and another linear layout.
I had to put a ListView inside a ScrollView.
ListView with header was not an option by a number of reasons.
Neither was an option to use LinearLayout instead of ListView.
So I followed the accepted solution, but it didn't work because items in the list had complex layout with multiple rows and each listview item was of variable height.
The solution was to measure each item inside ListView Adapter's getView() method.
You can easy put ListView in ScrollView!
Just need to change height of ListView programmatically, like this:
Don't do anything in Parent ScrollView.
Only do this to child ListView.
onCreateView
This code will solve your problem if you have implemented just  a ListView in a code.
If you are using RelativeLayout as ListView child than this code return a NullPointerException here listItem.measure(0, 0);, because of RelativeLayout.And the solution is put your Relativelayout inside a LinearLayout and it will work fine.
You may solve it by adding android:fillViewport="true" to your ScrollView.
before use that property, there was only one child of my list view is visible.
The method that fixes the ListView height is closed enough, but not perfect.
I've tried many time, and when I put out the value of listItem.getMeasureHeight and listItem.getMeasuerWidth into the log, I saw the width values vary a lot, which is not expected here, since all the item in the same ListView should have the same width.
Some used measure(0 ,0), which actually made the view unbound, in both direction, and width run wild.
Some tried to getWidth of listView, but then it return 0, meaningless.
When I read further into how android render the View, I realize that all of this attempt can't reach the answer that I searched for, unless these function run after the view is render.
This time I use the getViewTreeObserver on the ListView that I want to fix height, then addOnGlobalLayoutListener.
Inside this method, I declare a new OnGlobalLayoutListener, in which, this time, getWidth return the actual width of the ListView.
The value pad, is the padding that I set in ListView layout.
You should never use a ScrollView with a ListView, because ListView takes care of its own vertical scrolling.
Most importantly, doing this defeats all of the important optimizations in ListView for dealing with large lists, since it effectively forces the ListView to display its entire list of items to fill up the infinite container supplied by ScrollView.
[http://developer.android.com/reference/android/widget/ScrollView.html (hyper-link)]
If for some reason you don't want to use addHeaderView and addFooterView, e.g.
to put it in ScrollView), you can implement an adapter fragment like this:
My requirement is to include a ListView of equally-sized items within a ScrollView.
I tried a few of the other solutions listed here, none seemed to size the ListView correctly (either too little space or too much).
I add android:fillViewport="true" on the layout xml for the scrollView.
So overall my ScrollView will be like this.
the ListView that located inside my ScrollView expand to its size again.
Here is the full example code for the ScrollView and the ListView.
You Create Custom ListView Which is non Scrollable
In Java File
Create a object of your customListview instead of ListView like : 
NonScrollListView non_scroll_list = (NonScrollListView) findViewById(R.id.lv_nonscroll_list);
found a solution for scrollview -> viewpager -> FragmentPagerAdapter -> fragment -> dynamic listview, but im not the author.
found a solution for scrollview -> viewpager -> FragmentPagerAdapter -> fragment -> dynamic listview, but im not the author.
using this ListView Worked for me
[Refer This (hyper-link)] article  for more info and also to know how to keep gridview  inside scroll view
I had a similar problem to the issue posed by the Original Poster - how to make the listview scroll inside the scrollview - and this answer solved my problem.
[Disable scrolling of a ListView contained within a ScrollView (hyper-link)]
Basically what I am doing is checking the length of the listview before I call it and when I call it I make it into that length.
The result is a listview with no scrollbar, the whole length of the listview being displayed, that scrolls with the scroll bar of the scrollview.
Just set the value of required height in a listview height attribute inside a parent scrollview.
You Create Custom ListView Which is non Scrollable
[code snippet]
Create a object of your customListview instead of ListView like :
[code snippet]
Just call this function after assign adapter to listview
It is not possible to use Scroll-view inside List-view as List-view already has scrolling property.
To use list-view inside Scroll-view you can follow these steps which worked for me :
1) Create NonScrollListView java file that disable the default scrolling property of list-view.
and code is below
[code snippet]
2) Now create xml file which which has NestedScrollView and inside this use NonScrollListView for listing your items.
This will make your entire screen to scroll with all the views.
[code snippet]


3) Now in java class i.e, home.java define NonScrollListView instead of Listview.
[code snippet]
public class home extends Fragment {
    int pos = 0;
    ViewFlipper v_flipper;
[code snippet]
Note: I used Fragments here.
Best solution is add this android:nestedScrollingEnabled="true" attribute in child scrolling for example i have inserted this attribute in my ListView that is child of ScrollView.
Add a ListViewHelper java class.
Here below is code for ListViewHelper.java
And after adding this java file, in your code wherever you are setting adapter to listview, right after that line add the code below:
onMeasure() is your opportunity to tell Android how big you want your custom view to be dependent the layout constraints provided by the parent; it is also your custom view's opportunity to learn what those layout constraints are (in case you want to behave differently in a match_parent situation than a wrap_content situation).
You should probably make your view this size.
This can also get triggered when match_parent is used, to set the size exactly to the parent view (this is layout dependent in the framework).
The contract that exists with onMeasure() is that setMeasuredDimension() MUST be called at the end with the size you would like the view to be.
This method is called by all the framework implementations, including the default implementation found in View, which is why it is safe to call super instead if that fits your use case.
Granted, because the framework does apply a default implementation, it may not be necessary for you to override this method, but you may see clipping in cases where the view space is smaller than your content if you do not, and if you lay out your custom view with wrap_content in both directions, your view may not show up at all because the framework doesn't know how large it is!
Generally, if you are overriding View and not another existing widget, it is probably a good idea to provide an implementation, even if it is as simple as something like this:
In case of an horizontal scroll view, your code will work.
If you were adding ASPNETCOMPILER to compile your Razor views in MVC, like in [this StackOverflow question (hyper-link)], then change PhysicalPath to place where Roslyn nuget package is located (usually pointed via $CscToolPath variable):
Just review your packages.config file, you can have both of them there
I had to change the WebAPI and MVC project files to not build views:
on my setup project, right clic, view > file system
The error above appears when I tried to view a cshtml in browser.
Here is code that reproduces the error:
[http://henke.atwebpages.com/SrvrErr-reproduce.zipfile (hyper-link)]
1
(Originally from
[https://github.com/aspnet/AspNetDocs/tree/master/aspnet/web-api/overview/advanced/calling-a-web-api-from-a-net-client/sample/server/ProductsApp (hyper-link)])
I was having this problem too, until I realized that I had specified the wrong layout in setContentView() of the onCreate() method of the FragmentActivity.
The id passed into FragmentTransaction.add(), in your case R.id.feedContentContainer, must be a child of the layout specified in setContentView().
I was making a transaction within onCreate(), but at this point the view tree has not been inflated so you get this same error.
So just make sure your transaction code runs after the view tree has been inflated!
I had this problem (when building my UI in code) and it was caused by my ViewPager (that showed Fragments) not having an ID set, so I simply used pager.setID(id) and then it worked.
Note that I was setting up fragments before I setContentView.
Based on howettl answer I guess that it was due to the Pager parent was not the view set in setContentView() in my FragmentActivity.
Your logcat says  "No view found for id 0x7f080011".
I encountered this problem when I tried to replace view with my fragment in onCreateView().
You have to return a view in onCreateView() so that you can replace it later
You can put any operation towards this view in the following function in fragment liftcycle, like onActivityCreated()
In BaseFragment.java OnCreateView:
Replace super.onCreateView(inflater, container, savedInstanceState); 
with inflating the correct layout for the fragment:
The core problem is what [Nick has already pointed out (hyper-link)] - view tree has not been inflated yet.
So the layout MUST have a child view.
If you use nested fragments, say a ViewPager in a Fragment with it's pages also Fragments.
When you do Fragment transaction in the inner fragment(page of ViewPager), you will need
I was facing a Nasty error when using Viewpager within Recycler View.
I started a fragment which had a RecyclerView with Viewpager (using FragmentStatePagerAdapter).
It worked well until I switched to different fragment on click of a Cell in RecyclerView, and then navigated back using Phone's hardware Back button and App crashed.
And what's funny about this was that I had two Viewpagers in same RecyclerView and both were about 5 cells away(other wasn't visible on screen, it was down).
So initially I just applied the Solution to the first Viewpager and left other one as it is (Viewpager using Fragments).
Navigating back worked fine, when first view pager was viewable .
So I had to change both the Viewpagers.
Finally instead of using FragmentStatePagerAdapter , I extended PagerAdapter and used it in Viewpager without Using fragments.
[Viewpager Without Fragments (hyper-link)]
In my case, i was using a fragment class file to declare a listview adapter class.
In my case I had a SupportMapFragment in a recycler view item (I was using the lower overhead "liteMode" which makes the map appear as non-interactive, almost like a static image).
Turned out, it was because I was injecting a dynamic SupportMapFragment inside a view, which was inside another fragment, to get around some issues I was having when trying to declare it statically in my XML.
Because of this, the fragment placeholder layout could only be replaced with the actual fragment once the view was attached to the window, i.e.
When the item goes off the top of the RecyclerView, it is detached from the window, then reattached when you scroll back to it, so this event is fired multiple times.
Once I added the null check, it happened only once per RecyclerView item and issue went away!
java.lang.IllegalArgumentException: No view found for id
look for additional calls to setContentView)
In my case, due to careless copy and pasting, I used DataBindingUtil.setContentView in my fragment, instead of DataBindingUtil.inflate, which messed up the state of the activity.
It happens also when you have two views in two fragments with the same ids
Sometimes it is because you are using a BottomNavigationView.
I clear all Fragments and set all to null in activity
but Fragment already create itself, while it host activty 
is bean set null, so before call Fragment view 
check it null
I use View Binding in my project and was inattentive to add setContentView() after inflating ActivityHelloWorldBinding class:
(autocomplete suggested this one first and I added setContentView() here)
just add viewPager.setOffscreenPageLimit( number of pages );
Add this to your viewcontroller.
I noticed that the other answers involved cutting some of the top from the view.
If you want to simply resize the view without cutting any content, just try this method :)
There's an obvious problem with offsetting your view by a static amount.
Important to note below, we're passing self.view.window in as our object parameter.
Don't forget to remove your observers before you leave the view to prevent unnecessary messages from being transmitted.
If you have two or more text-fields, you can check to see if your view.frame.origin.y is at zero.
As others have said, you need to add notification observers in your controller's viewDidLoad() method, like so:
Remember to remove your observers where appropriate (I do it in the viewWillDisappear() method)
This is important since without it, the user could tap on a field or even a scrollview and cause the shift to occur a second time, resulting in a terrible UI glitch.
I see all answers are moving the view itself by the value of the keyboard height.
Well, I have an elaborate answer, which could be useful if you are using constraints i.e autolayout, that moves a view by changing its constraint value (bottom or top constraints for example) by a predefined value or you can use keyboard size value.
In this example, I use bottom constraint from the textfield to Bottom Layout View with initial value of 175.
In your storyboard, create a bottom constraint for the View or Textfield, select the constraint (double-click it) and in the Identity Inspector, change its class from NSLayoutConstraint to KeyboardLayoutConstraint.
Such a simple solution for when you have multiple text fields and want the scroll view to move "x" amount of pixels when that specific textfield is tapped.
-Place all your textfields within a scrollview that is constrained to the edges of the view.
-Connect all the textfields and scroll view as delegates to the view controller.
-Connect all textfields and scroll view with an IBOutlet.
The second is when you tap into whatever specific textfield then setting the y offset of how far your scrollview scrolls (mine is based off of the y location on my view controllers 25,57,112,142).
The last says when you tap away from the keyboard the scrollview goes back to original location.
I made my view pixel perfect this way!
Here is my solution (actually this code is for the case when you have few textfields in your view, this works also for the case when you have one textfield)
Insert the below code 
 * To move view when textField is under keyboard,
 * Not to move view when textField is above keyboard
 * To move View based on the height of the keyboard when needed.
|::| Sometimes View wil be down,  In that case use height +/- 150 :
Use following code for view Up on UITextField Clicked
If you have 2 or more text fields on the same VC, and the user taps on one of them and then taps on the other one, without calling the function keyboardWillHide, the view is going upwards one more time, which is not necessary, because you'll have the keyboard, a blank space which has the height of the keyboard, and then the view, using the code in the answer I edited:
See example project on examples how to use it (I made two: textFields inside a scrollView, and vertically centered textFields with two basic views - login & register).
The bottom layout constraint can be of the container view, the textField itself, anything, you name it.
swift 3.0 insert in viewDidLoad(), this->
view.addSubview(Your_messageInputConteinerView)
I have a few UITextFields and want the view to move up differently depending on which textField is tapped.
Same thing with upward movement of  self.view.
For Swift 3, I made a UIViewController subclass since I needed constant behavior in all View Controllers.
I improved one of the answers a bit to make it work with different keyboards & different textviews/fields on one page:
I was having an issue with the most accepted answer, in which hiding the keyboard did not return the view all the way to the bottom of the page (only partially).
You Can Also Move Up And Down Only UITextFiled Not Whole Screen(UIView).
The validated answer doesn't take in account the textfield position and has some bug (double displacement, never come back the primary position, displacement even if the texfield is on top of the view...)
Then calculate the distance between keyboard position and textfield (if < 0 -> move up the view)
to use UIView.transform instead of UIView.frame.origin.y -= .., cause it's easier to come back to original position with UIView.transform = .identity
then we will be able to move the view only if necessary and of the specific displacement in oder to have the focused texField just over the keyboard
I've need to move a UIView in swift 4 when keyboard opens and closes.
and in viewDidLoad() :
its 100% Perfect Answer For all Guy's Update Tableview Height when open Keyboard
@Boris's solution is VERY good but the view can sometimes be corrupted.
Ie: moves the view up when the active textfield is under the keyboard and moves accordingly when the user switches to another view without closing the keyboard.
You could also use transforms, view offsets, ....
All the answers just move the view upwards.
After 4-5 hours of fight i came with a simple extension of UIViewController with simple code which works like charm
*View should not move when TextField is above the keyboard
*Works on tableview as well
Then use of this in your any ViewController
Register this Notification in func viewWillAppear(_ animated: Bool)
Deregister this Notification in func viewWillDisappear(_ animated:Bool)
[Download Demo Here (hyper-link)]
Moving origin of the view is a naive approach.
Here is the better solution: Adjust the height of the view when the keyboard appears.
In the viewDidLoad we simply subscribe to the publisher changing the views frame accordingly.
If the firstResponder is in a subview, you have to calculate the frame corresponding to the whole screen to check if they actually intersect.
This code, in viewDidLoad, creates and positions three labels how you are asking for them:
As I say, this code is much simplified with a couple of category methods in UIView, but for clarity I've done it the long way here.
The category is [here (hyper-link)] for those interested, and it has a method for evenly spacing an array of views along a particular axis.
Another approach might be to have the top and bottom labels have constraints relative to the view top and bottom, respectively, and have the middle view have top and bottom constraints relative to the first and third view, respectively.
Note that you have more control over constraints than it might seem by dragging views close to one another until guiding dashed lines appear - these indicate constraints between the two objects that will be formed instead of between the object and the superview.
I set my views on viewDidLoad:
And then, on updateViewConstrains, first I delete all constrains, then I create the views dictionary and then I calculate the space to be used between views.
Additionally you could also add two constraints to label1 - Top Space To SuperView and two constraints to label2 - Bottom Space To SuperView.
Example usage to vertically distribute 4 labels within their superview:
There are 3 views, all 20pt tall.
Using any of the suggested methods equally distributes the centers of the views and give you the illustrated layout.
Notice that the y-center of the views are spaced equally.
However, the spacing between superview and top view is 15pt, while the spacing between the subviews is just 5pt.
To have the views spaced equally these should both be 10pt, i.e.
Currently my best idea is to insert "spacing views" between the subviews and setting the heights of the spacing views to be equal.
What you do is create 'spacer views' that you have set to match heights equally.
More specifically, I have a top constraint on 'Spacer View 1' to superview with a height constraint of lower priority than 1000 and with Height Equals to all of the other 'spacer views'.
'Spacer View 4' has a bottom space constraint to superview.
Each label has a respective top and bottom constraints to its nearest 'spacer views'.
Note: Be sure you DON'T have extra top/bottom space constraints on your labels to superview; just the ones to the 'space views'.
This will be satisfiable since the top and bottom constraints are on 'Space View 1' and 'Spacer View 4' respectively.
Duh 1: I duplicated my view and merely put it in landscape mode so you could see that it worked.
Duh 2: The 'spacer views' could have been transparent.
In this case, align Label 2's X and Y to the superview so it is fixed in the center.
Then set label 1's vertical space to the superview and to label 2 to the standard, repeat for label 3.
I realize they are not absolutely 100% equally spaced between the baselines due to the difference between the standard space between labels and the standard space to the superview.
Here is a solution that will vertically center any number of subviews, even if they have unique sizes.
What you want to do is make a mid-level container, center that in the superview, then put all the subviews in the container and arrange them with respect to one another.
But crucially you also need to constrain them to the top and bottom of the container, so the container can be correctly sized and centered in the superview.
By figuring the correct height from its subviews, the container can be vertically centered.
In this example, self is the superview in which you are centering all the subviews.
It offers a few API methods for distributing views, including variants where the spacing between each view is fixed (view size varies as needed), and where the size of each view is fixed (spacing between views varies as needed).
Note that all of these are accomplished without the use of any "spacer views".
Since it's all open source, if you're interested to see how this is achieved without spacer views just take a look at the implementation.
The auto layout does not allow you to resize the spaces equally, but it does allow you to resize views equally.
Simply put some invisible views in between your fields and tell auto layout to keep them the same size.
2) Add a center x constraint from each button to the superview:
Despite what Apple's docs and Erica Sadun's excellent book (Auto Layout Demystified) say, it is possible to evenly space views without spacers.
Make constraints to align the center Y of each of your subviews to the bottom edge of the superview.
Set the multiplier of each of these constraints to 1/2n, 3/2n, 5/2n, …, n-1/2n where n is the number of subviews you are distributing.
For any number of views to be evenly spaced within a superview, simply give each an "Align Center X to superview" constraint for horizontal layout, or "Align Center Y superview" for vertical layout, and set the Multiplier to be N:p (NOTE: some have had better luck with p:N - see below)
N = total number of views, and
p = position of the view including spaces
Works for any number of views.
So, if you have 3 views to space out, it looks like this:
If "First Item" is Superview.Center, you may use p:N, while if Superview.Center is "Second Item", you may use N:p. If in doubt, just try both out... :-)
Building on Ben Dolman's answer, this distributes the views more evenly (with padding, etc):
2) Then I added a leading Space constraint to superview on all of my buttons.
4) Then the important step here is to change the second Item in the constraint relation to be the superview.Trailing instead of superview.leading.
This is key because superview.Leading is 0 and trailing in my case is 320, so 8/320 is 8 px on a 320px device, then when the superview's width changes to 640 or whatever, the views all move at a ratio relative to width of the 320px screen size.
Here I just write a solution programmatically, the three views are horizontal align, without using spacer views, but it only work when the widths of labels are known when used in storyboard.
As of iOS 9, Apple has made this very easy with the (long-awaited) [UIStackView (hyper-link)].
Just select the views you want to contain in the Interface Builder and choose Editor -> Embed In -> Stack view.
Set the appropriate width/height/margin constraints for the stack view, and make sure to set the Distribution property to 'Equal spacing':
And again, this can be done quite easily with iOS9 UIStackViews as well.
It adds four container views which are filled equally and a view is added to each stack view which is aligned in center.
But, this version of UIStackView reduces some code and looks nice.
The correct and easiest way is to use Stack Views.
Add your labels/views to the Stack View:
Select the Stack View and set Distribution to be Equal Spacing:
Add Spacing to nearest neighbor constraints to the Stack View and update frames:
Needed only for views that does not have Intrinsic Size).
Enjoy Preview:
Why dont you just create a tableView and make isScrollEnabled = false
Android has a method of chaining views together in its constraint based layout system that I wanted to mimic.
I didn't want to use StackViews because they tend to cause me more grief down the line than they save up front.
I ended up creating a solution that used UILayoutGuides placed between the views.
The function accepts a leading and trailing anchor instead of a parent view.
This allows the chain to be placed between two arbitrary views rather than distributed inside of the parent view.
Type :%!xxd to view the hex strings, the n :%!xxd -r to return to normal      editing.
Bless is GUI tool which can view, edit, seach and a lot more.
Creating a new instance of ActionView::Base gives you access to the normal view methods that your helper likely uses.
Then extending YourHelperModule mixes its methods into your object letting you view their return values.
And when you make a request and hit that part in the code, the server console will return a prompt where you can then make requests, view objects, etc.
An easy way to call a controller action from a script/console and view/manipulate the response object is:
View Helpers:
Inside any controller action or view, you can invoke the console by calling the console method.
Or in a view:
This will render a console inside your view.
Kept having to return here to look up pg_get_viewdef (how to remember that!!
View editing are now native from psql.
View definitions will show in your configured editor.
julian@assange=# \ev your_view_names
Using the function pg_get_viewdef or pg_views or information_schema.views you will always get a rewrited version of your original DDL.
If the Rule Manager rewrite your view definition your original DLL will be lost and you will able to read the only the rewrited version of your view definition.
Not all views are rewrited but if you use sub-select or joins probably your views will be rewrited.
Gut Gui enables viewing of the diffs in a well formatted colored interface, is rather light.
To view the actual file before the commit (where master is your branch), run:
The modern way to do this is to have a [ConstraintLayout (hyper-link)] and constrain the bottom of the view to the bottom of the ConstraintLayout with app:layout_constraintBottom_toBottomOf="parent"
If your views at the bottom are not shown in a relative layout then maybe the layout above it takes all the space.
In this case you can put the view, that should be at the bottom, first in your layout file and position the rest of the layout above the views with android:layout_above.
This enables the bottom view to take as much space as it needs, and the rest of the layout can fill all the rest of the screen.
In a ScrollView this doesn't work, as the RelativeLayout would then overlap whatever is in the ScrollView at the bottom of the page.
The answer above (by Janusz) is quite correct, but I personnally don't feel 100% confortable with RelativeLayouts, so I prefer to introduce a 'filler', empty TextView, like this:
for the TextView having ID as @+id/TextView i.e
I used the solution Janusz posted, but I added padding to the last View since the top part of my layout was a ScrollView.
The ScrollView will be partly hidden as it grows with content.
Using android:paddingBottom on the last View helps show all the content in the ScrollView.
You can do this with a LinearLayout or a ScrollView, too.
The only thing you need to do is to add the following view before the Views you want to align to the bottom of the screen:
This creates an empty view, filling the empty space and pushing the next views to the bottom of the screen.
First, apply android:fillViewport="true" to the ScrollView and then apply android:layout_alignParentBottom="true" to the LinearLayout.
You can just give your top child view (the TextView @+id/TextView) an attribute:
 android:layout_weight="1".
The main attribute is ndroid:gravity="bottom", let the child View on the bottom of Layout.
You can also wrap the view in a FrameLayout, then set the frame's background color and padding to what you want; however, the textview, by default has a 'transparent' background, so you'd need to change the textview's background color too.
Create an xml drawable such as /res/drawable/textlines.xml and assign this as a TextView's background property.
Then set the padding on the textview to be the thickness you want for your border.
This will make a black line on top and bottom of the TextView.
With this trick only a line is drawn so the background will be shown of the underlying view.
This is the simplest option if you want a border around a layout or view in which you can set the background.
The set background="@drawable/your_shape_drawable" on your layout/view.
Basically you have a black square under the view you want to give a border, and then give that view some padding (not margin!)
Obviously this only works properly if the view doesn't have any transparent areas.
If it does I would recommend you write a custom BorderView which only draws the border - it should only be a few dozen lines of code.
If you're wondering, it does work with adjustViewBounds=true.
However, it doesn't work if you want to have a background in an entire RelativeLayout, because there is a bug that stops you filling a RelativeLayout with a View.
You can use it on any view where you can set android:background="@drawable/...".
I forgot to mention this really simple option if you only want borders above and below your view.
You can put your view in a vertical LinearLayout (if it isn't already) and then add empty Views above and below it like this:
@color/bgcolor is the color of the background on wich you draw your view with border.
Just Add this TextView below the text where you want to add the border
So I wanted to do something slightly different: a border on the bottom ONLY, to simulate a ListView divider.
Why not just create a 1dp high view with a background color?
For the TextView or other view add:
It creates thin vertical borders on the left and right sides of the view as a result of anti-aliasing.
Create an xml drawable named /res/drawable/top_bottom_borders.xml with the code below and assign it as a TextView's background property.
Simply add Views at the top and bottom of the View
Preview -
Are you trying to view an array with memory allocated dynamically?
If not, you can view an array for C++ and C# by putting it in the watch window in the debugger, with its contents visible when you expand the array on the little (+) in the watch window by a left mouse-click.
If it's a pointer to a dynamically allocated array, to view N contents of the pointer, type "pointer, N" in the watch window of the debugger.
Then, left click on the little (+) icon that appears to view the contents.
I use the ArrayDebugView add-in for Visual Studio ([http://arraydebugview.sourceforge.net/ (hyper-link)]).
Edit July 2014: I have finally built a new Visual Studio extension to replace ArrayebugView's functionality.
If you are still having issues with a recent version of the support library, I would suggest reviewing your calls to notifyXXX (specifically, your use of notifyDataSetChanged) inside your adapter, to make sure you are adhering to the (somewhat delicate/obscure) RecyclerView.Adapter contract.
This problem is caused by RecyclerView Data modified in different thread.
There was actually a bug in RecyclerView and the support 23.1.1 still not fixed.
Then set it to RecyclerView:
Notice: The RecyclerView may be in a wrong internal state.
I got this error because I was mistakenly calling a method to remove a specific row from my recyclerview multiple times.
But ViewHolder tried to redraw some data in it's view and it started the RecyclerView measuring and recounting children count - at that moment it crashed (items list and it's size was already updated, but the adapter was not notified yet).
And set it to RecyclerView:
New answer:
Use DiffUtil for all RecyclerView updates.
This problem is caused by RecyclerView Data modified in different
  thread
My problem was that even though i clear both the array list containing the data model for the recycler view, i did not notify the adapter of that change, so it had stale data from previous model.
Which caused the confusion about the view holder position.
In my case I was changing the data previously inside a thread with mRecyclerView.post(new Runnable...) and then again later changed data in the UI thread, which caused inconsistency.
After testing I realized that this happens only when you scroll fast the RecyclerView and then you go back either with the back button or the Up button.
With this solution you just load a new Arraylist to the adapter and new adapter to recyclerView and then you finish activity.
In short, if you are using DiffUtil on a Background thread which then comes back to the Main Thread to dispatch the results to the RecylerView, then you run the chance of getting this error when multiple data updates come in short time.
My problem was that when scrolling the recycler view, sometimes the "onBindViewHolder" get called while "myCustomAddItems" method is altering the list.
Create a custom LinearLayoutManager as the following and set it to the ReyclerView
Then set RecyclerVIew Layout Manager as follow:
Then set RecyclerVIew Layout Manager as follow:
[Using DiffUtil in Android RecyclerView (hyper-link)]
My app uses Navigation components with a fragment containing my recyclerView.
When navigating away the fragment lifecycle went only through onDestroyView and upon returning it started at onCreateView.
The fix was to initialize the adapter in onCreateView.
I ran into the same problem when I have update data while the RecyclerView is scrolling.
Stop scroll our RecyclerView before update data.
Solved for me by updating the recycler view to the [last version (hyper-link)]
Padding is within the view, margin is outside.
Padding is available for all views.
Depending on the view, there may or may not be a visual difference between padding and margin.
For TextViews, on the other hand, the visual effect of padding and margin is identical.
Whether or not margin is available is determined by the container of the view, not by the view itself.
Padding is inside of a View.
Margin is outside of a View.
Padding is the space inside the border, between the border and the actual view's content.
Margins are the spaces outside the border, between the border and the other elements next to this view.
Say View X contains view Y (aka : View Y is inside View X).
-View Y with Margin=30 OR View X with Padding=30 will achieve the same result: View Y will have an offset of 30.
To make it more clear, here is a picture of padding and margin in a TextView:
Let's just suppose you have a button in a view and the size of the view is 200 by 200, and the size of the button is 50 by 50, and the button title is HT.
Now the difference between margin and padding is, you can set the margin of the button in the view, for example 20 from the left, 20 from the top, and padding will adjust the text position in the button or text view etc.
Padding
 Padding is inside of a View.For example if you give android:paddingLeft=20dp, then the items inside the view will arrange with 20dp width from left.You can also use paddingRight, paddingBottom, paddingTop which are to give padding from right, bottom and top respectively.
Margin
Margin is outside of a View.
For example if you give android:marginLeft=20dp , then the view will be arranged after 20dp from left.
In addition to all the correct answers above, one other difference is that padding increases the clickable area of a view, whereas margins do not.
For eg, see this image of my layout with an ImageView (the Android icon) where I set the paddingBotton to be 100dp (the image is the stock launcher mipmap ic_launcher).
Padding -  creates space inside the view's border.
Margin - creates space outside the view's border.
Padding is used to add a blank space between a view and its contents.
Margin is used to add a space between different views.
android:paddingStart Sets the padding at the start edge means at the left side of view
android:paddingEnd Sets the padding at the end edge means at the right side of view
android:layout_marginBottom Specifies extra space on the bottom side of this view.
android:layout_marginEnd Specifies extra space on the end side, means at the right side of this view.
android:layout_marginStart Specifies extra space on the start side, means at the left of this view.
android:layout_marginTop Specifies extra space on the top side of this view.
To view whitespace the setting is:
It also provides menu items under a View | Whitespace menu.
Try to connect IBOutlet of tab bar controller to root view in the Interface Builder instead of
I had the same error when trying to change the first  view controller that was loaded in
It turns out that I was trying to change the display of a view before it actually came on screen.
The solution was hence to move this code in the viewcontroller that was giving me trouble from
- (void)viewDidLoad
- (void)viewDidAppear:(BOOL)animated
My problem specifically was caused by making a UIAlertView show.
In your case I suggest you check out the code in the tabBarController's active view controller (as it is probably a problem in that view controller).
If that doesn't work, try to set the starting settings in the nib file instead of in code - or if you want to do it in code, try moving the code to the tabBarController's active viewcontroller's appropriate method.
Ensure your App Delegate's window and viewController outlets are hooked up:
Hold control and select the App delegate again, drag to your root view controller and select viewController.
Make sure that your "Is Initial View Controller" is correctly set for your first scene.
With my first view being MenuViewController I added:
I also had this error but unlike any of the answers previously listed mine was because i had uncommented the method 'loadView' in my newly generated controller (xcode 4.2, ios5).
It even told me that the method was for creating the view programmatically but i missed it because it looked so similar to other methods like viewDidLoad that i normally use i didn't catch it.
To solve simply remove that method if you are not programmatically creating the view hierarchy aka using nib or storyboard.
Also i had (somehow and invalid connector from a UIImageView or a ToolBar to my main UIViewController.view object)... don't think it liked that either...
I was getting this error (Applications are expected to have a root view controller at the end of application launch), and I was creating the view controllers programmatically.
Solved it by ensuring the loadView method in my root view controller was calling [super loadView].
This is assuming you have created a ViewController and wired it up with your window and App Delegate in the XIB file as well.
I was able to set the initial view controller on the summary screen of xcode.
I had a UIAlertView pop up in application:didFinishLaunchingWithOptions.
I solved it by delaying the call to the alertView to allow time for the root view controller to finishing loading.
how to add a RootViewController for iOS5
if your app didn't use a RootViewController till now,
just create one ;) by hitting File > New > New File;
select UIViewController subclass
name it RootViewController, uncheck the With XIB for user interface (assuming you already have one)
and put this code in your AppDelegate :: didFinishLaunchingWithOptions
for sure - you have to import RootViewController.h and create the variable
[here is a nice article (hyper-link)] about the RootViewController and the AppDelegate,
create empty project, then create a UIViewController, and then Create a separate nib file).
After putting ALL the lines I used to, and ensuring I had the correct connections, I kept getting that error, and the nib file I was trying to load through the view controller (which was set as the rootController) never showed in the simulator.
I created a single view template through Xcode and compared it to my code and FINALLY found the problem!
Xcode 4.3 appears to add by default the method -(void)loadView; to the view controller implementation section.
The comment indicated to override loadView method if creating a view programmatically (and I'm paraphrasing), otherwise NOT to override loadView if using a nib.
The SOLUTION was to either completely remove the loadView method from the implementation section, or to call the parent method by adding [super loadView].
It turns out I was in IB attaching File Owner to a new small ImageView I'd dragged onto the View.
I hadn't called it an IBOutlet in the .h file, so when I ctrl-dragged to it, the new Imageview wasn't listed as a possible connection.
The only possibility displayed in the little black box was View.
The fix was reconnecting File Owner to the bottom View in the xib - IB screen.
Assigning my storyboard InitialViewController to my window's rootViewController.
Finally I decided to see what would happen in Xcode 4.5 (preview/iPhone 6.0 build) and the message is no longer there.
I needed a new section within the tab bar controller, so I created a new view controller and xib.
Once I added the new view controller to the tab bar controller, none of my on-screen controls worked anymore, and I got the "expected to have a root view controller" log.
Somehow the top-level object in the new xib was UIWindow instead of UIView.
When I dropped a UIView into the XIB, had the view outlet point to it, moved all the subviews into the new UIView, and removed the UIWindow instance, the problem was fixed.
I was migrating an old EAGLView sample project to the new GLKView sample project in Xcode 4 and none of the solutions worked for me.
Finally I realized that I was trying to set the main GLKViewController's self.view to point to a nested GLKView in Interface Builder.
When I pointed the self.view back to the root GLKView in Interface Builder, my app was then able to launch without an error message (so make sure your view controller's view is set to the root view).
if you want to get a nested GLKView working, create a new member variable like self.glkSubview in ViewController.h and drag its connection to the nested GLKView in Interface Builder.
Then make sure to drag self.glkSubview's delegate to File's Owner.
You must manually call [self.glkSubview display] in "- (void)glkView:(GLKView *)view drawInRect:(CGRect)rect" if you have setNeedsDisplay turned off for the GLKView.
Since I wanted to support a different controller view XIB for iPhone 5, it is easier to choose the right XIB programatically when the App Delegate is created.
I had to request an expedited review for the bugfix.
Another sympthom is that sometimes a white block, like a blank UIView, was sometimes appearing when Settings were changed and app was put in foreground.
There was a slight change around iOS 5.0 or so, requiring you to have a root view controller.
If your code is based off older sample code, such as [GLES2Sample (hyper-link)], then no root view controller was created in those code samples.
To fix (that GLES2Sample, for instance), right in applicationDidFinishLaunching, I create a root view controller and attach my glView to it.
In my case the log display was due to the fact I was assigning the application root view controller in another sub-thread.
By moving the rootViewController assignment to the end of the function - just before the call to makeKeyAndVisible: - causes the log message not to be displayed again.
Therefore, in applicationDidBecomeActive: I was manipulating view controllers that hadn't finished all their setup yet (waiting for different threads to respond, etc).
Moving setRootViewController: from didFinishLaunchingWithOptions: to awakeFromNib: solved this in my empty project.
If your app replaces the main UIWindow with FingerTipWindow (to show touches on a projector) and you haven't updated your sources for a few (several) years, your replacement object might not include a rootViewController property (see kgn's 5/21/2013 mod at [GitHub (hyper-link)])
You can set window.rootViewController in didFinishLaunchingWithOptions until the cows come home, but your window will not report one "at end of application launch" and will throw an exception at runtime.
In this instance, the TextView would be drawn on top of the ImageView, along the bottom center of the image.
[http://developer.android.com/reference/android/view/View.html#bringToFront%28%29 (hyper-link)]
You can use view.setZ(float) starting from API level 21.
An alternative is to change the order in which the views are drawn by the parent.
You can enable this feature from ViewGroup by calling [setChildrenDrawingOrderEnabled(true) (hyper-link)] and overriding [getChildDrawingOrder(int childCount, int i) (hyper-link)].
I solved the same problem by add android:elevation="1dp" to which view you want it over another.
If you are adding the View programmatically, you can use yourLayout.addView(view, 1);
I use this, if you want only one view to be bring to front when needed:
containerView is container of views to be sorted, topView is view which i want to have as top most in container.
for multiple views to arrange is about to use setChildrenDrawingOrderEnabled(true) and overriding getChildDrawingOrder(int childCount, int i) as mentioned above.
iOS 4 introduced the rootViewController property on UIWindow:
You'll need to set it yourself after you create the view controller though.
_topMostController(UIViewController *cont) is a helper function.
Now all you need to do is call topMostController() and the top most UIViewController should be returned!
I recently got this situation in one my project, which required to displayed a notification view whatever the controller displayed was and whatever was the type (UINavigationController, classic controller or custom view controller), when network status changed.
To complete JonasG's [answer (hyper-link)] (who left out tab bar controllers while traversing), here is my version of returning the currently visible view controller:
This works great for finding the top viewController [1 (hyper-link)] from any root view controlle
To complete Eric's [answer (hyper-link)] (who left out popovers, navigation controllers, tabbarcontrollers, view controllers added as subviews to some other view controllers while traversing), here is my version of returning the currently visible view controller:
And now all you need to do to get top most view controller is call the above method as follows:
Not sure if this will help what you're trying to accomplish by finding the topmost view controller, but I was trying to present a new view controller, but if my root view controller already had a modal dialog, it would be blocked, so I would cycle to the top of all modal view controllers using this code:
you could find the top most view controller by using
This answer includes childViewControllers and maintains a clean and readable implementation.
If you are trying to utilize this method after tapping something in an alert view for example, the keyWindow will actually be the alert's window, and that will cause problems for you no doubt.
Feel free to mix this with whatever flavor of retrieving the top view controller you like from the other answers on this question.
Thanks to @Stakenborg for pointing out the way to skip getting UIAlertView as the top most controller
Getting top most view controller for Swift using extensions
[Get the UIViewController associated with that first responder (hyper-link)].
To avoid a lot of complexity I keep track of the current viewController by  creating a viewController in the delegate and set it to self inside each viewDidLoad method, this way anytime you load a new view the ViewController held in the delegate will correspond to that view's viewController.
I think the solution from Rajesh is nearly perfect, but I think it is better traverse subviews from top to bottom, I changed to the following:
Below two function can help to find the topViewController on Stack of view controllers.
You may need customization later, but for this code is awesome to understand the concept of topViewController or stack of viewControllers.
You can use [viewController Class] method to find out the type of class of a viewController.
The view controller is presenting another view
The view controller is a UINavigationController
The view controller is a UITabBarController
It takes in consideration:
UINavigationController
UIPageViewController
UITabBarController
And the topmost presented view controller from the top view controller
I think most of the answers have completely ignored UINavigationViewController, so I handled this use case with following implementation.
Perhaps it is better to pass the parent viewController into the function that is using the viewController.
If you are fishing around in the view hierarchy to find the top view controller that it is probably violating separation of the Model layer and UI layer and is a code smell.
Just pointing this out, I did the same, then realized it was much simpler just to pass it in to function, by having the model operation return to the UI layer where I have a reference to the view controller.
A concise yet comprehensive solution in Swift 4.2, takes into account UINavigationControllers, UITabBarControllers, presented and child view controllers:
My issue was a bit different I an using SWRevealViewController in my application.
I used Yuchen Zhong's [answer (hyper-link)] but it always return topViewController as SWRevealViewController.
For those who are using SWRevealViewController or some other pod to develop sideMenu.
Use below extension to grab current visible UIViewController.
By default, ASP.NET MVC checks first in \Views\[Controller_Dir]\, but after that, if it doesn't find the view, it checks in \Views\Shared.
The shared directory is there specifically to share Views across multiple controllers.
Just add your View to the Shared subdirectory and you're good to go.
If you do return View("~/Views/Wherever/SomeDir/MyView.aspx") You can return any View you'd like.
Here's a method to stick a blank view in as header and footer.
Moreover, it makes sense to me that having any custom footer on a table view would necessarily have to stop drawing row separators for blank rows below it.
For reference, I looked at tables where there were more rows than could be viewed on screen, and then for a table with two rows.
Perhaps your custom views were not actually added.
I was using a table view to show a fixed number of fixed height rows, so I simply resized it and made it non-scrollable.
Just drag a UIView to the table.
Add to the table view controller...
or even simpler - where you set up your tableview, add this line:
Just add an view with the desired separator color as background color, 100% width,  1px height at the position x0 y-1 to your tableViewCell.
Make sure the tableViewCell doesn't clip subviews, instead the tableView should.
I know this Question has be accepted answer but i put here different ways for how to hide Extra separator line of UITableView.
You can hide tableView's standard separator line, and add your custom line at the top of each cell.
The easiest way to add custom separator is to add simple UIView of 1px height:
Simply drag a UIView into your UITableView as the footer.
Set the footer view's height to 0.
Removing extra separator lines for empty rows in UITableView in Swift
If you are using Swift, add the following code to viewDidLoad of the controller that manages the tableview:
if you are sub-classing the UITableView you need to do this...
However, there was no effect on my tableView - I believe it may have something to do with the fact that I was using UITableViewController.
Instead, I only had to override the viewForFooterInSection method (I did not set the tableFooterView elsewhere):
This worked fine for a tableView with a single section (if you have multiple sections, you need to specify the last one).
In case you have a searchbar in your view (to limit the number of results for example), you have to also add the following in shouldReloadTableForSearchString and shouldReloadTableForSearchScope:
uitableview extra separator line hide extra separators lines hide in swift 3.0
I just add this line at the ViewDidLoad function and problem fixed.
In your UITableViewDelegate:
There is a better approach: add a 1 point line at the end of the table view as the footer and the empty cells will also not been shown anymore.
If you want to remove unwanted space in UITableview you can use below two methods
To eliminate extra separator lines from bottom of UItableview programmatically, just write down following two lines of code and it will remove extra separator from it.
If you have only one section, then the quickest and easiest way is to just set the Table View Style from "Plain" to "Grouped".
If you have more sections, and don't want to mess with the headers (even if it is just one line in the simplest case), then you need to set a UIView as a footer, as it was explained in the previous answers)
UIKit does not create empty cell when the tableView has a tableFooterView.
So we can make a trick and assign a zero height UIView object as footer of the tableView.
In Swift (I'm using 4.0), you can accomplish this by creating a custom UITableViewCell class, and overriding the setSelected method.
(my main class with the table view has a clear background) color.
I have added this small tableview extension that helps throughout
Most of them around manipulation with  UITableView's tableFooterView attribute and this is proper way to hide empty rows.
Use [getView() (hyper-link)] or the View parameter from implementing the  onViewCreated method.
It returns the root view for the fragment (the one returned by onCreateView() method).
With this you can call findViewById().
As getView() works only after onCreateView(), you can't use it inside onCreate() or onCreateView() methods of the fragment .
You need to inflate the Fragment's view and call findViewById() on the View it returns.
Get first the fragment view and then get from this view your ImageView.
You can override onViewCreated() which is called right after all views had been inflated.
It's the right place to fill in your Fragment's member View variables.
The question is not clear what is required of imageView - are we passing it back as the view, or merely saving a reference for later?
Either way, if the ImageView is coming from the inflated layout, the correct way to do this would be:
agreed with calling findViewById() on the View.
Using getView() returns the view of the fragment, then you can call findViewById() to access any view element in the fragment view.
Inside Fragment class you will get [onViewCreated() (hyper-link)] override method where you should always initialize your views as in this method you get view object using which you can find your views like :
Always remember in case of Fragment that onViewCreated() method will not called automatically if you are returning null or super.onCreateView() from onCreateView() method.
Note: you can get the fragment view anywhere in the class by using getView() once onCreateView() has been executed successfully.
The method getView() wont work on fragments outside OnCreate and similar methods.
You have two ways, pass the view to the function on the oncreate (what means you can only run your functions when the view is being created) or set the view as a variable:
You can call findViewById() with the Activity Object you get inside your public void onAttach(Activity activity) method inside your Fragment.
Finally execute every findViewById through the vairable:
mainActivity.findViewById(R.id.TextView);
In this way, the rootView can be used for each control defined in the xml layout and the code is much cleaner in this way.
getView() will give the root view
Use gradle [skeleton plugin (hyper-link)], it will automatically generate the view holder classes with the reference to your layout.
Now assuming you had an ImageView declared in your my_layout.xml file, it will automatically generate myLayout class for you.
I got the same issue (View in a  Fragment could not be reached).
The reason turned out to be, that - immediately after (FragmentTransaction).commit() -, the  View had not been activated in the UI.
After that, referencing the View works as expected !
Inside onCreateView method
1) first you have to inflate the layout/view you want to add
eg.
2) Then you can find your imageView id from layout
There is one more method called onViewCreated.
2)Then, get the id of your view
You have to inflate the view
Notice if you use getView() method it might cause nullPointerException because it returns the rootview and it will be some view after onCreateView() method.
In fragments we need a view of that window so that we make a onCreateView of this Fragment.
Then get the view and use it to access each and every view id of that view elements..
Layout inflater is a class that make us able to use the XML views in java code.
So you can inflate the root xml view in variable v with the following code.
And then using v, you can find the child views of the root view v.
From API Level 26, you also don't need to specifically cast the result of findViewById as it uses inference for its return type.
1) first inflate layout of Fragment then you can  use findviewbyId .
getView() works only after onCreateView() completed, so invoke it from onPostCreate():
Inside Fragment class we get onViewCreated() override method where we should always initialize our views because in this method we get view object.
Using this object we can find our views like below:
First initialize view
Then override OnViewCreated
Then add a void method to find views
When I view the Application tab of the extension's background page, and expand Storage > Local Storage, I see my extension listed, but clicking on it shows no data.
On your adapter's getItemViewType check if the adapter has 0 elements and return a different viewType if so.
Then on your onCreateViewHolder check if the viewType is the one you returned earlier and inflate a diferent view.
In this case a layout file with that TextView
If this is still not working then you might want to set the size of the view programatically like this:
And then when you inflate your view call:
On the same layout where is defined the RecyclerView, add the TextView:
At the onCreate or the appropriate callback you check if the dataset that feeds your RecyclerView is empty.
If the dataset is empty, the RecyclerView is empty too.
For my projects I made this solution (RecyclerView with setEmptyView method):
And you should use it instead of RecyclerView class:
I use ViewSwitcher
in code you will check cursor/dataset and switch views.
I added RecyclerView and alternative ImageView to the RelativeLayout:
Here is a solution using only a custom adapter with a different view type for the empty situation.
Instead of using a custom RecyclerView, extending an AdapterDataObserver is a simpler solution that allows setting a custom View that is displayed when there are no items in the list:
Here is my class for show empty view, retry view (when load api failed) and loading progress for RecyclerView
The source is here [https://github.com/PhanVanLinh/AndroidRecyclerViewWithLoadingEmptyAndRetry (hyper-link)]
Use AdapterDataObserver in custom RecyclerView
RecyclerViewEnum.kt
RecyclerViewEmptyLoadingSupport.kt
One more way is to use addOnChildAttachStateChangeListener which handles appearing/disappearing child views in RecyclerView.
if you want to display a text view when the recycler view is empty you can do it like this :
I Assume you have TextView
The simplest solution is to use RecyclerView.AdapterDataObserver and register it in your recyclerview after your adapter is initialized.
Where, recycler_view & empty_data_parent are layouts in your activity, constraint those views as you want and make its visibility GONE.
Then create your own empty dataset view with image & text.
Here's an example of empty_data_set_view.xml
This how to show empty view while filtering and updating RecyclerView using LiveData
enable "Show Emulation view in console drawer"
As of Chrome 48+, you can access the print preview via the following steps:
Go to "File >> Print" and you should see the view you want printing.
How to get the "screen" view to print: When the Rendering window shows up at the bottom of the screen, Emulate CSS Media section and choose: "Screen" from the dropdown.
Next release of ASP.NET MVC (available in January or so) should have MSBuild task that compiles views, so you might want to wait.
Currently, errors within a view file are not detected until run time.
To let you detect these errors at compile time, ASP.NET MVC projects now include an MvcBuildViews property, which is disabled by default.
To enable this property, open the project file and set the MvcBuildViews property to true, as shown in the following example:
You can update projects that were created with previous releases of MVC to include build-time validation of views by performing the following steps:
Add the following element under the top-most <PropertyGroup> element:
<MvcBuildViews>true</MvcBuildViews>
The simple solution worked for MVC1 but on upgrading to MVC2 the views were no longer being compliled.
See this: [http://haacked.com/archive/2011/05/09/compiling-mvc-views-in-a-build-environment.aspx (hyper-link)]
That way your views have a .designer.cs file generated when you save them and on top of getting compile time errors for you views, they are also precompiled into the assembly (= faster warmup) and Resharper provides some additional help as well.
With MVC views, any compile-time errors will still be underlined in red in their respective .cs files, but signaling these errors is not propagated upwards in the Solution Explorer (in no way, even not in the containing source file).
Hidden views, even though they don't draw, still participate in Auto Layout and usually retain their frames, leaving other related views in their places.
When removing a view from its superview, all related constraints are also removed from that view hierarchy.
If you set your left view to be hidden, the labels stay in place, since that left view is still taking up space (even though it's not visible).
If you remove your left view, your labels will probably be left ambiguously constrained, since you no longer have constraints for your labels' left edges.
Leave your existing constraints (10pts space to the other view) alone, but add another constraint: make your labels' left edges 10pts away from their superview's left edge with a non-required priority (the default high priority will probably work well).
Then, when you want them to move left, remove the left view altogether.
The mandatory 10pt constraint to the left view will disappear along with the view it relates to, and you'll be left with just a high-priority constraint that the labels be 10pts away from their superview.
On the next layout pass, this should cause them to expand left until they fill the width of the superview but for your spacing around the edges.
One important caveat: if you ever want your left view back in the picture, not only do you have to add it back into the view hierarchy, but you also have to reestablish all its constraints at the same time.
This means you need a way to put your 10pt spacing constraint between the view and its labels back whenever that view is shown again.
connect constraint between uiview and labels as IBOutlet and set priority member to a less value when set hidden = YES
For the view you wish to hide, set up a width constraint.
Constrain the other views with a leading horizontal gap to that view.
The other views will automatically move left to assume position.
This idea could be expanded for any scenario with containing views.
One with the left view and one without it.
They use the same UITableViewCell class.
The upside is that I don't have a bunch of code to manually manage removing view, updating constraints, etc.
This was much easier for me because I had more than one blocking view which would have to be removed.
I have to thank Tim for his [answer above (hyper-link)], this [answer about UIScrollView (hyper-link)] and also this [tutorial (hyper-link)].
UIStackView (iOS 9+)

One more option is to wrap your views in UIStackView.
Once view is hidden UIStackView will update layout automatically
To show the view (with the subviews) again I did the opposite: I set the height constant to a non-zero value and set the hidden property to NO.
UIStackView repositions its views automatically when the hidden property is changed on any of its subviews (iOS 9+).
Use two UIStackView Horizontal and Vertical, when some subview view in stack is hidden other stack subviews will be moved, use Distribution -> Fill Proporionally for Vertical stack with two UILabels and need set width and height constaints for first UIView[ (hyper-link)]
Here's how I would re-align my uiviews to get your solution:
Drag drop one UIImageView and place it to the left.
Drag drop one UIView and place it to the right of UIImageView.
Drag drop two UILabels inside that UIView whose leading and trailing constraints are zero.
Set the leading constraint of UIView containing 2 labels to superview instead of UIImagView.
IF UIImageView is hidden, set the leading constraint constant to 10 px to superview.
ELSE, set the leading constraint constant to 10 px + UIImageView.width + 10 px.
Whenever you have to hide / show any uiview whose constraints might be affected, add all the affected / dependent subviews inside a uiview and update its leading / trailing / top / bottom constraint constant programmatically.
Coming from Android, in this platform you have an handy method isVisible to hide it from the view but also not have the frame considered when the autolayout draw the view.
using extension and "extend" uiview you could do a similar function in ios (not sure why it is not in UIKit already) here an implementation in swift 3:
I have one View on ViewController in that added other three views, When any view is hidden other two view will move,Follow below steps.
1.ViewController.h File
2.ViewController.m
I will use horizontal stackview.
It can remove the frame when the subview is hidden.
In image below, the red view is the actual container for your content and has 10pt trailing space to orange superview (ShowHideView), then just connect ShowHideView to IBOutlet and show/hide/remove it programatically.
This is when the view is visible/installed.
This is when the view is hidden/not-installed.
create container view (orange) and set width.
create content view (red) and set trailing space 10pt to superview (orange).
Set orange view's width to 0 to hide the view.
The easiest solution is to use UIStackView (horizontal).
Add to stack view: first view and second view with labels.
Then set isHidden property of first view to false.
Just use UIStackView and everything will be work fine.
No need to worry about other constraint, UIStackView will handle the space automatically.
Instead of hiding view, create the width constrain and change it to 0 in code when you want to hide the UIView.
Also, it will preserve the view and you don't need to recreate it if you want to show it again (ideal to use inside table cells).
To change the constant value you need to create a constant reference outlet (the same way as you do outlets for the view).
For this specific layout the constraint to be working with is the 'leading' constraint on the view that is being hidden.
1: Setup all your constraints how you want it to look when all views are visible.
2: Add a second 'leading' constraint to the view you want to hide.
This will move the view you want to hide off the leading edge of its parent shifting it out of the way.
5: Toggling the new constraint's isActive value will now toggle if it's in the view or outside it.
Bonus: You can adjust the 'constant' value of the new hider-constraint in order to alter the padding/margin to use when the view is hidden.
Since the introduction of ListView, onItemClickListener has been problematic.
Given that RecyclerView takes it a step further and doesn't have a concept of a row/column, but rather an arbitrarily laid out amount of children, they have delegated the onClick to each one of them, or to programmer implementation.
Think of Recyclerview not as a ListView 1:1 replacement but rather as a more flexible component for complex use cases.
Now you have an adapter who can delegate onClick to an interface passed on the constructor, which is the correct pattern for both ListView and Recyclerview.
Now look into that last piece of code: onCreateViewHolder(ViewGroup parent, int viewType) the signature already suggest different view types.
For each one of them you'll require a different viewholder too, and subsequently each one of them can have a different set of clicks.
Or you can just create a generic viewholder that takes any view and one onClickListener and applies accordingly.
It is a really needed component and fairly close to what our internal implementations and improvements to ListView were until now.
> How RecyclerView is different from Listview?
One difference is that there is LayoutManager class with RecyclerView by which you can manage your RecyclerView like-
Like for horizontal scrolling for RecyclerView-
[Cursor - RecyclerView (hyper-link)]
[ViewHolder types (hyper-link)]
[code snippet]
I think it's a good solution to handle the onClick() in the ViewHolder class constructor and pass it to the parent class via OnItemClickListener interface.
I use this method to start an Intent from RecyclerView:
Android Recyclerview With onItemClickListener,
 Why we cant try this is working like ListView only.
And Set this to RecyclerView:
Instead of implementing interface View.OnClickListener inside view holder or creating and interface and implementing interface in your activity..
If you want to add onClick() to the child view of items, for example, a button in item, I found that you can do it easily in onCreateViewHolder() of your own RecyclerView.Adapter just like this:
Just add 1 Line for Clicked RecyclerView position:
Full code for ViewHolder class:
In your ViewHolder, implement onClickListener and create a class member to temporarily store the POJO the view is presenting, that way (this is an example, creating a setter would be better):
Back in your adapter, set the current POJO when the ViewHolder is bound (or to null if the current view doesn't have one):
The RecyclerView is a toolbox, in contrast of the old ListView it has less build in features and more flexibility.
The onItemClickListener is not the only feature being removed from ListView.
In my opinion the most complex feature removed in RecyclerView is the Fast Scroll.
If you want to know what other cool features RecyclerView added read [this (hyper-link)] answer to another question.
This solution has been [proposed (hyper-link)] by Hugo Visser, an Android GDE, right after RecyclerView was released.
It showcase some of the versatility introduced with RecyclerView by making use of RecyclerView.OnChildAttachStateChangeListener.
Sometimes you do not want all the items of the RecyclerView to be clickable.
To handle this I've introduced the ItemClickSupportViewHolder interface that you can use on your ViewHolder to control which item is clickable.
This class works by attaching a RecyclerView.OnChildAttachStateChangeListener to the RecyclerView.
This listener is notified every time a child is attached or detached from the RecyclerView.
The code use this to append a tap/long click listener to the view.
That listener ask the RecyclerView for the RecyclerView.ViewHolder which contains the position.
This is more efficient then other solutions because it avoid creating multiple listeners for each view and keep destroying and creating them while the RecyclerView is being scrolled.
Keep in mind that it's COMPLETELY fine to handle it in your adapter by setting on each view of your list a click listener, like other answer proposed.
It's just not the most efficient thing to do (you create a new listener every time you reuse a view) but it works and in most cases it's not an issue.
use [PlaceHolderView (hyper-link)]
I wrote a library to handle android recycler view item click event.
RecyclerViewHolder Class
Access the mainView of rowLayout(cell) for you RecyclerView and in your OnBindViewHolder write this code:
Then set the OnClickListener within the onBindViewHolder method:
Inside View Holder
Inside OnBindViewHolder()
recyclerview animation has not been tested, the other is normal.
RecyclerView doesn't have an onItemClickListener because RecyclerView is responsible for recycling views (surprise!
), so it's the responsibility of the view that is recycled to handle the click events it receives.
Anyways, detecting click on a RecyclerView item is very easy.
A view bound was a mechanism introduced in Scala to enable the use of some type A as if it were some type B.
The most common usage of view bounds in the standard library (before Scala 2.8.0, anyway), is with Ordered, like this:
Please be aware that [view bounds are deprecated (hyper-link)], you should avoid them.
While a view bound can be used with simple types (for example, A <% String), a context bound requires a parameterized type, such as Ordered[A] above, but unlike String.
A context bound describes an implicit value, instead of view bound's implicit conversion.
This is more confusing than the view bound because it is not immediately clear how to use it.
It shouldn't be surprising that both view bounds and context bounds are implemented with implicit parameters, given their definition.
View bounds are used mostly to take advantage of the pimp my library pattern, through which one "adds" methods to an existing class, in situations where you want to return the original type somehow.
If you do not need to return that type in any way, then you do not need a view bound.
The classic example of view bound usage is handling Ordered.
The example previously given needs a view bound because it returns the non-converted type:
This example won't work without view bounds.
However, if I were to return another type, then I don't need a view bound anymore:
If one tried to do this without view bounds, the return type of a String would be a WrappedString (Scala 2.8), and similarly for Array.
The context bound with the typeclass pattern is much more likely to be used by your own classes, as they enable separation of concerns, whereas view bounds can be avoided in your own code by good design (it is used mostly to get around someone else's design).
Switch back to your html file (in this example it's "text.html"), and press ctrl + shift + b to view your page in your Web Browser.
To run this task, open the html file you want to view, press F1, type task opera and press enter
EDIT: also you don't need -incognito nor -private-window...it's just me I like to view it in a private window
alternatively you can hit Ctrl + shift + P to open command window and select "View in Browser".
Switch back to your html file and press Command + Shift + b to view your page in Chrome.
You can now install an extension [View In Browser (hyper-link)].
If you are happy with html only viewer, then there is no need for you to come back to the original state.
Wonder why vscode is not having html viewer option by default, when it is able to dispaly the html file in the markdown mode.
FileVirtualPath --> Research\Global Office Review.pdf
To view file (txt for example):
unbound prefix error for ViewPager Indicator:
in a layout file without installing the nuget package for android.support.v7.widget.CardView
Adding on to Zev's answer (and switching back to Objective-C), you could run into a situation where your root view controller is presenting some other VC via a segue or something else.
Calling presentedViewController on the root VC will take care of this:
You can send the current view or controller as a parameter:
You can try to implement a category on UIViewController with mehtod like 
- (void)presentErrorMessage; And and inside that method you implement UIAlertController and then present it on self.
[myViewController presentErrorMessage];
In that way you'll avoid unneccessary parametrs and warnings about view not being in window hierarchy.
Just use a plain UIViewController instance as the rootViewController of the new window.
(window.rootViewController = UIViewController())
Present your UIAlertController on your window's rootViewController
He said that internally Apple is creating a UIWindow with a transparent UIViewController and then presenting the UIAlertController on it.
I now use the below code in my main UIViewController subclass.
One small alteration i made was to check to see if the best presentation controller is not a plain UIViewController.
-Use UIAlertView or 'UIActionSheet' instead (not recommended, cause it deprecated in iOS 8 but it works now)
-Somehow remember the last view controller which is presented.
This works in Swift for normal view controllers and even if there is a navigation controller on the screen:
Improving on [agilityvision's answer (hyper-link)], you'll need to create a window with a transparent root view controller and present the alert view from there.
Now that UIViewController is part of the responder chain, you can do something like this:
To reach queueing behaviour like in good old UIAlertViews (avoid alert windows overlap), use this block to observe window level availability:
Same method can be used to separate and put in queue view controllers for any number of window layers.
Warning: Attempt to present  on  whose view is not in the window hierarchy!
NOTE: You'll also need to make sure your helper class extends UIViewController
One thing to note is that if there's a UIAlertController currently being displayed, UIApplication.topMostViewController will return a UIAlertController.
(UIApplication.topMostViewController is UIAlertController) before presenting, or add an else if case to return nil if self is UIAlertController
This is because the windows rootViewController is not at the top of the presented views.
The top voted method by agilityvision, however, does not: the alert view presented in a newly minted UIWindow is below the keyboard and potentially prevents the user from tapping its buttons.
First of all I extend UIWindow to find it's visibleViewController.
After getting top most view controller it's easy to present UIAlertController just like UIAlertView.
You can create a UIViewController subclass to encapsulate the window memory management logic:
It works on iPad, in UITabBarController views, in UINavigationController, en when presenting modals.
The parent container will shrink to fit the available space, so it is likely that your content should be inside of a scolling view to prevent (depending on the phone manufacturer and the layout choosen...)
In my case, the reason the buttons got pushed up was because the view above them was a ScrollView, and it got collapsed with the buttons pushed up above the keyboard no matter what value of android:windowSoftInputMode I was setting.
I was able to avoid my bottom row of buttons getting pushed up by the soft keyboard by setting android:isScrollContainer="false" on the ScrollView that sits above the buttons.
So far the answers didn't help me as I have a button and a textInput field (side by side) below the textView which kept getting hidden by the keyboard, but this has solved my issue:
For Scroll View:
It may be affected because when the keyboard appears, it will be into a scroll view and if your button/any objects  is not in your scroll view then the objects will follow the keyboard and move its position.
Check out your xml where your button is and make sure it is under your scroll View bracket and not out of it.
From a fragment or activity, hide your other views (that aren't needed while the keyboard is up), then restore them to solve this problem:
or you can add this code Window.SetSoftInputMode(Android.Views.SoftInput.AdjustNothing) to the OnCreate method of MainActivity class.
Well i have watched these answers but in my case i fell into the same issue and got refuge through a very handy and easiest solution that involves putting a very small innocent attribute in your Scrollview tag residing in your xml file.
When you want to hide view when open keyboard.
and making the Recyclerviews constraint  isScrollContainer to false .
Some of the solutions worked however some of my views where still being pushed up while others weren't...
You can use git log -L to view the evolution of a range of lines.
Start a blame viewer on the specified file on the given version (or working directory if not specified).
Files selected through the browser are opened in the blame viewer.
When I want to see a snapshot of a table(s), and/or view (in a read-only way)
A view is an encapsulation of a query.
Queries that are turned into views tend to be complicated and as such saving them as a view for reuse can be advantageous.
We used a view to bring all of the SomeColumns together and put it in the view, which worked out nicely.
If the business objects had to change I don't think this would have been a viable solution, but views definitely function as a good mid point.
You can create a view that only includes the columns they need access to and then grant them access on the view.
I usually create views to de-normalize and/or aggregate data frequently used for reporting purposes.
By way of elaboration, if I were to have a database in which some of the entities were person, company, role, owner type, order, order detail, address and phone, where the person table stored both employees and contacts and the address and phone tables stored phone numbers for both persons and companies, and the development team were tasked with generating reports (or making reporting data accessible to non-developers) such as sales by employee, or sales by customer, or sales by region, sales by month, customers by state, etc I would create a set of views that de-normalized the relationships between the database entities so that a more integrated view (no pun intended) of the real world entities was available.
indexing on Schemabound views
in MSSQL)
Several reasons:
If you have complicated joins, it is sometimes best to have a view so that any access will always have the joins correct and the developers don;t have to remember all the tables they might need.
If you have users you want to limit the records they can ever see, you can use a view, give them access only to the view not the underlying tables and then query the view
Crystal reports seems to prefer to use views to stored procs, so people who do a lot of report writing tend to use a lot of views
Views are also very useful when refactoring databases.
You can often hide the change so that the old code doesn't see it by creating a view.
Admin users can have privs on the actual table, but users that you don't want to have access to say the SSN, you create a view as
Then give them privs to access the view and not the table.
I like to use views over stored procedures when I am only running a query.
Views can also simplify security, can be used to ease inserts/updates to multiple tables, and can be used to snapshot/materialize data (run a long-running query, and keep the results cached).
I've used materialized views for run longing queries that are not required to be kept accurate in real time.
Grant no permissions on the main table and create views that limits column or row access and grant permissions to users to see the view.
Join together some tables that you use together all the time in the view.
A view provides several benefits.
Views can hide complexity
If you have a query that requires joining several tables, or has complex logic or calculations, you can code all that logic into a view, then select from the view just like you would a table.
Views can be used as a security mechanism
A view can select certain columns and/or rows from a table (or tables), and permissions set on the view instead of the underlying tables.
Views can simplify supporting legacy code
If you need to refactor a table that would break a lot of code, you can replace the table with a view of the same name.
The view provides the exact same schema as the original table, while the actual schema has changed.
These are just some of the many examples of how views can be useful.
Views can be a godsend when when doing reporting on legacy databases.
Views also break down very complex configuration and tables into managable chunks that are easily queried against.
In our database, our entire table managment system is broken down into views from one large table.
This doesn't answer your question exactly but I thought it would be worth mentioning Materialized Views.
Handling lots of XMLTypes and running XPaths across large number of rows has a large impact on performance so we use a form of materialized views to extract the desired XML nodes out into a relational table anytime the base table changes.
This effectively provides a physical snapshot of the query at a point in time as opposed to standard views which would run their query on demand.
I see a stored procedure more as a method I can call against my data, whereas to me a view provides a mechanism to create a synthetic version of the base data against which queries or stored procedures can be created.
I'll create a view when simplification or aggregation makes sense.
The one major advantage of a view over a stored procedure is that you can use a view just like you use a table.
Namely, a view can be referred to directly in the FROM clause of a query.
E.g., SELECT * FROM dbo.name_of_view.
If you want a View's ability to query from within the FROM clause, but you also want to be able to pass in parameters, there's a way to do that too.
[http://databases.aspfaq.com/database/should-i-use-a-view-a-stored-procedure-or-a-user-defined-function.html (hyper-link)]
EDIT: By the way, this sort of raises the question, what advantage does a view have over a table-valued function?
I don't have a really good answer to that, but I will note that the T-SQL syntax for creating a view is simpler than for a table-valued function, and users of your database may be more familiar with views.
One curious thing about views are that they are seen by Microsoft Access as tables: when you attach a Microsoft Access front-end to an SQL database using ODBC, you see the tables and views in the list of available tables.
Generally i go with views to make life easier, get extended details from some entity that's stored over multiple tables (eliminate lots of joins in  code to enhance readability) and sometimes to share data over multiple databases or even to make inserts easier to read.
I only have 10 or so views in my production databases.
One set I use come from 7 tables, some with outer joins and rather than rewrite that constantly I only have to call that view in a select and make one or 2 joins.
This will create a view that will allow me retrieve a product and all it's details translated from its foreign keys to its description.
Its  very appropriate for views .How when we normalize Database tables increases.Now to fetch data is very difficult when number of tables increases.So best way to  handle is follow views.If i am wrong correct me.
Here is how to use a View along with permissions to limit the columns a user can update in the table.
We create view to limit or ristrict from accessing all rows/column in a table.If the owner wants that only specific or limited rows/column needs to be shared,then he will create a view with those column.
To Focus on Specific Data
Views allow users to focus on specific data that interests them and on the specific tasks for which they are responsible.
Unnecessary data can be left out of the view.
This also increases the security of the data because users can see only the data that is defined in the view and not the data in the underlying table.
For more information about using views for security purposes, see Using Views as Security Mechanisms.
To Simplify Data Manipulation
Views can simplify how users manipulate data.
You can define frequently used joins, projections, UNION queries, and SELECT queries as views so that users do not have to specify all the conditions and qualifications each time an additional operation is performed on that data.
For example, a complex query that is used for reporting purposes and performs subqueries, outer joins, and aggregation to retrieve data from a group of tables can be created as a view.
The view simplifies access to the data because the underlying query does not have to be written or submitted each time the report is generated; the view is queried instead.
You can also create inline user-defined functions that logically operate as parameterized views, or views that have parameters in WHERE-clause search conditions.
To Customize Data
Views allow different users to see data in different ways, even when they are using the same data concurrently.
For example, a view can be created that retrieves only the data for the customers with whom an account manager deals.
The view can determine which data to retrieve based on the login ID of the account manager who uses the view.
To Export and Import Data
Views can be used to export data to other applications.
To do this, you can create a view based on the stores and sales tables.
You can then use the bcp utility to export the data defined by the view.
Data can also be imported into certain views from data files using the bcp utility or BULK INSERT statement providing that rows can be inserted into the view using the INSERT statement.
For more information about the restrictions for copying data into views, see INSERT.
For more information about using the bcp utility and BULK INSERT statement to copy data to and from a view, see Copying To or From a View.
To Combine Partitioned Data
The Transact-SQL UNION set operator can be used within a view to combine the results of two or more queries from separate tables into a single result set.
This appears to the user as a single table called a partitioned view.
For example, if one table contains sales data for Washington, and another table contains sales data for California, a view could be created from the UNION of those tables.
The view represents the sales data for both regions.
To use partitioned views, you create several identical tables, specifying a constraint to determine the range of data that can be added to each table.
The view is then created using these base tables.
When the view is queried, SQL Server automatically determines which tables are affected by the query and references only those tables.
Partitioned views can be based on data from multiple heterogeneous sources, such as remote servers, not just tables in the same database.
For example, to combine data from different remote servers each of which stores data for a different region of your organization, you can create distributed queries that retrieve data from each data source, and then create a view based on those distributed queries.
Any queries read only data from the tables on the remote servers that contains the data requested by the query; the other servers referenced by the distributed queries in the view are not accessed.
By using a partitioned view, the data still appears as a single table and can be queried as such without having to reference the correct underlying table manually.
Partitioned views are updatable if either of these conditions is met:
An INSTEAD OF trigger is defined on the view with logic to support INSERT, UPDATE, and DELETE statements.
Both the view and the INSERT, UPDATE, and DELETE statements follow the rules defined for updatable partitioned views.
For more information, see Creating a Partitioned View.
For security: Gives each user permission to access the database only through a small set of views that contain the specific data the user or group of users is authorized to see, restricting user access to other data.
Simplicity for queries and structure: A view can draw data from several tables and present a single table, simplifying the information and turning multi-table queries into single-table queries for a view and it give users a specific view of the database structure, presenting the database as a set of virtual tables specific to particular users or groups of users.
For create consistent database structure: Views present a consistent, unchanged image of the database structure, even if underlying source tables are changed.
Use the driver to send keys like the pagedown or downarrow key to bring the element into view.
This will scroll until the element is in view:
It will do a scroll instead of click, so I had to click twice without calling "location_in_view()".
Note: This method works for elements that can be viewed, like an input of type button.
The description for JsonWireProtocol# suggest usage of location + moveto, because location _in_view is an internal method.
The 'location_once_scrolled_into_view' method is an existing method on WebElement class.
The default behavior of Selenium us to scroll so the element is barely in view at the top of the viewport.
If you record videos of your browser tests, like I do, what you want is for the element to scroll into view and be vertically centered.
The Ruby script for scrolling an element into view is as below.
[http://learn-automation.com/how-to-scroll-into-view-in-selenium-webdriver/ (hyper-link)]
I am not sure if the question is still relevant but after referring to scrollIntoView documentation from [https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView (hyper-link)].
await browser.executeScript( "arguments[0].scrollIntoView()", await browser.wait( until.elementLocated( By.xpath( "//div[@jscontroller='MC8mtf']" ) ), 1000 ) );
So, you can use this technique to bind a viewModel to the dynamic content that you load into your dialog.
If you have a really long list, though, I'm guessing that you should probably make a [custom dialog (hyper-link)] with [a RecyclerView (hyper-link)].
[How to implement a custom AlertDialog View (hyper-link)]
[ (hyper-link)]
R.layout.assignment_dialog_list_view
In a view somewhere you can access the file with
You can call this handle_uploaded_file function from your view with the uploaded file object.
Not sure if there any disadvantages to this approach but even more minimal, in views.py:
A view where all the magic happens.
To make the view accessible, you must specify urls for it.
The example I got to work in the views.py is :-
update uploader/views.py::
views.py
UploadView dispatches post and delete request to respective handlers.
I had this issue on the initial view right after the launch screen.
As a hint: If you call present to a ViewController which is embedded inside a NavigationController you have to set the NavigationController to .fullScreen and not the VC.
The same applies to the UITabViewController
#1 Created a UIView Extension
If you have a BaseViewController you can override the present(_ viewControllerToPresent: animated flag: completion:) method.
an alternative approach is to have your own base viewcontroller component in your app, and just implementing the designated and required initialisers with a basic setup, something like the  following:
NOTE: If your view controller is contained in a navigation controller which is actually presented modally, then the navigation controller should approach the problem in the same way (meaning, having your custom navigation controller component customised in the same way
Rather than call self.modalPresentationStyle = .fullScreen for every view controller, you can subclass UIViewController and just use MyViewController everywhere.
Select View Controller in Storyboard
If you want to make the full-screen view controller you have to change the modalPresentationStyle to fullScreen.
Create a category for UIViewController (say UIViewController+PresentationStyle).
To create an  UIViewController extension  as follows
Setting navigationController.modalPresentationStyle to .fullScreen has been repeated here more than a thousand times but let me present you another blocker which was causing that UIViewController / UINavigationController was not showing in fullscreen even though all the properties were set properly.
If you're modifying the IME directly you can prevent it from ever displaying an ExtractedView by overriding [onUpdateExtractingVisibility (hyper-link)]:
For example, in order to disable the fullscreen edit view in landscape and replace "Next" key by "OK" (ACTION_DONE) in keyboard, you can use:
I know it's a little bit late but for anyone who is still interested, here is my solution :
In my case I had a landscape Activity containing an EditText at top of it and I needed to implement autocomplete feature in this search Activity, which the overlapping keyboard caused an issue that the user could not see result of RecyclerView.
You can call to hide soft keyboard and clear focus from searchview.
As of React Native 0.4.2, View components have an [onLayout prop (hyper-link)].
The event's nativeEvent contains the view's layout.
The onLayout handler will also be invoked whenever the view is resized.
You can directly use the [Dimensions (hyper-link)] module and calc your views sizes.
Update: Today using native [StyleSheet (hyper-link)] with Flex arranging on your views help to write clean code with elegant layout solutions in wide cases instead computing your view sizes...
You can create many more variation of how it should be modified, by using this in another component which has Another view as wrapper and create an onResponderRelease callback, which could pass the touch event location into the state, which could be then passed to child component as property, which could override onLayout updated state, by placing {[styles.View2, this.state.view2LayoutProps, this.props.touchEventTopLeft]} and so on.
Here is the code to get the Dimensions of the complete view of the device.
You can easily get the size of the View by onLayout [props (hyper-link)].
The onLayout handler will also be invoked whenever the view is resized.
It shows how to extend BaseAdapter and apply it to a ListView.
[http://developer.android.com/resources/samples/ApiDemos/src/com/example/android/apis/view/List14.html (hyper-link)]
@CommonsWare has written a good explanation of the patterns used in the above example
[http://commonsware.com/Android/excerpt.pdf (hyper-link)]
You need to override View getView(int position, View convertView, ViewGroup parent) method.
R.layout.itemlistrow defines the row of the ListView.
In the MainActivity define ListViewlike this,
[check this link (hyper-link)], in very simple via the convertView, we can get the layout of a row which will be displayed in listview (which is the parentView).
then it will return the constructed view which will be attached to the parentView (which is a ListView/GridView).
In my example, the ListActivity that will display our custom ListView is called OptionsActivity, because in my project this Activity is going to display the different options my user can set to control my app.
There are two list item types, one list item type just has a TextView and the second list item type just has a Button.
The getItemView() method checks to see which list items should be type 1 or type 2.
So if you compile and run this, you will have a ListView that has five items that just contain a Button, and then five items that just contain a TextView.
three_horizontal_text_views_layout.xml
ThreeHorizontalTextViewsAdapter.java
Here is the complete walk through to create a custom adapter for list view step by step -
[https://www.caveofprogramming.com/guest-posts/custom-listview-with-imageview-and-textview-in-android.html (hyper-link)]
BaseAdapter is best custom adapter for listview.
and it has many functions such as getCount(), getView() etc.
Source: [Custom ListView Android Tutorial (hyper-link)]
I think that the problem is that you do not have a proper view controller hierarchy.
Set the rootviewcontroller of the app and then show new views by pushing or presenting new view controllers on them.
Let each view controller manage their views.
Only container view controllers, like the tabbarviewcontroller, should ever add other view controllers views to their own views.
Read the view controllers programming guide to learn more on how to use view controllers properly.
[https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/ (hyper-link)]
And then in your modal view controller, when everything is finished, you can just call :
[self dismissViewControllerAnimated:YES completion:nil];
Make sure you have a root view controller to start with.
After this operation all further controllers presenting bring me to the warning: "Presenting view controllers on detached view controllers is discouraged".
The reason of this warning is i was presenting a view controller over a small view that is not full size view.
User navigate to different childviewcontroller's view.
(it works like tabViewcontroller).
But the childviewcontroller contains view of small size.
So if we present a view from childviewcontroller it gives this warning.
And to avoid this, you can present a view on childviewcontroller's parent
One of the solution to this is if you have childviewcontroller So you simply presentviewcontroller on its parent by given
And for dismiss use the same dismissview controller.
Use [self.navigationController presentViewController:xxx animated:YES completion:nil] in iOS 8.
In my case, I've a sampleViewController's view added as a subview, then tries to present a popover from the view of sampleViewController (here self instead a UIViewController instance):
B.t.w., this also works for the case that present a popover form a tableview cell, you just need to make sure the tableview controller has been added as child view controller as well.
Yes, I also faced the same warning message while displaying an Alert controller which was in another view.
Later on I avoided this by presenting the alert controller from the parent view controller as below:
Wait for viewDidAppear():
This error can also arise if you are trying to present view controller before view actually did appear, for example presenting view in viewWillAppear() or earlier.
Try to present another view after viewDidAppear() or inside of it.
you need to add the view controller that will present the new controller as a child of the parent view controller.
Let's say you have yourMainViewController, then you add a new controller called controllerA, and then you want to present a new controller called controllerB from controllerA
Mine is because I have a segue connected from a ViewController to another that will be presented modally.
But, the ViewController I am presenting from is being dynamically generated by a PageViewController.
Reason could be self is child of TabBarController and you are trying to present from a ChildViewController.
It depends if you want to show your alert or something similar in anywhere of kind UIViewController.
I reached on this thread where I have a Custom Navigation Bar and I was calling an AlertViewController through it.
I had to add it as a child to my main view controller.
You should add your Zoomed Image View Controller as a child of the main ViewController.
Then you'd be able to call your ZoomedImageViewController
Check your presentingViewController have parentViewController or not.
else, check it's parentViewController has parentViewController recursively until every viewController has parent
This issue happened to me when my co-worker add a AViewController to BViewController.
Somehow, he just add the AViewController's view to BViewController's view.
Fixed by add bViewController.addChild(aViewController)
You can always access child views via View.findViewById() [http://developer.android.com/reference/android/view/View.html#findViewById(int (hyper-link)]).
For example, within an activity / view:
or if you have a reference to a view:
From within an  Activity, an example usage coupled with findViewById would be:
I'm just going to provide this answer as an alternative @IHeartAndroid's recursive algorithm for discovering all child Views in a view hierarchy.
Also, results may vary based on how vertical/horizontal the view hierarchy is.
Cross-posted from: [Android | Get all children elements of a ViewGroup (hyper-link)]
And I was only interested in finding TextView children.
This method takes all views inside a layout, this is similar to Alexander Kulyakhtin's answer.
The difference is, it accepts any type of parent layouts & returns an Array List of views.
As an update for those who come across this question after 2018, if you are using Kotlin, you can simply use the [Android KTX (hyper-link)] extension property [ViewGroup.children (hyper-link)] to get a sequence of the View's immediate children.
But if you have nested fragments, for example Fragment with a few tabs inside ViewPager, you guaranteed will face with a problem (or already faced it).
In your main top level fragment(ViewPager fragment):
FOR MANY NESTED FRAGMENTS (for example, when using a ViewPager in a fragment)
Materialized views are disk based and are updated periodically based upon the query definition.
Views are virtual only and run the query definition each time they are accessed.
A view uses a query to pull data from the underlying tables.
A materialized view is a table on disk that contains the result set of a query.
Materialized views are primarily used to increase application performance when it isn't feasible or desirable to use a standard view with indexes applied to it.
Materialized views can be updated on a regular basis either through triggers or by using the ON COMMIT REFRESH option.
Views are essentially logical table-like structures populated on the fly by a given query.
The results of a view query are not stored anywhere on disk and the view is recreated every time the query is executed.
Materialized views are actual structures stored within the database and written to disk.
They evaluate the data in the tables underlying the view definition at the time the view is queried.
It is a logical view of your tables, with no data stored anywhere else.
The upside of a view is that it will always return the latest data to you.
The downside of a view is that its performance depends on how good a select statement the view is based on.
If the select statement used by the view joins many tables, or uses joins based on non-indexed columns, the view could perform poorly.
They are similar to regular views, in that they are a logical view of your data (based on a select statement), however, the underlying query result set has been saved to a table.
The upside of this is that when you query a materialized view, you are querying a table, which may also be indexed.
In addition, because all the joins have been resolved at materialized view refresh time, you pay the price of the join once (or as often as you refresh your materialized view), rather than each time you select from the materialized view.
In addition, with query rewrite enabled, Oracle can optimize a query that selects from the source of your materialized view in such a way that it instead reads from your materialized view.
In situations where you create materialized views as forms of aggregate tables, or as copies of frequently executed queries, this can greatly speed up the response time of your end user application.
The downside though is that the data you get back from the materialized view is only as up to date as the last time the materialized view has been refreshed.
Materialized views can be set to refresh manually, on a set schedule, or based on the database detecting a change in data from one of the underlying tables.
Materialized views can be incrementally updated by combining them with materialized view logs, which act as change data capture sources on the underlying tables.
Materialized views are most often used in data warehousing / business intelligence applications where querying large fact tables with thousands of millions of rows would result in query response times that resulted in an unusable application.
Materialized views also help to guarantee a consistent moment in time, similar to [snapshot isolation (hyper-link)].
Materialized views can only be set to refresh automatically through the database detecting changes when the view query is considered simple by the compiler.
If it's considered too complex, it won't be able to set up what are essentially internal triggers to track changes in the source tables to only update the changed rows in the mview table.
When you create a materialized view, you'll find that Oracle creates both the mview and as a table with the same name, which can make things confusing.
Materialised view - a table on a disk that contains the result set of a query
Non-materiased view - a query that pulls data from the underlying table
View: View is just a named query.
When there is a query on view, it runs the query of the view definition.
Materialised views: Stores data physically and get updated periodically.
Materialized views are  the logical view of  data-driven by the select query but the result of the query will get stored in the table or disk, also the definition of the query will also store in the database.
The performance of Materialized view it is better than normal View because the data of materialized view will be stored in table and table may be indexed so faster for joining also joining is done at the time of materialized views refresh time so no need to every time fire join statement as in case of view.
Other difference includes in case of View we always get latest data but in case of Materialized view we need to refresh the view for getting latest data.
In case of Materialized view we need an extra trigger or some automatic method so that we can keep MV refreshed, this is not required for views in the database.
I just found your question while having the similar problem with a TextView.
I was able to solve it, by extending TextView and overriding onSetAlpha.
You can very simply define the alpha in the color definition of the button (or any other view) in your xml:
When defining the color of a view, the format can be either #RRGGBB or #AARRGGBB, where AA is the hex alpha value.
According to the android docs view alpha is a value between 0 and 1.
Although btnMybutton.getBackground().setAlpha(45); is nice idea, it just apply alpha to background and not the whole view.
If you want apply alpha to view use btnMybutton.setAlpha(0.30f); instead.
This apply opacity to View.
Sets the opacity of the view.
This is a value from 0 to 1, where 0
  means the view is completely transparent and 1 means the view is
  completely opaque.
If this view overrides onSetAlpha(int) to return
  true, then this view is responsible for applying the opacity itself.
For API < 11 for textView color I did the following:
For a view you can set opacity by the following.
The property view.setAlpha(int) is deprecated for the API version greater than 11.
Select the view controller which you want to open first and go to attribute inspector.
Go to initial scene and check is initial view controller option.
Now this will be your initial view controller that will open first when application launch.
Open mainstoryboard, select the view that you want start first, then open Utilities--> Attributes.
Below the "View Controller" you see the "Is initial View Controller" radio button.
May be you can try this: write a method in ViewDidLoad section of your inital view and when the method runs on application launch, method triggers a segue to another view.
Instead you can have one initial controller which will have segues to different view controllers.
How to without a dummy initial view controller
Ensure all initial view controllers have a Storyboard ID.
In the storyboard, uncheck the "Is initial View Controller" attribute from the first view controller.
Failed to instantiate the default view controller for UIMainStoryboardFile 'MainStoryboard' - perhaps the designated entry point is not set?
Create the window and desired initial view controller in the app delegate's application:didFinishLaunchingWithOptions: method:
You can programmatically set the key window's rootViewController in (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions
I set hidden my initial view controller before launch2.
If initial view controller is the right controller it's set to visible in viewDidLoad.
Else, a segue is performed to desired view controller.
The ExampleViewController would be the new initial view controller you would like to show.
Instantiate a storyboard that we can use to create our new initial view controller
Instantiate our new initial view controller based on it's Storyboard ID
Set our new window's root view controller as our the new controller we just initiated
You can set Navigation rootviewcontroller as a main view controller.
You can set initial view controller using Interface Builder as well as programmatically.
Found simple solution - no need to remove "initial view controller check" from storyboard and editing project Info tab and use makeKeyAndVisible, just place
Of course, you need to implement your logic, based on which criteria you'll choose an appropriate view controller.
Another way is to present viewController,
First you need to create object of your storyboard then change root(if required) then you take reference of particular view controller which is pushed current view controller(if you change root) else it's just present new view controller which may you
Swift 5 or above# make route view controller by this simple code.
If you don't have a ViewController set as the initial ViewController in storyboard, you need to do 2 things:
Set Navigation controller as an initial view controller and assign to it a custom class 'MyNavigationController'.
Then you can tweak its root view controller during viewDidLoad - it will override the root view controller that you set in your storyboard.
You can add your condition which view controller scene will dispaly
Set initial ViewController using Storyboards(instead of Main)
Main.storyboard -> View Controller -> Attributes Inspector -> Uncheck Is Initial View Controller
Clear the website data on the iPhone after update to iOS6, including specific to the app using a Web View.
You may need to look at your app as well, check out NSURLCache if in a WebView in a custom app.
The view methods return a list(not a copy of the list, compared to .keys(), .items() and .values()), so it is more lightweight, but reflects the current contents of dictionary.
From [Python 3.0 - dict methods return views - why?
And if you indeed need it as a separate list (as a
  copy) then you can easily create that list from the view.
Views are "pseudo-set-like", in that they don't support indexing, so what you can do with them is test for membership and iterate over them (because keys are hashable and unique, the keys and items views are more "set-like" in that they don't contain duplicates).
Because they reflect the underlying dictionary, any change in the dictionary will change the view, and will almost certainly change the order of iteration.
You could just use a view instead, turning for k, v in mydict.iteritems(): into for k, v in myview:.
Dictionary views are essentially what their name says: views are simply like a window on the keys and values (or items) of a dictionary.
(The Python 2 equivalent uses dishes.viewkeys() and dishes.viewvalues().)
This example shows the dynamic character of views: the keys view is not a copy of the keys at a given point in time, but rather a simple window that shows you the keys; if they are changed, then what you see through the window does change as well.
This feature can be useful in some circumstances (for instance, one can work with a view on the keys in multiple parts of a program instead of recalculating the current list of keys each time they are needed)—note that if the dictionary keys are modified while iterating over the view, how the iterator should behave is not well defined, which can [lead to errors (hyper-link)].
To summarize, views are simply… views (windows) on your dictionary, which show the contents of the dictionary even after it changes.
They offer features that differ from those of lists: a list of keys contain a copy of the dictionary keys at a given point in time, while a view is dynamic and is much faster to obtain, as it does not have to copy any data (keys or values) in order to be created.
Now take the following example to see the difference between an interator of dict and a view of dict
Whereas a view simply shows you what's in the dict.
A view is simply a what the dictionary looks like now.
Views let you access the underlaying data structure, without copying it.
With views you can iterate the actual data-structure, without intermediate list.
As you can see, iterating view object gives a huge boost to performance, reducing memory overhead at the same time.
With Diffuse, you can easily merge, edit, and review changes to your code.
The good thing with its merge is that it let you see all 4 views: base, left, right, and merged result.
Check that merge [screens-shot (hyper-link)] and you'll see it's has the 3 views at least.
The merge view (see [screenshot (hyper-link)]) has only 3 panes, just like SourceGear Diff/Merge.
PS: If one tool one day supports 5 views merging, this would really be awesome, because if you cherry-pick commits in Git you really have not one base but two.
As for merging, there aren't three views but it's all combined into one with colored highlighting for each version.
I would also recommend [project-manager (hyper-link)] as a very convenient way to 
navigate between projects without filling up your tree view.
I just always close it when I'm finished, and then reopen when I want to view my changes/commit again.
You could replace any view at any time.
If you don't want to replace already existing View, but choose between option1/option2 at initialization time, then you could do this easier: set android:id for parent layout and then:
You will have to set "index" to proper value depending on views structure.
You could also use a ViewStub: add your C view as ViewStub and then:
And if you do that very often, you could use a [ViewSwitcher (hyper-link)] or a [ViewFlipper (hyper-link)] to ease view substitution.
it work in my case, oldSensor and newSnsor - oldView and newView:
Yes, you can use the segue to get access the child view controller (and its view and subviews).
Give the segue an identifier (such as alertview_embed), using the Attributes inspector in Storyboard.
Then have the parent view controller (the one housing the container view) implement a method like this:
You can do that simply with self.childViewControllers.lastObject (assuming you only have one child, otherwise use objectAtIndex:).
self.childViewControllers  is more relevant when you need control from the parent.
For instance, if the child controller is a table view and you want to reload it forcefully or change a property via a button tap or any other event on Parent View Controller, you can do it by accessing ChildViewController's instance and not via prepareForSegue.
This relies on childViewControllers.
viewController1, viewController2 and so on will then be accessible.
There is another way using Swift's switch statement on the type of the view controller :
You can then do this in your viewController:
Anyhow, the deal is that layout of the
  contents of a window happens
  after all the elements are constructed and added to their parent
  views.
It has to be this way, because
  until you know what components a View
  contains, and what they contain, and
  so on, there's no sensible way you can
  lay it out.
The procedure is to create all
  your view elements in the constructor,
  then wait for your View's
  onSizeChanged() method to be called --
  that's when you first find out your
  real size, so that's when you set up
  the sizes of your GUI elements.
A ViewTreeObserver gets fired for different drawing events.
public void removeGlobalOnLayoutListener (ViewTreeObserver.OnGlobalLayoutListener victim)
Basically just use the View's post method with your own runnable.
This basically queues your code after the view's measure, layout, etc.
After
setContentView() is invoked, the event queue will contain a message
asking for a relayout, so anything you post to the queue will happen
after the layout pass
The advantage over ViewTreeObserver:
This is only practical in certain situation when the logic can be encapsulated in the view itself, otherwise this is a quite verbose and cumbersome syntax.
Returns true if view has been through at least one layout since it was
last attached to or detached from a window.
[View.getMeasuredWidth() (hyper-link)]
[View.getMeasuredHeigth() (hyper-link)]
The size of a view is expressed with a width and a height.
A view
actually possess two pairs of width and height values.
These
dimensions define how big a view wants to be within its parent (see
Layout for more details.)
These dimensions define the actual
size of the view on screen, at drawing time and after layout.
Gone views returns 0 as height if app in background.
Height and width are zero because view has not been created by the time you are requesting it's height and width .
We need to wait for view will be drawn.
Create an extension function for the View class
filename: ViewExt.kt
This can then be used on any view with:
AndroidX has multiple extension functions that help you with this kind of work, inside androidx.core.view
Performs the given action when this view is laid out.
If the view has been laid out and it has not requested a layout, the action will be performed straight away otherwise, the action will be performed after the view is next laid out.
It happens because the view needs more time to be inflated.
So instead of calling view.width and view.height on the main thread, you should use view.post { ... } to make sure that your view has already been inflated.
In Java you can also call getWidth() and getHeight() methods in a Runnable and pass the Runnable to view.post() method.
Another important thing is that the view and all it ancestors must be visible.
For that I use a property View.isShown.
you can use it in onCreate or onCreateView
You'll need to create an Action on your Controller that returns the rendered result of the "UserDetails" partial view or control.
You can't render a partial view using only jQuery.
You can, however, call a method (action) that will render the partial view for you and add it to the page using jQuery/AJAX.
In the below, we have a button click handler that loads the url for the action from a data attribute on the button and fires off a GET request to replace the DIV contained in the partial view with the updated contents.
This is assuming that your partial view is a container with the id detailsDiv so that you just replace the entire thing with the contents of the result of the call.
Parent View Button
UserDetails partial view
[view.setPadding(0,padding,0,0); (hyper-link)]
You can set padding to your view by pro grammatically throughout below code -
Use LinearLayout.LayoutParams or RelativeLayout.LayoutParams according to parent layout of the child view
From the Express.js Guide: [View Rendering (hyper-link)]
View filenames take the form Express.ENGINE, where ENGINE is the name of the module that will be required.
For example the view layout.ejs will tell the view system to require('ejs'), the module being loaded must export the method exports.render(str, options) to comply with Express, however app.register() can be used to map engines to file extensions, so that for example foo.html can be rendered by jade.
in views/index.jade
in views/plain.html
Note: The simplest solution is to use ejs template as view engine.
There you can write raw HTML in *.ejs view files.
This assumes you have your views in the views subfolder, and that you have installed the ejs node module.
If you don't have to use the views directory, Simply move html files to the public directory below.
and then, add this line into app.configure instead of '/views'.
render the page from exports module form.js
have the html file in the views dir
   with extension of ejs file name as
form.html.ejs
Inspired by [Andrew Homeyer's answer (hyper-link)], I decided to drag my HTML files - unmodified - into a views folder, configure Express like so
Then in your app.js File Add following Code :
app.engine('html', require('ejs').renderFile);
app.set('view engine', 'html');
And Remember Keep All .HTML files in views Folder
The above example assumes that the project structure has a views directory and the static HTML files are inside it.
For example, let's say, the views directory has two HTML files named index.html and about.html, then to access them, we can visit: localhost:8153/index.html or just localhost:8153/ to load the index.html page and localhost:8153/about.html to load the about.html.
We can use a similar approach to serve a react/angular app by storing the artifacts in the views directory or just using the default dist/<project-name> directory and configure it in the server js as follows:
Set its path to be a CGPathRef based on view.bounds but with only two rounded corners (probably by using [+[UIBezierPath bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:] (hyper-link)])
Set your view.layer.mask to be the CAShapeLayer
A way to do this programmatically would be to create a UIView over the top part of the UIView that has the rounded corners.
Create a bezier mask and apply it to your view.
In my code below I was rounding the bottom corners of the _backgroundView with a radius of 3 pixels.
self is a custom UITableViewCell:
If you're using Auto Layout, you'll need to subclass your UIView and call roundCorners in the view's layoutSubviews for optimal effect.
Emma: .TopRight and .BottomRight are not working for you perhaps because the call to view.roundCorners is done BEFORE final view bounds are calculated.
Note that the Bezier Path derives from the view bounds at the time it is called.
For example, if auto layout will narrow the view, the round corners on the right side might be outside the view.
Try to call it in viewDidLayoutSubviews, where the view's bound is final.
Pay attention to the fact that if you have layout constraints attached to it, you must refresh this as follows in your UIView subclass:
Additional view controller case: Whether you can't or wouldn't want to subclass a view, you can still round a view.
Do it from its view controller by overriding the viewWillLayoutSubviews() function, as follows:
And you can using this in table view cell.
If you are using AutoResizing in storyboard write this code in viewDidLayoutSubviews().
[self.verticalSeparatorView roundCorners:UIRectCornerTopLeft | UIRectCornerTopRight radius:10.0];
To use this function for you view
My solution for rounding specific corners of UIView and UITextFiels in swift is to use
of actual UIView or UITextFields.
RoundedCorners_Previews
It uses the stock cornerRadius property on the CALayer of a view.
Note:- I'll recommend you to don't put this code inside viewDidLayoutSubviews(), because whenever view updates, you'll get call inside it.
So use viewDidAppear(), it'll work like a charm.
A table contains data, a view is just a SELECT statement which has been saved in the database (more or less, depending on your database).
The advantage of a view is that it can join data from several tables thus creating a new view of it.
Instead of sending the complex query to the database all the time, you can save the query as a view and then SELECT * FROM view
In view there is not any direct or physical relation with the database.
And Modification through a view (e.g.
A view helps us in get rid of utilizing database space all the time.
Instead view is utilized when a query runs hence saving the db space.
So view just temporarily create a table with joining different table at the run time.
View: 
A view is a virtual table whose contents are defined by a query.
Unless indexed, a view does not exist as a stored set of data values in a database.
We can combine columns/rows from multiple table or another view and have a consolidated view.
Views can be used as security mechanisms by letting users access data through the view, without granting the users permissions to directly access the underlying base tables of the view
A view is a virtual table.
A view consists of rows and columns just like a table.
The difference between a view and a table is that views are definitions built on top of other tables (or views), and do not hold data themselves.
If data is changing in the underlying table, the same change is reflected in the view.
A view can be built on top of a single table or multiple tables.
It can also be built on top of another view.
In the SQL Create View page, we will see how a view can be built.
Views offer the following advantages:
Ease of use: A view hides the complexity of the database tables from end users.
Essentially we can think of views as a layer of abstraction on top of the database tables.
Space savings: Views takes very little space to store, since they do not store actual data.
Additional data security: Views can include only certain columns in the table so that only the non-sensitive columns are included and exposed to the end user.
In addition, some databases allow views to have different security settings, thus hiding sensitive data from prying eyes.
Answer from:[http://www.1keydata.com/sql/sql-view.html (hyper-link)]
View:
View is an imaginary table, contains only the fields(columns) and does not contain data(row) which will be framed at run time
Views created from one or more than one table by joins, with selected columns.
Views are created to hide some columns from the user for security reasons, and to hide information exist in the column.
Views reduces the effort for writing queries to access specific columns every time
Instead of hitting the complex query to database every time, we can use view
SQL Views:
View is a virtual table based on the result-set of an SQL statement and that is Stored in the database with some name.
Check following post, author listed around seven [differences between views and table (hyper-link)]
[https://codechef4u.com/post/2015/09/03/sql-views-vs-tables (hyper-link)]
before you call setContentView method for your activity in onCreate().
How to change orientation in some of the view
Instead of locking orientation of the entire activity, you can use this class to dynamically lock orientation from any of your view pragmatically:
Make your view Landscape
Make your view Portrait
Note: you should call this before setContentView method for your activity in onCreate().
I set the below xml to the background of the Image View as Drawable.
And then add android:background="@drawable/yourXmlFileName" to your ImageView
2) Place the ImageView inside a Linearlayout, and set the frame background or colour you want as the background of the Linearlayout.
As you set the frame to have the content inside itself, your ImageView will be inside the frame (right where you set the content with the 9patch tool).
ImageView in xml file
This will make the ImageView source to fit within the padding's added to its background.
Update the ImageView background in res/layout/foo.xml:
Exclude the ImageView padding if you want the src to draw over the background.
For those who are searching custom border and shape of ImageView.
You can use [android-shape-imageview (hyper-link)]
Just add compile 'com.github.siyamed:android-shape-imageview:0.9.+@aar' to your build.gradle.
Then you will have your border for your imageView.
"frame_image_view.xml") with the following content in your drawable folder:
Add the Drawable as background to your ImageView:
Alternatively use android:padding="@dimen/borderThickness" in your ImageView to achieve the same.
If the border frames the parent instead of your ImageView, try to use android:adjustViewBounds="true".
I've also the same attributes for my ImageView, for everyone answer [here 1 (hyper-link)], [here 2 (hyper-link)] & [here 3 (hyper-link)]
Just add this code in your ImageView:
Fiddle with the size of the bitmap (in relation to the size of the imageview, I used a 200dp x 200dp imageview and a bitmap of 196dp x 196dp in the example, with a radius of 14dp for the corners) and the padding to get the best result.
And call it in your imageview like this:
All of the above answers open Google Play in a new view of the same app, if you actually want to open Google Play (or any other app) independently:
Here is the final code from the answers above that first attempts to open the app using the Google play store app and specifically play store, if it fails, it will start the action view using the web version:
Credits to @Eric, @Jonathan Caballero
This is the Kotlin code I used to direct users to viewing the app containing the package name com.google.android.apps.maps in Google Play:
The view function is meant to reshape the tensor.
Drawing a similarity between numpy and pytorch, view is similar to numpy's [reshape (hyper-link)] function.
The view method returns a tensor with the same data as the self tensor (which means that the returned tensor has the same number of elements), but with a different shape.
If you do: a.view(3, 3), it will raise a RuntimeError because shape (3 x 3) is invalid for input with 16 elements.
For example a.view(2, -1, 4) is equivalent to a.view(2, 2, 4).
If you make a change in the "view" you are changing the original tensor's data:
[code snippet]
The documentation says that each new view dimension must either be a subspace of an original dimension, or only span d, d + 1, ..., d + k that satisfy the following contiguity-like condition that for all i = 0, ..., k - 1, stride[i] = stride[i + 1] x size[i + 1].
Otherwise, contiguous() needs to be called before the tensor can be viewed.
I figured it out that x.view(-1, 16 * 5 * 5) is equivalent to x.flatten(1), where the parameter 1 indicates the flatten process starts from the 1st dimension(not flattening the 'sample' dimension)
As you can see, the latter usage is semantically more clear and easier to use, so I prefer flatten().
weights.view(a, b) will return a new tensor with the same data as weights with size (a, b)
Because of that there can be only one parameter -1 in view().
If you ask x.view(-1,1) this will output tensor shape [anything, 1] depending on the number of elements in x.
Simply put, [torch.Tensor.view() (hyper-link)] which is inspired by [numpy.ndarray.reshape() (hyper-link)] or [numpy.reshape() (hyper-link)], creates a new view of the tensor, as long as the new shape is compatible with the shape of the original tensor.
With this tensor t of shape (18,), new views can only be created for the following shapes:
By using a -1, we are being lazy in doing the computation ourselves and rather delegate the task to PyTorch to do calculation of that value for the shape when it creates the new view.
So, with all of the above mentioned shapes, PyTorch will always return a new view of the original tensor t. This basically means that it just changes the stride information of the tensor for each of the new views that are requested.
Below are some examples illustrating how the strides of the tensors are changed with each new view.
Now, we will see the strides for the new views:
So that's the magic of the [view() (hyper-link)] function.
It just changes the strides of the (original) tensor for each of the new views, as long as the shape of the new view is compatible with the original shape.
This function would return a view and is exactly the same as using [torch.Tensor.view() (hyper-link)] as long as the new shape is compatible with the shape of the original tensor.
contiguous inputs and inputs with compatible strides can be reshaped without copying, but one should not depend on the copying vs. viewing behavior.
I would like to add a small insight to how elements are ordered for .view(...)
The mapping of the elements in the new Tensor returned by .view(...)
preserves this order of the original Tensor.
Let's try to understand view by the following examples:
view() reshapes a tensor by 'stretching' or 'squeezing' its elements into the shape you specify:
view(dim1,dim2,...) returns a view of the same underlying information, but reshaped to a tensor of shape dim1 x dim2 x ... (by modifying the shape and stride attributes).
Hence t1.view(3,2) in our example would be equivalent to t1.view(3,-1) or t1.view(-1,2).
Im not sure if this is the answer you are expecting but, why don't you set the width of Tree to 'auto' and width of 'View' to 100% ?
You may want to use -n for preview of files to be deleted.
if you are  using image loading in List view then use Aquery concept .
Most of the answers are working but no one mentioned that the high resolution image will slow down the app , In my case i used images RecyclerView which was taking 0.9 GB of device memory In Just 30 Images.
Package Explorer / View Menu / Package Presentation... / Hierarchical
The "View Menu" can be opened with Ctrl + F10, or the small arrow-down icon in the top-right corner of the Package Explorer.
Click on view menu (3 dot symbol) in package explorer -> hover over package presentation -> Click on Hierarchical
Use the [LayoutInflater (hyper-link)] to create a view based on your layout template, and then inject it into the view where you need it.
You may have to adjust the index where you want to insert the view.
Additionally, set the LayoutParams according to how you would like it to fit in the parent view.
It looks like what you really want a ListView with a custom adapter to inflate the specified layout.
Using an [ArrayAdapter (hyper-link)] and the method notifyDataSetChanged() you have full control of the Views generation and rendering.
[http://www.softwarepassion.com/android-series-custom-listview-items-and-adapters/ (hyper-link)]
[http://www.androidguys.com/2008/07/14/fancy-listviews-part-one/ (hyper-link)]
To make @Mark Fisher's answer more clear, the inserted view being inflated should be a xml file under layout folder but without a layout (ViewGroup) like LinearLayout etc.
The reason I post this very similar answer is that when I tried to implement Mark's solution, I got stuck on what xml file should I use for insert_point and the child view.
I used layout in the child view firstly and it was totally not working, which took me several hours to figure out.
How can you get the tree-like view of commits in terminal?
Use getMeasuredWidth() and getMeasuredHeight() for your view.
[Developer guide: View (hyper-link)]
What you need, is to use getMeasuredWidth() (the most recent measure of your View) somewhere after the view was actually drawn.
You can place this code directly in onCreate(), and it will be invoked when views will be laid out.
You should rather look at View lifecycle: [http://developer.android.com/reference/android/view/View.html (hyper-link)] Generally you should not know width and height for sure until your activity comes to onResume state.
First I get a final reference to my TextView (to access in the onGlobalLayout() method).
Next, I get the ViewTreeObserver from my TextView, and add an OnGlobalLayoutListener, overriding onGLobalLayout (there does not seem to be a superclass method to invoke here...) and adding my code which requires knowing the measurements of the view into this listener.
I guess this is what you need to look at: use onSizeChanged() of your view.
Here is an EXTENDED code snippet on how to use onSizeChanged() to get your layout's or view's height and width dynamically [http://syedrakibalhasan.blogspot.com/2011/02/how-to-get-width-and-height-dimensions.html (hyper-link)]
Use the View's post method like this
I tried to use onGlobalLayout() to do some custom formatting of a TextView, but as @George Bailey noticed, onGlobalLayout() is indeed called twice: once on the initial layout path, and second time after modifying the text.
[View.onSizeChanged() (hyper-link)] works better for me because if I modify the text there, the method is called only once (during the layout pass).
This required sub-classing of TextView, but on API Level 11+ [View.
One more thing, in order to get correct width of the view in View.onSizeChanged(), the layout_width should be set to match_parent, not wrap_content.
ViewTreeObserver and onWindowFocusChanged() are not so necessary at all.
If you inflate the TextView as layout and/or put some content in it and set LayoutParams then you can use getMeasuredHeight() and getMeasuredWidth().
BUT you have to be careful with LinearLayouts (maybe also other ViewGroups).
The issue there is, that you can get the width and height after onWindowFocusChanged() but if you try to add some views in it, then you can't get that information until everything have been drawn.
I was trying to add multiple TextViews to LinearLayouts to mimic a FlowLayout (wrapping style) and so couldn't use Listeners.
So in such case, you might want to keep the width in a variable to use it later, as during adding views to layout, you might need it.
mentioned, you can use an OnLayoutChangeListener to the view that you want to track itself
It seems the key is to ensure that the View has focus before you getHeight etc.
ImageButton myImageButton1 =(ImageButton)findViewById(R.id.imageButton1);
myImageButton1.hasFocus();
You can not get the height of a view in OnCreate (), onStart (), or even in onResume () for the reason that kcoppock responded
Even though the proposed solution works, it might not be the best solution for every case because based on the documentation for ViewTreeObserver.OnGlobalLayoutListener
Interface definition for a callback to be invoked when the global layout state or the visibility of views within the view tree changes.
which means it gets called many times and not always the view is measured (it has its height and width determined)
An alternative is to use ViewTreeObserver.OnPreDrawListener which gets called only when the view is ready to be drawn and has all of its measurements.
Height and width are zero because view has not been created by the time you are requesting it's height and width .
In the resulting “Website Data” dialog, click on View files.
Not quite an answer (not “using Developer Tools”), but there is a third-party tool for it: [IECookiesView from NirSoft (hyper-link)].
If you want the view to have the translucent nav bar (which is kind of nice) you have to setup a contentInset or similar.
You need to add the above in your -(void)viewDidLoad method.
The changes in view-controller layout, tint
  color, and font affect all the UIKit objects in your app.
Using View Controllers
In iOS 7, view controllers use full-screen layout.
At the same time,
  iOS 7 gives you more granular control over the way a view controller
  lays out its views.
In particular, the concept of full-screen layout
  has been refined to let a view controller specify the layout of each
  edge of its view.
The wantsFullScreenLayout view controller property is deprecated in
  iOS 7.
If you currently specify wantsFullScreenLayout = NO, the view
  controller may display its content at an unexpected screen location
  when it runs in iOS 7.
To adjust how a view controller lays out its views, UIViewController
  provides the following properties:
Use edgesForExtendedLayout to specify which
  edges of a view should be extended, regardless of bar translucency.
automaticallyAdjustsScrollViewInsets
If you don’t want a scroll view’s content insets to be automatically
  adjusted, set automaticallyAdjustsScrollViewInsets to NO.
(The
  default value of automaticallyAdjustsScrollViewInsets is YES.)
The topLayoutGuide and bottomLayoutGuide properties indicate the
  location of the top or bottom bar edges in a view controller’s view.
If bars should overlap the top or bottom of a view, you can use
  Interface Builder to position the view relative to the bar by creating
  constraints to the bottom of topLayoutGuide or to the top of
  bottomLayoutGuide.
(If no bars should overlap the view, the bottom of
  topLayoutGuide is the same as the top of the view and the top of
  bottomLayoutGuide is the same as the bottom of the view.)
In Interface Builder, highlight your view controller, and then navigate to the attributes inspector.
(I've enabled wireframes in IB to illustrate this) These elements, a UIButton and a UISegmentedControl both have their "y" origin set to zero, and the view controller is set to allow content below the top bar.
As you can see, the view controllers view has been shifted down appropriately for its y origin to be right underneath the navigation bar.
This can also be accomplished programmatically through the usage of -[UIViewController edgesForExtendedLayout].
In your apps plist file add a row, call it "View controller-based status bar appearance" and set it to NO.
Select those UIView's/UIIMageView's/... that you want to be moved down.
However, if you build the app across iOS 7 SDK and deploy it in iOS 6, the navigation bar appears translucent and the views go beneath it.
Add the key "View Controller-based status bar appearance" from the dropdownlist as a row in info.plist.
I created my view programmatically and this ended up working for me:
So I would suggest adding this method to your MyViewControler.m file:
I have a scenario where I use the BannerViewController written by Apple to display my ads and a ScrollViewController embedded in the BannerViewController.
1) Modify BannerViewController.m
2) Modify my ScrollViewContoller
Now the ads show up correctly at the bottom of the view instead of being covered by the Navigation bar and the content on the top is not cut off.
2.And Set, View controller-based status bar appearance : Boolean NO
I had the same issue with my app by iPads (armv7, armv7s, amr64) only by presenting another UIViewController and after dismiss them goes nav bar under status bar...
I'm using storyboard and in InterfaceBuilder for UIViewController which makes terrible i set Presentation from FullScreen -> Current Context and it fix this issue.
just set the following code in view will appear.
In my case having loadView() interrupted
this code:
self.edgesForExtendedLayout = UIRectEdgeNone
but after deleting loadView() everything worked fine
This view is invisible, but it still takes up space for layout purposes.
This view is invisible, and it doesn't take any space for layout purposes.
For ListView or GridView there is an another difference, when visibility initially set to
Adapter's getView() function called
Adapter's getView() function didn't call, thus preventing views to load, when it is unnecessary
View.GONE This view is invisible, and it doesn't take any space for
layout purposes.
View.INVISIBLE This view is invisible, but it still takes up space for layout purposes.
Now if you set visibility of Button Two as invisible (View.INVISIBLE), then the output will be
And when you set visibility of Button Two as gone (View.GONE) then the output will be
INVISIBLE:The view has to be drawn and it takes time.
GONE:The view doesn't have to be drawn.
I'd like to add to the right and successful answers, that if you initialize a view with visibility as View.GONE, the view could have been not initialized and you will get some random errors.
For example if you initialize a layout as View.GONE and then you try to start an animation, from my experience I've got my animation working randomly times.
So before handling (resizing, move, whatever) a view, you have to init it as View.VISIBLE or View.INVISIBLE to render it (draw it) in the screen, and then handle it.
_mButton = (Button)findViewByid(R.id.mButton);
View.INVISIBLE->The View is invisible but it will occupy  some space in layout
View.GONE->The View is not visible and it will not occupy any space in layout
View.GONE = The view will not show and the rest of the views will not take its existence into consideration
View.INVISIBLE = The view will not show, but it will take its assigned space in the layout
To highlight patterns while viewing the whole file, [h (hyper-link)] can do this.
Android throws an exception if you fail to pass the height or width of a view.
Note that the type of LayoutParams returned by getLayoutParams is that of the parent layout, not the view you are resizing.
For what it's worth, let's say you wanted to resize the view in device independent pixels (dp): -
I used this way to increase width of custom view
And change your size for these conditions in CustomView class easily.
I have basically a simple view inside xml file.
If there is a view group that this view belongs to, you may also need to call yourViewGroup.requestLayout() for it to take effect.
and what is the correct way to change
  the background color on any View?
On any View?
However, some Views already have backgrounds.
This [question (hyper-link)] talks about changing the background color of a view.
Obviously you are going to look into how to modify other objects on the screen, but this should give you a good start by at least allowing you to modify the background color of the view on button click.
For setting the first color to be seen on screen, you can also do it in the relevant layout.xml (better design) by adding this property to the relevant View:
Activity host = (Activity) view.getContext(); and
view.isFocused()
In Android 7+ the view does not have access to the enclosing activity anymore, so view.getContext() can't be cast to an Activity anymore.
Kotlin extension property for View to retrieve parent activity:
@Override
      public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
        if(request.getUrl().getHost().startsWith("pay.google.com")) {
          Intent intent = new Intent(Intent.ACTION_VIEW, request.getUrl());
          view.getContext().startActivity(intent);
          return true;
        }
        ...
        ...
      }
Just want to note that, if you know that your view is inside a Fragment, you can just do:
If you are not sure your view is inside a Fragment then refer to other answers e.g.
csview <filename>
I wrote this csv_view.sh to format CSVs from the command line, this reads the entire file to figure out the optimal width of each column (requires perl, assumes there are no commas in fields, also uses less):
I wrote a script, [viewtab (hyper-link)] , in Groovy for just this purpose.
[http://bayesianconspiracy.blogspot.com/2012/06/quick-csvtab-file-viewer.html (hyper-link)]
Tabview: lightweight python curses command line CSV file viewer (and also other tabular Python data, like a list of lists) is here on [Github (hyper-link)]
Spreadsheet-like view for easily visualizing tabular data
'Enter' to view the full cell contents
But then combined some code I found at [http://chrisjean.com/2011/06/17/view-csv-data-from-the-command-line (hyper-link)] which works better for me:
[xsv (hyper-link)] is more than a viewer.
Tabview is really good.
The Anaconda version is available here: [https://anaconda.org/bioconda/tabview (hyper-link)]
Use the free [DLL Export Viewer (hyper-link)], it is very easy to use.
If a DLL is written in one of the .NET languages and if you only want to view what functions, there is a reference to this DLL in the project.
If you would like to view the source code of that DLL file you can use a decompiler application such as .NET reflector.
You can set your controller or view (whichever creates the gesture recognizer) as the delegate of the UITapGestureRecognizer.
In your implementation you can test if the touch belongs to your new subview, and if it does, instruct the gesture recognizer to ignore it.
It has the same effect but this will work on any UIButton at any view depth (my UIButton was several views deep and the UIGestureRecognizer's delegate didn't have a reference to it.)
(1) [pointInside:withEvent: (hyper-link)]
(2)  [locationInView: (hyper-link)]
UPDATE - [Michael (hyper-link)] mentioned the link to the documentation describing this property: [cancelsTouchesInView (hyper-link)]
You have a simple view and some UIButtons,UITextField controls added as subviews to that view.
Now you want to dismiss the keyboard when you touch anywhere else on the view except on the controls(subviews you added)
Add the following method to your XYZViewController.m(which has your view)
If you have a single tap gesture recognizer attached to a button’s parent view, and the user taps the button, then the button’s action method receives the touch event instead of the gesture recognizer.
Button on superview with tapgesture
I had collection view with button
This method traverses the view hierarchy by calling the point(inside:with:) method of each subview to determine which subview should receive a touch event.
If point(inside:with:) returns true, then the subview’s hierarchy is similarly traversed until the frontmost view containing the specified point is found.
Update:  If you don't want the one-file-at-a-time diff, but instead want to use meld's "subdirectory" view with all the changes between the two branches, note the -d or --dir-diff option for git difftool.
Of course, you'll lose any changes made via meld, but it's quite nice for a quick overview of the differences, I think.
I made an UIView extension to apply a basic gradient to any view
after that in view controller, under class instantiate your 'Color' class like this:
state that function in viewDidLoad:
Extend UIView with this custom class.
GradientView.swift
gradientView.colors = [UIColor.blackColor().colorWithAlphaComponent(0.8), UIColor.clearColor()]
You can design your own Gradient View as follow:
Then call this method within viewWillAppear
Swift 3 - Uses only textures and SKSpriteNode, doesn't require UIView
Just Specify the Frame of the View, where you want to show the gradient color.
If you have view Collection (Multiple View) do this
Now you can call the function from any ViewController like so:
[code snippet]
use to your view, example
I wanted to add a gradient to a view, and then anchor it using auto-layout.
Add a view outlet
@IBOutlet weak var gradientView: UIView!
Add gradient to the view
If anybody is looking for a quick and easy way to add a gradient to a view:
Let's say you wanted a 30x40 ImageView at position (50,60) inside your layout.
Places two 30x40 ImageViews (one yellow, one red) at (50,60) and (80,90), respectively:
Places one 30x40 yellow ImageView at (50,60) and another 30x40 red ImageView <80,90> relative to the yellow ImageView:
Just to add to Andy Zhang's answer above, if you want to, you can give param to rl.addView, then make changes to it later, so:
However you have to make sure the parent layout of myView is an instance of RelativeLayout.
This way you can still expect the target view to adjust to any layout parameters set using layout XML files, instead of hardcoding those pixels/dps in your Java code.
In general, you can add a View in a specific position using a FrameLayout as container by specifying the leftMargin and topMargin attributes.
The following example will place a 20x20px ImageView at position (100,200) using a FrameLayout as fullscreen container:
Activity / Fragment / Custom view
Place any view on your desire X & Y point
Try below code to set view on specific location :-
It was useful for me because I needed the property of view to overlap each other on basis of their appearance, e.g the views get stacked one above other.
Just in case it may help somebody, you may also try this animator [ViewPropertyAnimator (hyper-link)] as below
Note: This pixel is not relative to the view.
You may get some information viewing it in assembly, but I think the easiest thing to do is fire up a virtual machine and see what it does.
With a disassembler, you can view the program assembly in more detail.
According to marcind's comment on [this related question (hyper-link)], the ASP.NET MVC team is looking to implement something similar to the <%: and <%= for the Razor view engine.
This also has the added benefit of putting less onus on the Razor View developer to ensure security from XSS vulnerabilities.
I've found an easy approach to do that with the ViewPropertyAnimator:
Following the @Andrey approach, if you want to move the view from its center, you only have to substract the view's half height and width to the movement.
In the code below, I've created something called the RegionView ([git (hyper-link)]), which is a reusable container responsible for managing drag and zoom operations for each of its nested children.
Here, we manipulate the top and left coefficients of a child View's LayoutParams to simulate movement about the diagram.
By decoupling the interpretation of handling what's understood as a drag operation, and what is determined to be a scale operation, we can provide reliable manipulation of a child View.
I recommend to use view.translationX and view.translationY to move your views.
(This code restrict your view from dragging out of its parent view)
parentView is the parent of your view.
Touch the container and the view will follow your finger.
In this example you can move the view within it's parent bounds no matter it's size, flawless animation, and catch clicks.
The reason that this solution is superior to other comments is that this approach uses a Directional Pad which calculate itself and won't relay on the View positions which is a the source for a-lot of bugs.
If you have the container inside a ScrollView or double dimension ScrollView you should add this line to the onTouch
Note: If you are trying to apply rounded corners to a UIViewController's view, it should not be applied in the view controller's constructor, but rather in -viewDidLoad, after view is actually instantiated.
You need the setMasksToBounds for it to load all the objects from IB... i got a problem where my view got rounded, but did not have the objects from IB :/
As described in [this blog post (hyper-link)], here is a method to round the corners of a UIView:
Then: [[yourView layer] setCornerRadius:5.0f];
Now you can use a swift category in UIView (code bellow the picture) in with @IBInspectable to show the result at the storyboard (If you are using the category, use only cornerRadius and not layer.cornerRadius as a key path.
set cornerRadious Property for round View
If you start with a regular UIView it has square corners.
You can give it round corners by changing the cornerRadius property of the view's layer.
However, sometimes a view can have a subview or a sublayer that goes outside of the view's bounds.
For example, if I were to add a subview like this
It is just that the first is used with UIView and the second is used with CALayer.
Using UIView Extension:
You can use following custom UIView class which can also change border color and width.
if round corner not working in viewDidload() it's better to write code in viewDidLayoutSubview()
In SwiftUI, you can use cornerRadius modifier directly on any View you want.
If they all need to be on the same page, one easy way to do this is to have a master view model containing an array (or property list) of the other view models.
Communication between the view models would not be difficult in this situation as you could relay through the masterVM, or you could use the $parent / $root in bindings, or some other custom options.
This is my answer after completing very large project with lots of ViewModels in single view.
Html View
For this view I'm creating 2 view models for id=container1 and id=container2 in two separate javascript files.
Container1ViewModel.js
Container2ViewModel.js
Then after these 2 viewmodels are registering as separate viewmodels in DataFunction.js
Like this you can add any number of viewmodels for separate divs.
But make sure do not create separate view model for a div inside registered div.
([http://knockoutjs.com/documentation/component-overview.html (hyper-link)])
It's inherited from TextView and want a TransformationMethod as a parameter.
You can dynamically change the attributes of a TextView.
If you would set the XML Atrribute android:password to true the view would show dots if you set it to false the text is shown.
(Disclaimer: I have not tested if the method still works after the view is displayed.
TextView uses TransformationMethods to do things like replacing the
characters of passwords with dots, or keeping the newline characters
from causing line breaks in single-line text fields.
Create an edit text view and a normal text view
Attach an onClickListener to the normal text view so that it changes the input type of the edit text view accordingly (Visible / Non-visible)
where ivShowPassword is clicked imageview (eye) and etPassword is Editext
2 - Aet "show_password_selector" file into imageview.
If you know the exact size of the view, just use setLayoutParams():
However, if you need a more flexible approach you can override onMeasure() to measure the view more precisely depending on the space available and layout constraints (wrap_content, match_parent, or a fixed size).
you can set the height and width of a view in a relative layout like this
This is a Kotlin based version, assuming that the parent view is an instance of LinearLayout.
On Kotlin you can set width and height of any view directly using their virtual properties:
Since the iOS 13, UIViewController contains a new property called isModalInPresentation which must be set to true to prevent the interactive dismissal.
It basically ignores events outside the view controller's bounds.
From the [official docs (hyper-link)]: If true, UIKit ignores events outside the view controller's bounds and prevents the interactive dismissal of the view controller while it is onscreen.
This method is called only if the presented view controller is not dismissed programmatically and its isModalInPresentation property is set to false.
If you want the same behaviour as it's in previous iOS version (< iOS13) like model presentation in fullscreen, just set the presentation style of your destination view controller to UIModalPresentationStyle.fullScreen 
[code snippet]
And if you are using storyboard just select the segua and select Full Screen form the Presentation dropdown.
If you just want to disable the interactive dismissal and keep the new presentation style set UIViewController property isModalInPresentation to true.
When you set it to true, UIKit ignores events outside the view controller's bounds and prevents the interactive dismissal of the view controller while it is onscreen.
All view controllers in your navigation stack will then be full screen and will not be able to be dismissed by the user.
On ViewDidLoad if your ViewController has been presented within a Navigation Controller:
You should make your TextView request focus:
The answer of Sherif elKhatib can be greatly improved, if you want to scroll the view to the center of the scroll view.
This reusable method smooth scrolls the view to the visible center of a HorizontalScrollView.
For a vertical ScrollView use
I made a small utility method based on Answer from WarrenFaith, this code also takes in account if that view is already visible in the scrollview, no need for scroll.
My EditText was nested several layers inside my ScrollView, which itself isn't the layout's root view.
Because getTop() and getBottom() were seeming to report the coordinates within it's containing view, I had it compute the distance from the top of the ScrollView to the top of the EditText by iterating through the parents of the EditText.
public void RequestChildFocus (View child, View focused)
child - The child of this ViewParent that wants focus.
This view will contain the focused view.
It is not necessarily the view that actually has focus.
focused - The view that is a descendant of child that actually has focus
Examining Android source code, you can find that there already is a member function of ScrollView– scrollToChild(View) – that does exactly what is requested.
Based on that function I've written following function that finds the first ScrollView above the View specified as a parameter and scrolls it so that it becomes visible within the ScrollView:
In my opinion the best way to scroll to a given rectangle is via [View.requestRectangleOnScreen(Rect, Boolean) (hyper-link)].
You should call it on a View you want to scroll to and pass a local rectangle you want to be visible on the screen.
Que:Is there a way to programmatically scroll a scroll view to a specific  edittext?
Ans:Nested scroll view in recyclerview  last position added record data.
[Is there a way to programmatically scroll a scroll view to a specific edit text?
[ScrollView.requestChildRectangleOnScreen (hyper-link)]
It is a good idea to wrap it into postDelayed to make it more reliable, in case the ScrollView is being changed at the moment
This gets the scroll amount necessary to show the bottom of the view, including any margin on the bottom of that view.
The above answers will work fine if the ScrollView is the direct parent of the ChildView.
If your ChildView is being wrapped in another ViewGroup in the ScrollView, it will cause unexpected behavior because the View.getTop() get the position relative to its parent.
If scrlMain is your NestedScrollView, then use the following,
Second thing is to find the best positioning scroll point for an editor, to do this we scroll to top, and then request the editor fields to make the ScrollView component to do the best positioning.
NOTE: The main container ScrollView is a member field named scrollViewSignup, because my example was a signup screen, as you may figure out a lot.
If you want to scroll to a view when a soft keyboard is opened, then it might get a bit tricky.
We are setting a callback on a root view to make sure we get called.
Insets could be consumed before our view in question received them, so we have to do additional work here.
I use post to run an action after scrollable parent scheduled scroll to a focused view.
yourScrollView.smoothScrollTo(0, yourEditText.getTop());
You can have multiple projects within one solution and therefore view many projects at the same time.
If you have two separate solutions, then you cannot view them simultaneously in the same VS instance.
For interest sake you could open another multiple solution windows to view different projects at the same time.
To add a button programatically to your controller's view, use the following:
and you can add it to the view:
first write this in your .h file of viewcontroller
Now write this in your .m file of viewcontrollers viewDidLoad.
write this outside viewDidLoad method in .m file of your view controller
You can implement it in your ViewDidLoad Method:
Yes, you can call setId(value) in any view with any (positive) integer value that you like and then find it in the parent container using findViewById(value).
Note that it is valid to call setId() with the same value for different sibling views, but findViewById() will return only the first one.
You can just use the View.setId(integer) for this.
Due to this, you can use any (positive) Integer for the Views  you add programmatically.
According to View documentation
The identifier does not have to be unique in this view's hierarchy.
So you can use any positive integer you like, but in this case there
  can be some views with equivalent id's.
If you want to search for some
  view in hierarchy calling to setTag with some key objects may be
  handy.
An Android id is an integer commonly used to identify views; this id can be assigned via XML (when possible) and via code (programmatically.)
The id is most useful for getting references for XML-defined Views generated by an Inflater (such as by using setContentView.)
Add an attribute of android:id="@+id/somename" to your view.
(Also, an id assigned to a Preference in XML is not used when the Preference generates its View.)
Manually set ids using someView.setId(int);
For example, if creating and numbering several views representing items, you could use their item number.
findViewById(int) will iterate depth-first recursively through the view hierarchy from the View you specify and return the first View it finds with a matching id.
As long as there are no code-assigned ids assigned before an XML-defined id in the hierarchy, findViewById(R.id.somename) will always return the XML-defined View so id'd.
In layout XML, define an empty ViewGroup with id.
Use code to populate the placeholder ViewGroup with Views.
If you need or want, assign any ids that are convenient to each view.
Query these child views using placeholder.findViewById(convenientInt);
API 17 introduced View.generateViewId() which allows you to generate a unique ID.
If you choose to keep references to your views around, be sure to instantiate them with getApplicationContext() and be sure to set each reference to null in onDestroy.
API 17 introduced View.generateViewId() which generates a unique ID.
If your ViewGroup cannot be defined via XML (or you don't want it to be) you can reserve the id via XML to ensure it remains unique:
Then once the ViewGroup or View has been created, you can attach the custom id
Next, MyActivity.java defines some adds views programmatically (via code):
So placeholder and one of our new TextViews both have an id of 12!
But this isn't really a problem if we query placeholder's child views:
For example, the user might click on a deep link to view a page within a shopping app that describes a product offering that the user is searching for.
Try getWindow().getDecorView().findViewById(android.R.id.content).invalidate();
Invalidate the whole view.
If the view is visible, onDraw(Canvas) will be called at some point in the future.
Now, when the Activity resumes, it makes every View to draw itself.
To apply the theme, make sure you do it before any View is drawn, i.e., before setContentView(R.layout.mainscreen);
Note that this should be called before any views are instantiated in the Context (for example before calling setContentView(View) or inflate(int, ViewGroup)).
The API doc reference is here: [http://developer.android.com/reference/android/view/ContextThemeWrapper.html#setTheme%28int%29 (hyper-link)]
Since the onDraw() method works on already instantiated Views, setTheme will not work.
redo setContentView (R.layout.mainscreen); to force reinstantiate all the layout.
Just set your content view in onresume
setContentView(R.layout.yourview) inside onResume..
I was having this problem as well but following Farhan's lead of using setContentView() I did just that.
using setContentView() by itself was not enough however.
I found that I had to repopulate all of my views with information.
Calling invalidate() or postInvalidate() on the root layout apparently does NOT guarantee that children views will be redrawn.
In my specific case, my root layout was a TableLayout and had several children of class TableRow and TextView.
Calling postInvalidate(), or requestLayout() or even forceLayout() on the root TableLayout object did not cause any TextViews in the layout to be redrawn.
So, what I ended up doing was recursively parsing the layout looking for those TextViews and then calling postInvalidate() on each of those TextView objects.
Guys I tried all of your Solutions but they did not worked for me, I have to set setVisibility of EditText to VISIBLE and this EditText should be visible then in ScrollView, but I was unable to refresh root view to take effect.
I solved my problem, when I need to refresh the view so I changed the ScrollView visibility to GONE and then again set it to VISIBLE to take effect and it worked for me.
To clear a view extending ViewGroup, you just need to use the method removeAllViews()
Just like this (if you have a ViewGroup called myElement) :
If you are going to create a custom view, make sure it is extending SurfaceView then, you can redraw it with method getHolder().lockCanvas().
The author explains how all the versions of the inflate method work and gives examples of ListView and AlertDialog
Layout inflation is the term used within the context of Android to indicate when an XML layout resource is parsed and converted into a hierarchy of View objects.
The ViewGroup been asked for here as part of the inflate method parameters is used to inherit higher level styling.While passing null can seem harmless, it can actually cause serious problems for your app later on.
When you really don't have any parent (for example creating view for AlertDialog), you have no other way than passing null.
Here ya go, for some reason using View.inflate instead of inflating from a layoutinflater makes the lint error disappear.
An easier solution is to keep the bottom left icon pressed which will pop up another icon which, when selected, will allow you to view the console to the right of your main browser window
[LinearLayout (hyper-link)] is a subclass of [ViewGroup (hyper-link)], which has a method called [addView (hyper-link)].
The [addView (hyper-link)] method should be what you are after.
Calling addView is the correct answer, but you need to do a little more than that to get it to work.
If you create a View via a constructor (e.g., Button myButton = new Button();), you'll need to call setLayoutParams on the newly constructed view, passing in an instance of the parent view's LayoutParams inner class, before you add your newly constructed child to the parent view.
Every view needs at least a layout_width and a layout_height parameter.
I struggled with getting Views added to a TableRow to display properly until I figured out that I wasn't passing an instance of TableRow.LayoutParams to the child view's setLayoutParams.
This is late but this may help someone :) :)
For adding the view programmatically try like
This will create your entire view programmatcally.
You can add any number of view as same.
The best way I found is to use the inflate static method of View.
where yourViewXML is something like R.layout.myView
please notice that you need a ViewGroup in order to add a view (which is any layout you can think of)
so as an example lets say you have a fragment which it view already been inflated and you know that the root view is a layout, and you want to add a view to it:
Kotlin code for the example above (view is the getView() of a fragment)
One more way to add view from Activity
a FrameLayout with proper constraints (or proper placing in other layout such as linear) at position where you would expect the programmatically created view to have.
All you need to do is inflate the view programmatically and it as a child to the FrameLayout by using addChild() method.
Then during runtime your view would be inflated and placed in right position.
Per Android recommendation, you should add only one childView to FrameLayout[ [link] (hyper-link)].
Here is what your code would look like, supposing you wish to create TextView programmatically at a particular position:
In your layout which would contain the view to be inflated, place a FrameLayout at the correct position and give it an id, say, "container".
Step 2
Create a layout with root element as the view you want to inflate during runtime, call the layout file as "textview.xml" :
If not set, because a child view of the frame, by default, goes to left-top of the frame layout, hence your view will simply fly to left top of the screen.
(Note that setting last parameter of findViewById to null and adding view by calling addView() on container view (frameLayout) is same as simply attaching the inflated view by passing true in 3rd parameter of findViewById().
You guys should also make sure that when you override onLayout you HAVE to call super.onLayout with all of the properties, or the view will not be inflated!
Now you can view files with tree view.
If you want treeview like explorer, you can go with [LightExplorer (hyper-link)]
Notepad++ -> View-> Project-> choose Panel 1 OR Panel 2 OR Panel 3 ->
open notepad++, then drag and drop the folder you want to open as tree view.
No, this is generally good design, it helps keep your view controllers concise.
However you should be using the view controller containment pattern, take a look at the following documentation.
[Implementing a Container View Controller (hyper-link)]
This is incredibly simple to setup using Interface Builder with Storyboards as well, take a look at the Container View in the object library.
In this example you would have 4 view controllers, one that holds the 3 containers, and one for each container.
You can access these child view controllers via the childViewControllers property or there is a method you can override prepareForSegue:sender: and capture the destination view controllers of the segue about to be called.
This is also a good point to pass properties to the child view controllers if any are needed.
I put this code in the parent view controller.
Another option is to use IB and put container view.
UIViewController will show up automatically (XCode 9 in this case):
[ (hyper-link)]
You can simply just set the selectedIndex property on the UITabBarController to the appropriate index and the view will be changed just like the user tapped the tab button.
If you have the object reference of the view controller you want to switch to, you can do:
Of course you must make sure, that myViewController really is in the list of tabBarController.viewControllers.
Please note that my tabController links to viewControllers behind navigationControllers.
Use it like this ("Humans" and "Robots" must also be set in storyboard for specific viewController and it's Restoration ID, or use Storyboard ID and check "use storyboard ID" as restoration ID):
Please note that my tabController links to viewControllers behind navigationControllers.
My issue is a little different, I need to switch from one childViewController in 1st tabBar to home viewController of 2nd tabBar.
And when I debug, viewDidAppear, viewWillAppear, viewDidLoad, none of them is called.
After figuring out which ViewPager methods are called by ViewPager and which are for other purposes, I came up with a solution.
After the advice of Peri Hartman, it started to work after I set null do ViewPager adapter and put the adapter again after the views removed.
I was looking for simple solution to remove views from viewpager (no fragments) dynamically.
So, if you have some info, that your pages belongs to, you can set it to View as tag.
[ViewPager PagerAdapter not updating the View (hyper-link)]
[Update ViewPager dynamically?
... is to setTag() method in
  instantiateItem() when instantiating a new view.
Then instead of using
  notifyDataSetChanged(), you can use findViewWithTag() to find the view
  you want to update.
On the next activity, there is a view pager which contains two mandatory pages.And 4 more pages will be there, which will be visible corresponding to the grid data selected.
Here TabFragment1,TabFragment2 etc are fragment to be displayed on the viewpager.And I am not showing the layouts since they are out of scope of this project.
ViewPagerAdapter
Viewpageradapter.class
setup ViewPager every time you delete or add Tab(Fragment).
Did you try [textView sizeThatFits:textView.bounds] ?
I'm not sure if that's what you want, or if [textView sizeToFit] is more what you were looking for.
You can then use the returned size to change the size of your view to fit.
Also, the text isn't actually rendered at the top of the UITextView.
In my code, I set the new height of the UITextView to be 24 pixels larger than the height returned by the sizeOfFont methods.
There is actually a very easy way to do resizing of the UITextView to its correct height of the content.
It can be done using the UITextView contentSize.
One thing to note is that the correct contentSize is only available after the UITextView has been added to the view with addSubview.
With the 6+ only (not the 5s or 6) it does add "one more blank line" to the UITextView.
This worked nicely when I needed to make text in a UITextView fit a specific area:
If you don't have the UITextView handy (for example, you're sizing table view cells), you'll have to calculate the size by measuring the string, then accounting for the 8 pt of padding on each side of a UITextView.
For example, if you know the desired width of your text view and want to figure out the corresponding height:
In practice, you may want to add an extra font.leading to the height; this adds a blank line below your text, which may look better if there are visually heavy controls directly beneath the text view.
The Best way which I found out to re-size the height of the UITextView according to the size of the text.
In iOS6, you can check the contentSize property of UITextView right after you set the text.
If you want to restore this behavior for iOS7, place the following code in a subclass of UITextView.
For iOS 7.0, instead of setting the frame.size.height to the contentSize.height (which currently does nothing) use [textView sizeToFit].
Here is gitHub repo for those, who don't want to read all that text: [resizableTextView (hyper-link)]
So, let's make our own ResizableTextView.
The first problem we meet here is that don't know real content size before viewDidLoad method.
So now we know real contentSize no matter where we are: before or after viewDidLoad.
Now add height constraint on textView (via storyboard or code, no matter how).
ResizableTextView.m
You can easily animate changes to make textView stretch smoothly.
The key thing you need to do is turn off scrolling in your UITextView.
To make a dynamically sizing UITextView inside a UITableViewCell, I found the following combination works in Xcode 6 with the iOS 8 SDK:
Add a UITextView to a UITableViewCell and constrain it to the sides
Set the UITextView's scrollEnabled property to NO.
With scrolling enabled, the frame of the UITextView is independent of its content size, but with scrolling disabled, there is a relationship between the two.
If your table is using the original default row height of 44 then it will automatically calculate row heights, but if you changed the default row height to something else, you may need to manually switch on auto-calculation of row heights in viewDidLoad:
[code snippet]
For read-only dynamically sizing UITextViews, that’s it.
If you’re allowing users to edit the text in your UITextView, you also need to:
Implement the textViewDidChange: method of the UITextViewDelegate protocol, and tell the tableView to repaint itself every time the text is edited:
[code snippet]
And don’t forget to set the UITextView delegate somewhere, either in Storyboard or in tableView:cellForRowAtIndexPath:
For those who want the textview to actually move up and maintain the bottom line position
Here, I was only concerned with height, keeping the width fixed and had missed the width constraint of my TextView in storyboard.
The only code that will work is the one that uses 'SizeToFit' as in jhibberd answer above but actually it won't pick up unless you call it in ViewDidAppear or wire it to UITextView text changed event.
Swift answer:
The following code computes the height of your textView.
Now you can set the height of your textView to myTextHeight
Starting with iOS 8, it is possible to use the auto layout features of a UITableView to automatically resize a UITextView with no custom code at all.
The UITextView must have scrolling disabled, which you can do programmatically or through the interface builder.
It will not resize if scrolling is enabled because scrolling lets you view the larger content.
In viewDidLoad for the UITableViewController, you must set a value for estimatedRowHeight and then set the rowHeight to UITableViewAutomaticDimension.
The easiest way to ask a UITextView is just calling -sizeToFitit should work also with scrollingEnabled = YES, after that check for the height and add a height constraint on the text view with the same value.
Pay attention that UITexView contains insets, this means that you can't ask the string object how much space it want to use, because this is just the bounding rect of the text.
All the person that are experiencing wrong size using -sizeToFit it's probably due to the fact that the text view has not been layout yet to the interface size.
This always happen when you use size classes and a UITableView, the first time cells are created in the - tableView:cellForRowAtIndexPath: the comes out with the size of the any-any configuration, if you compute you value just now the text view will have a different width than the expected and this will screw all sizes.
To overcome this issue I've found useful to override the -layoutSubviews method of the cell to recalculate textview height.
Just remember to set scrolling enabled to NO for your UITextView:
You may even use UITableViewAutomaticDimension.
If you are using scrollview and content view,and you want to increase the height depending the TextView content height,then this piece of code will help you.
and of course set textview.scrollEnabled = NO;
Set Height constraints for UITextView.
3.don't forget to set delegate for your textview.
I reviewed all the answers and all are keeping fixed width and adjust only height.
so when configuring your text view, set scroll disabled
and then in delegate method func textViewDidChange(_ textView: UITextView) add this code:
Here is the answer if you need resize textView and tableViewCell dynamically in staticTableView
if you use UIScrollView you should add this too;
Add your UITextView to the View.
Use UITextViewDelegate method func textViewDidChange(_ textView: UITextView) to adjust the size of the TextView
It's quite easy with Key Value Observing (KVO), just create a subclass of UITextView and do:
If you don't want to subclass you could try doing textView.bounds = textView.contentSize in the contentSize observer.
This works fine for Swift 5 in case you want to fit your TextView once user write text on the fly.
Just implement UITextViewDelegate with:
Using UITextViewDelegate is the easiest way:
The simplest solution that worked for me was to put a height constraint on the textView in the Storyboard, then connect the textView and height constraint to the code:
Then after setting the text and paragraph styles, add this in viewDidAppear:
In my case, I was setting custom attributes to the font inside the code, therefore I had to set the height in viewDidAppear (it wouldn't work properly before that).
If you aren't changing any text attributes in code, you should be able to set the height in viewDidLoad or anywhere after setting the text.
Looks like this guy figured it out for NSTextView and his answer applies to iOS too.
[NSTextView in NSOutlineView with IntrinsicContentSize setting wrong height (hyper-link)]
You may want to try View.getRootView().
You can get the view Back if you put an ID to your Layout.
And call it from findViewById ...
You can also override onContentChanged() which is among others fired when setContentView() has been called.
There is no "isContentViewSet" method.
You may put some dummy requestWindowFeature call into try/catch block before setContentView like this:
If content view was already set, requestWindowFeature will throw an exception.
Update: At the time of answering this question (mid 2012, API level 14-15), setting the view programmatically was not an option (even though there were some non-trivial workarounds) whereas this has been made possible after the more recent API releases.
You cannot set a view's style programmatically yet, but you may find [this thread (hyper-link)] useful.
You can create the xml containing the layout with the desired style and then change the background resource of your view, like [this (hyper-link)].
Technically you can apply styles programmatically, with custom views anyway:
The one argument constructor is the one used when you instantiate views programmatically.
I used views defined in XML in my composite ViewGroup, inflated them added to Viewgroup.
and my view in xml where i can assign styles:
in your activity, before setContentView().
Here's my snippet to set custom defined style programatically to your view:
If you'd like to continue using XML (which the accepted answer doesn't let you do) and set the style after the view has been created you may be able to use the Paris library which supports a subset of all available attributes.
Since you're inflating your view from XML you'd need to specify an id in the layout:
For more: [the list of supported view types and attributes (hyper-link)] (includes background, padding, margin, etc.
This is my simple example, the key is the ContextThemeWrapper wrapper, without it, my style does not work, and using the three parameters constructor of the View.
For a new Button/TextView:
Define and apply styles to Android views programmatically.
This is quite old question but solution that worked for me now is to use 4th parameter of constructor defStyleRes - if available.. on view... to set style
if inside own custom view :
val editText = TextInputEditText(context, attrs, defStyleAttr)
The code above, in your touchesBegan method for example would pass the touches to all of the subviews of view.
If the view you want to forward the touches to doesn't happen to be a subview / superview, you can set up a custom property in your UIView subclass like so:
Wherever you instantiate your UIView, set the forwardableTouchee property to whatever view you'd like the events to be forwarded to:
For passing touches from an overlay view to the views underneath, implement the following method in the UIView:
I have a covering UIView with subviews, and only want to intercept the touches that hit one of the subviews, so I modified PixelCloudSt's answer to
As suggested by @PixelCloudStv if you want to throw touched from one view to another but with some additional control over this process - subclass UIView
After in interfaceBuilder just set class of View to TouchView and set active rect with your rect.
I had a similar issue with a UIStackView (but could be any other view).
For layout purposes, I included the buttons in a UIStackView, but now the middle (empty) part of the stackView intercepts touches :-(
What I did is create a subclass of UIStackView with a property defining the subView that should be touchable.
Now, any touch on the side buttons (included in the * viewsWithActiveTouch* array) will be given to the buttons, while any touch on the stackview anywhere else than these views won't be intercepted, and therefore passed to whatever is below the stack view.
You can use this UIView subclass as transparent view passing touches outside its subview.
Say then you have a large "holder" panel, perhaps with a table view behind.
You make the "holder" panel PassthroughView.
Note that somewhat confusingly, the "holder" itself - the view you use PassthroughView on - must be marked user interaction enabled ON!
(Otherwise, the code in PassthroughView simply will never be called.)
I had couple of labels inside StackView and I didn't have much success with the solutions above, instead I solved my problem using below code:
Subclassing UIStackView:
The situation I was trying to do was build a control panel using controls inside nested UIStackView’s.
Basically, I sub-classed UIStackView and overwrote the “point(inside:with) routine to look for the type of controls that needed the touch and “ignore” things like labels that I wanted to ignore.
It also checks for inside UIStackView’s so that things can recurse into the control panel structure.
Just be sure in Interface Builder to change the class of the UIStackView's to PassThruStack.
I needed to pass touches through a UIStackView.
A UIView inside was transparent, but the UIStackView consumed all touches.
All arrangedSubviews still receive touches, but touches on the UIStackView itself went through to the view below (for me a mapView).
-- ON VIEWS suppose you want to show or hide something based on web.config Value--
@if (phase != "1")
{
@Html.Partial("~/Views/Shared/_LeftSideBarPartial.cshtml")
}
Q: For #2, why does the mail view need this information, and the regular views do not?
A: Because the regular views don't need to know the host, since all generated links are served from the host they link to.
Typically you might want to use a custom view helper in rendering the subject line of an email as well as the HTML.
In the case where the view helper is in app/helpers/application_helper.rb as follows:
FWIW, the email template at app/views/user_mailer/party_thanks.html.erb looks like this:
Sliding a View down by a distance:
You can later slide the View back to its original position like this:
The following animation will slide a View down by its height and fade it in at the same time:
You can then fade the View back out and slide it back to its original position.
We also set an AnimatorListener so we can set the visibility of the View back to GONE once the animation is finished:
you can slide up and down any view or layout by using bellow code in android app
Just get a reference to your view and call this method:
Easiest solution: set android:animateLayoutChanges="true" on the container holding your views.
To put it into some context: If you have a layout like below, all visibility changes to the views in this container will be animated automatically.
I had a corner case where my view's height was still zero so...
If you want to start with the view on screen, then don't initialize it as INVISIBLE.
Based on [Suragch (hyper-link)]'s [answer (hyper-link)], here is an elegant way using View extension:
And then wherever you want to use it, you just need myView.slideUp() or myView.slideDown()
Just call [TransitionManager.beginDelayedTransition (hyper-link)] method with [Slide (hyper-link)] transition then change visibility of the view.
Here's another way to do for multiple Button(In this case ImageView)
A complete answer which toggles the view visibility in onClick, also flips arrow upside down, and also moves other views up smoothly when hiding the component.
the views looks like this
then inside your code you add this line first, which solves animateLayoutChanges not working in big nested views, which basically makes other views move up smoothly when hiding the recyclerview
then call the method with your views
If someConditionIsTrue, it would return a TabView, otherwise a LoginView.
If you wrap your condition in a stack view, the stack view will include the concrete types of both conditional branches in its own generic type:
As a consequence, no matter which view is actually returned, the result type of the stack will always be the same and hence the compiler won't complain.
There is actually a view component SwiftUI provides specifically for this use case and it's actually what stacks use internally as you can see in the example above:
I recommend using that view container rather that a stack because it makes its purpose semantically clear to other developers.
Based on the comments I ended up going with this solution that will regenerate the view when the api key changes by using @EnvironmentObject.
ContentView.swift
Another approach using [ViewBuilder (hyper-link)] (which relies on the mentioned ConditionalContent)
One could also wrap the result View into AnyView
Previous answers were correct, however, I would like to mention, you may use optional views inside you HStacks.
The simplest way to avoid using an extra container like HStack is to annotate your body property as @ViewBuilder, like this:
I needed to embed a view inside another conditionally, so I ended up creating a convenience if function:
This does return an AnyView, which is not ideal but feels like it is technically correct because you don't really know the result of this during compile time.
In my case, I needed to embed the view inside a ScrollView, so it looks like this:
UPDATE: Please read the drawbacks of using conditional modifiers before using this: [https://www.objc.io/blog/2021/08/24/conditional-view-modifiers/ (hyper-link)]
Logic of UI contains in View.
View file:
I have a conditional contentView, which either is a text or an icon.
I chose to solve this by creating a modifier that makes a view "visible" or "invisible".
I have considered wrapping this into some kind of an "If" view that would
take two views, one when the condition is true and one when the condition is
false, but I decided that my present solution is both more general and more
readable.
Just hide the complexity of the control flow from the ViewBuilder:
If you want to navigate to two different views using NavigationLink, you can navigate using ternary operator.
It is a wrapper on :verbose to show result in a preview window.
That's
  because iOS calculates the shadow by getting the exact pixel mask of
  the view, including any tranlucent content, and all of its subviews,
  which is very CPU and GPU-intensive.
This diff solves problem number 1) by implementing a default
  shadowPath that matches the view border for views with an opaque
  background.
I've also reinstated background color
  propagation for views which have shadow props - this should help
  ensure that this best-case scenario occurs more often.
For views with an explicit transparent background, the shadow will
  continue to work as it did before ( shadowPath will be left unset,
  and the shadow will be derived exactly from the pixels of the view and
  its subviews).
Reviewed By: weicool
and if I need some view specific styles I define the Styles section in each view:
Edit: It's useful to know that the second parameter in @RenderSection, false, means that the section is not required on a view that uses this master page, and the view engine will blissfully ignore the fact that there is no "Styles" section defined in your view.
If true, the view won't render and an error will be thrown unless the "Styles" section has been defined.
UPDATE: Added "false" in the @RenderSection statement so your view won't 'splode when you neglect to add a @section called head.
Unlike Collections.reverse, this is purely a view... it doesn't alter the ordering of elements in the original list.
Additionally, with an original list that is modifiable, changes to both the original list and the view are reflected in the other.
[ListView.setEmptyView() (hyper-link)]
Does also work with a GridView...
Layout xml, the id in both views are important.
I highly recommend you to use  ViewStubs like this
The textView ("@+id/emptyElement") is the placeholder for the empty listview.
Remember to place the emptyView after binding the adapter to listview.Mine was not working for first time and after I moved the setEmptyView after the setAdapter it is now working.
You can open them with most decompression utilities these days, then just get something like [DJ Java Decompiler (hyper-link)] if you want to view the source.
For anything such as viewing the contents, you could use :
Window>>Show View>>Other>>Java>>Package Explorer
You could try [JarNavigator (hyper-link)] to view and search contents of a jar file.
[Bndtools (hyper-link)] provides a free JAR viewer plugin for Eclipse.
Add the [Eclipse update site (hyper-link)] and install only the viewer.
Additional information: [https://docs.oracle.com/javase/tutorial/deployment/jar/view.html (hyper-link)]
To view the content of files, you can extract the files in a folder by:
Or in Windows rename .jar file to .zip & then you can unzip to extract & view the content of jar file.
My requirement was to view the content of a file (like a property file) inside the jar, without actually extracting the jar.
You can view JAR files like ZIP files from Windows Explorer by doing the following:
Easiest way to view classes, methods, properties, etc.
Add your new stuff to the class and return it in the view.
Then in the view, ensure you inherit your new class and change the bits of code that will now be in error.
The easiest way to pass additional data is to add the data to the existing ViewData for the view as @Joel Martinez notes.
However, if you don't want to pollute your ViewData, RenderPartial has a method that takes three arguments as well as the two-argument version you show.
The third argument is a ViewDataDictionary.
You can construct a separate ViewDataDictionary just for your partial containing just the extra data that you want to pass in.
RenderPartial takes another parameter that is simply a ViewDataDictionary.
Note that this will override the default ViewData that all your other Views have by default.
If you are adding anything to ViewData, it will not be in this new dictionary that you're passing to your partial view.
To extend on what womp posted, you can pass new View Data while retaining the existing View Data if you use the constructor overload of the ViewDataDictionary like so:
You can use the dynamic variable ViewBag
The current Entity Framework EDM generator will create a composite key from all non-nullable fields in your view.
In order to gain control over this, you will need to modify the view and underlying table columns setting the columns to nullable when you do not want them to be part of the primary key.
To get a view I had to only show one primary key column I created a second view that pointed to the first and used NULLIF to make the types nullable.
This worked for me to make the EF think there was just a single primary key in the view.
An easy way to apply this is to wrap the select statement of your view in another select.
and your view is something like this
Find the view in the diagram.
I did not have to change my view to use the ISNULL, NULLIF, or COALESCE workarounds.
Then you simply import the function rather than the view.
controller_name holds the name of the controller used to serve the current view.
If you have a static_pages controller with an about action, you can then highlight the link like so in your view:
controller_path holds the path of the controller used to serve the current view.
controller_name holds the name of the controller used to serve the current view.
Think of a view as a "static filter" on a table or a combination of tables.
For example: a view may combine tables Order and Customer so you get a new "table" of rows from Order along with new columns containing the customer's name and the customer number (combination of tables).
Or you might create a view that selects only unprocessed orders from the Order table (static filter).
You'd then select from the view like you would select from any other "normal" table - all "non-static" filtering must be done outside the view (like "Get all the orders for customers called Miller" or "Get unprocessed orders that came in on Dec 24th").
No, a view is queried no differently to SELECTing from a table.
Unfortunately, neither can be done using a view.
no 
you can pass the parameter to the procedure in view
This allows you to use it as a normal view, with:
A view is nothing more than a predifined 'SELECT' statement.
It seems likely that you really only need to add a where clause when you select from your view though, but you didn't really provide enough details to be sure.
No, a view is static.
One thing you can do (depending on the version of SQl server) is index a view.
In your example (querying only one table), an indexed view has no benefit to simply querying the table with an index on it, but if you are doing a lot of joins on tables with join conditions, an indexed view can greatly improve performance.
we can write a stored procedure with input parameters and then use that stored procedure to get a result set from the view.
and the view from which we can get the result set is
Then you can add a join to that table in your view to create the desired effect, and update the settings table before running the view.
If you have multiple users updating the settings table and running the view concurrently things could go wrong, but otherwise it should work OK. Something like:
As I know view can be something just like select command.
Why do you need a parameter in view?
You can bypass just to run the view, SQL will wine and cry but just do this and run it!
Just add the column you want to restrict on to the view:
Your view can reference some external table containing your parameters.
As others mentioned, the view in SQL Server cannot have external input parameters.
However, you can easily fake a variable in your view using CTE.
Normally views are not parameterized.
Simply use this view into stored procedure with required parameter/s (eg.
in SQL Server) and parameter values in querying view.
Create stored procedure with View/ table: _spCallViewWithParameters
Most of the times, we think of Views as a query that sends out the data, but a View is more than that... Views can be used to update the data in underlying tables as well.
You can right-click a View in SSMS and you will find the option "Edit Top 200 rows".
I believe to enable this ability of editing data as, there are certain limitations on how query is written for View, it needs to be a static query.
So unlike a User Defined Function or Stored Procedure, which sends out the queried data and closes, a View can maintain a live connection (e.g.
in Microsoft Access linked tables/views) and write the updates back to the database.
The main difference is that SurfaceView can be drawn on by background theads but Views can't.
SurfaceViews use more resources though so you don't want to use them unless you have to.
Views are all drawn on the same GUI thread which is also used for all user interaction.
So if you need to update GUI rapidly or if the rendering takes too much time and affects user experience then use SurfaceView.
SurfaceViews contain a nice rendering mechanism that allows threads to update the surface's content without using a handler (good for animation).
Surfaceviews cannot be transparent, they can only appear behind other elements in the view hierarchy.
I've found that they are much faster for animation than rendering onto a View.
Yes, the main difference is surfaceView can be updated on the background thread.
surfaceView has dedicate surface buffer while all the view shares one surface buffer that is allocated by ViewRoot.
In another word, surfaceView cost more resources.
surfaceView cannot be hardware accelerated (as of JB4.2) while 95% operations on normal View are HW accelerated using openGL ES.
More work should be done to create your customized surfaceView.
However, to customize the View, all you need to do is override onDraw method.
Normal view update mechanism is constraint or controlled by the framework:You call view.invalidate in the UI thread or view.postInvalid in other thread to indicate to the framework that the view should be updated.
However, the view won't be updated immediately but wait until next VSYNC event arrived.
In Android, all the normal view update (and display actually but I won't talk it today), is synchronized with VSYNC to achieve better smoothness.
Now,back to the surfaceView, you can render it anytime as you wish.
A SurfaceView is a custom view in Android that can be used to drawn inside it.
The main difference between a View and a SurfaceView is that a View is drawn in the
UI Thread, which is used for all the user interaction.
If you want to update the UI rapidly enough and render a good amount of information in
it, a SurfaceView is a better choice.
But there are a few technical insides to the SurfaceView:
Normal views are rendered when you call the methods invalidate or postInvalidate(), but this does not mean the view will be
    immediately updated (A VSYNC will be sent, and the OS decides when
    it gets updated.
The SurfaceView can be immediately updated.
A SurfaceView has an allocated surface buffer, so it is more costly
One of the main differences between surfaceview and view is that to refresh the screen for a normal view we have to call invalidate method from the same thread where the view is defined.
So if we want more control over the refreshing of the screen (for example for very fast moving animation), we should not use normal view class.
On the other hand in case of surfaceview, we can refresh the screen as fast as we want and we can do it from a background thread.
So refreshing of the surfaceview really does not depend upon VSYNC, and this is very useful if we want to do high speed animation.
Why use SurfaceView and not the classic View class...
One main reason is that SurfaceView can rapidly render the screen.
To have a better understanding what is a SurfaceView we must compare it with the View class.
Well with the View we have one major problem....the timing of rendering animations.
RelativeLayout, LinearLayout, etc are Views so a custom layout is a custom view.
You'll create a subclass of RelativeLayout, add all our your components in code (TextView, etc), and in your constructor you can read the attributes passed in from the XML.
You can then pass that attribute to your title TextView.
A bit old, but I thought sharing how I'd do it, based on chubbsondubs' answer:
I use FrameLayout (see [Documentation (hyper-link)]), since it is used to contain a single view, and inflate into it the view from the xml.
Here is a simple demo to create customview (compoundview) by inflating from xml
CustomView.kt
If we use ConstraintLayout here, layout hierarchy will be ConstraintLayout->ConstraintLayout -> ImageView + TextView => we have 1 redundant ConstraintLayout => not very good for performance
Replace FrameLayout with whatever view you Like to extend
surround the TextView by a ScrollView; or
You don't need to use a ScrollView actually.
properties of your TextView in your layout's xml file.
yourTextView.setMovementMethod(new ScrollingMovementMethod());
I didn't find TextView scrolling to support the 'fling' gesture, where it continues scrolling after a flick up or down.
I ended up implementing that myself because I didn't want to use a ScrollView for various reasons, and there didn't seem to be a MovementMethod that both allowed me to select text and click on links.
android:fillViewport="true" combined with android:layout_weight="1.0" will make the textview take up all available space.
When defining the Scrollview, DO NOT specify android:layout_height="fill_parent" otherwise the scrollview doesn't work!
Replace the TextView with an EditText with these extra attributes:
There is no need for wrapping in a ScrollView.
This is "How to apply ScrollBar to your TextView", using only XML.
First, you need to take a Textview control in the main.xml file and write some text into it ... like this:
Next, place the text view control in between the scrollview to display the scroll bar for this text:
When you are done with scrollable, add this line to the view's last line when you enter anything in the view:
If you want text to be scrolled within the textview, then you can follow the following:
First you should have to subclass textview.
Following is an example of a subclassed textview.
The "pro tip" above from Someone Somewhere ([Making TextView scrollable on Android (hyper-link)]) works great, however, what if you're dynamically adding text to the ScrollView and would like to automatically scroll to the bottom after an append only when the user is at the bottom of the ScrollView?
The mTextStatus.getLineHeight() will make it so that you don't scrollToBottom() if the user is within one line from the end of the ScrollView.
Make your textview just adding this
Add the following in the textview in XML.
Make a class file called: 'PerfectScrollableTextView' inside a package, then copy and paste this code in:
Finally change your 'TextView' in XML:
From: <TextView
To: <com.your_app_goes_here.PerfectScrollableTextView
To let the text view scroll down as the text fill it, you have to add:
to the TextView xml file.
The code below creates an automatic horizontal scrolling textview:
While adding TextView to xml use
Set the following properties of TextView in onCreate()
Put maxLines and scrollbars inside TextView in xml.
textView.setMovementMethod(new ScrollingMovementMethod());
I had this problem when I was using TextView inside the ScrollView.
whenever you need to use the ScrollView as parent, And you also use the scroll movement method with TextView.
if you still need to use ScrollView as parent or scroll movement method then you also use below  desc.
If you do not have any problems then you use EditText instead of TextView
Here, the EditText behaves like TextView
Whether the text is allowed to be wider than the view (and therefore can be scrolled horizontally).
In kotlin for making the textview scrollable
For a vertically or horizontally scrollable TextView some of the other answers help, but I needed to be able to scroll both ways.
What finally worked is a ScrollView with a HorizontalScrollView inside of it, and a TextView inside the HSV.
Using setHorizontallyScrolling(true) can work, but there's no similar method to allow vertical scrolling, and it doesn't work inside of a ScrollView as far as I can tell (just learning though, could be wrong).
UITableView is a subclass of UIScrollView, so you can also use:
If you have a top inset on your table view, you have to subtract it:
if you don't have tableView header :
//UITableViewScrollPosition.Middle or Bottom or Top
Any time you want to scroll any given tableView to the top you can call the following code:
call this function wherever you want UITableView scroll to top
Here Is The Code To ScrollTableView To Top Programatically
Since my tableView is full of all kinds of insets, this was the only thing that worked well:
Use this code for UITableview implementation in swift:
this would be better as it is table view's natural way
I've encountered an issue calling trying some of the methods on an empty tableView.
Here's another option for Swift 4 that handles empty tableviews.
if tableView.setContentOffset don't work.
Swift 4 via extension, handles empty table view:
I use tabBarController and i have a few section in my tableview at every tab, so this is best solution for me.
70 is the height of my header and table view cell
For example, in my case, the cell was actually slightly above the view with safe area insets.
Here is a simple example of UIScrollView extension that you can use everywhere in your app.
2) Then add extension to UIScrollView:
This scroll bind to the tableView's content size and it looks more natural than scroll to CGPoint.zero
Use this code to inflate the dialog view without a warning:
The short story is that when you are inflating a view for a dialog, parent should be null, since it is not known at View inflation time.
Inflate the View using View's [inflate method (hyper-link)].
Inflate the View using LayoutInflater's [full method (hyper-link)]: inflate(int resource, ViewGroup root, boolean attachToRoot).
Casting null as ViewGroup resolved the warning:
When you really don't have any parent (for example creating view for AlertDialog), you have no other choice than passing null.
You should use AlertDialog.Builder.setView(your_layout_id), so you don't need to inflate it.
Use AlertDialog.findViewById(your_view_id) after creating the dialog.
Use (AlertDialog) dialogInterface to get the dialog inside the OnClickListener and then dialog.findViewById(your_view_id).
The AlertDialog is as far as I know the only case were you can safely use null instead of a parent view.
The parent view is necessary to evaluate the Layout Params which are declared in the root element of the View being inflated.
That means if you use null instead of the parent view, all Layout Params in the root element will be ignored and replaced by default Layout Params.
From the documentation of View.inflate(), it says
Inflate a view from an XML resource.
This convenience method wraps the 
      LayoutInflater class, which provides a full range of options for view inflation.
Inflate and set the layout for the dialog
  Pass null as the parent view because its  going in the dialog layout
The solution you have provided doesn't add a padding for your views inside your UIStackView (as you wanted in the question), but it adds a leading for the UIStackView.
A solution could be to add another UIStackView inside your original UIStackView and give the leading to this new UIStackVIew.
Then, add your views to this new UIStackView.
When isLayoutMarginsRelativeArrangement property is true, the stack view will layout its arranged views relative to its layout margins.
But it affects all arranged views inside to the stack view.
If you want this padding for only one arranged view, you need to use nested UIStackView
What worked for me is to add to stack view another UIView that's just a spacer (works at least with stackView.distribution = .Fill):
I have found that constraints don't work inside a Stack View, or they seem somewhat strange.
(Such as if I add leading/trailing constraint to selected on image stackview, that adds leading to collectionview too, but doesn't add trailing; and it be conflict for sure).
To set layout margins for all views inside the stackview, select:
Stack View > Size Inspector > Layout Margins > Fixed
If you only need leading padding, then you can set the stack view's Alignment to "Trailing" and then you will be free to specify unique Leading constraints on each of its contained subviews.
As a bonus, you can also set the stack view's alignment to "Center" and then you can use Leading and/or Trailing constraints to give each item its own padding on both sides.
Be sure this constraint set after you parentView.addArrangdSubView(firstView)
What we did was add transparent components (e.g., UIButton/UIView) as the first and last children of the UIStackView.
This question already has good answers,
One suggestion though, use spacing property to set the spacing between the views.
For first and last views there can be two options, either set insets as @tolpp suggested or add constraint attaching to parent (stackview) with constant to add padding.
The solution would be to have a regular view in the stack view to hold whatever views you are wanting to add constraints to, and then you can add constraints for your items that are relative to the views in the stack view.
That way, your original views can have leading and trailing constraints within the stack view.
Just add an empty view at the beginning of the stack view (also constraining its width and/or height):
I created this simple UIView extension to add the constraints:
Set your stackview alignment to "center".
After that you can give every subview different leading and trailing.
We can't add ID to it because merge block is not a view.
Your first question, that is working with an included layout using ViewBinding can be solved so easily.
You can try out a working demo [here (hyper-link)] and view the demo source [here (hyper-link)].
It's possible to redirect to another view with [angular-ui-router (hyper-link)].
For this purpose, we have the method $state.go("target_view").
A storyboard "container view" is just a standard UIView object.
There is no special "container view" type.
In fact, if you look at the view hierarchy, you can see that the "container view" is a standard UIView:
To achieve this programmatically, you employ "view controller containment":
Instantiate the child view controller by calling  instantiateViewController(withIdentifier:) on the storyboard object.
Call addChild in your parent view controller.
Add the view controller's view to your view hierarchy with addSubview (and also set the frame or constraints as appropriate).
Call the didMove(toParent:) method on the child view controller, passing the reference to the parent view controller.
See [Implementing a Container View Controller (hyper-link)] in the View Controller Programming Guide and the "Implementing a Container View Controller" section of the [UIViewController Class Reference (hyper-link)].
Note, the above doesn't actually add a "container view" to the hierarchy.
This latter pattern is extremely useful if ever transitioning between different child view controllers and you just want to make sure one child's view is in the same location and the previous child's view (i.e.
all the unique constraints for the placement are dictated by the container view, rather than needing to rebuild these constraints each time).
But if just performing simple view containment, the need for this separate container view is less compelling.
You obviously can leave translatesAutosizingMaskIntoConstraints as true and set both the frame and the [autosizingMask (hyper-link)] for the views you add, if you’d prefer.
ViewController
ViewControllerWithButton
Use the other embed function with non-storyboard view controller.
I found [a blogpost (hyper-link)] that talks about doing stuff onAppear for a navigation view.
Idea would be that you bake your service into a BindableObject and subscribe to those updates in your view.
Fully updated for Xcode 11.2, Swift 5.0 
I think the viewDidLoad() just equal to implement in the body closure.
SwiftUI gives us equivalents to UIKit’s viewDidAppear() and viewDidDisappear() in the form of onAppear() and onDisappear().
As an example, this creates two views that use onAppear() and onDisappear() to print messages, with a navigation link to move between the two:
ref: [https://www.hackingwithswift.com/quick-start/swiftui/how-to-respond-to-view-lifecycle-events-onappear-and-ondisappear (hyper-link)]
We can achieve this using view modifier.
Create ViewModifier:
Create View extension:
I think onApear() is not an alternative to viewDidLoad().
Because onApear is called when your view is being appeared.
Since your view can be appear multiple times it conflicts with viewDidLoad which is called once.
Imagine having a TabView.
However viewDidLoad() is called just once.
But I think you may want to make the background of the image that you are placing into the WebView transparent, for example, with a transparent PNG, rather than the ImageView background.
If the actual image is not at all see-through then the ImageView background can't be seen through it.
You can set the background transparent of any layout, any view, or any component by adding this code in XML:
You could also use View.setAlpha(float) to change the visibility precisely.
use RelativeLayout which has 2 imageViews in .
and set transparency code on the top imageView.
In my experience, it comes in handy when you need to dismiss it from any ViewController you want and perform different tasks for each viewcontroller that dismisses it.
Any viewController that adopts the protocol can dismiss the view in it's own way.
(ipad vs iphone, or passing different data when dismissing from different views, calling different methods when dismissing, etc..)
So, to clarify, if all you ever want to do is dismiss the view, I see no need to setup the delegate protocol.
If you need to do different things after you dismiss it from different presenting view controllers, It would be your best way to go using the delegate.
Although you can - legitimately - call this on the presented view controller, all it does is forward the message on to the presenting view controller.
This is for view controller reusability.
Your view controller shouldn't care if it is being presented as a modal, pushed on a navigation controller, or whatever.
If your view controller dismisses itself, then you're assuming it is being presented modally.
You won't be able to push that view controller onto a navigation controller.
By implementing a protocol, you let the parent view controller decide how it should be presented/pushed and dismissed/popped.
If you are using modal use view dismiss.
Quote from View [Controller Programming Guide (hyper-link)], "How View Controllers Present Other View Controllers".
Each view controller in a chain of presented view controllers has
  pointers to the other objects surrounding it in the chain.
In other
  words, a presented view controller that presents another view
  controller has valid objects in both its presentingViewController and
  presentedViewController properties.
You can use these relationships to
  trace through the chain of view controllers as needed.
For example, if
  the user cancels the current operation, you can remove all objects in
  the chain by dismissing the first presented view controller.
Dismissing a view controller dismisses not only that view controller
  but also any view controllers it presented.
Although, I personally would rather use unwinding segues than try to traverse backwards the presenting view controllers tree, which is what Apple talks about in this chapter where the quote is from.
So, the view controller presenting the view should be the one dismissing it.
I came here just wanting to dismiss the current (presented) View Controller.
Go back to the previous view controller:
Go back to the root view controller:
When a View Controller is presented modally, you can dismiss it (from the second view controller) by calling
The presenting view controller is responsible for dismissing the view
controller it presented.
If you call this method on the presented view
controller itself, UIKit asks the presenting view controller to handle
the dismissal.
So it works for the presented view controller to call it on itself.
The OP's question was about the complexity of using delegates to dismiss a view.
To this point I have not needed to use delegates since I usually have a navigation controller or modal view controllers, but if I do need to use [the delegate pattern (hyper-link)] in the future, I will add an update.
Swift 3.0
//Dismiss View Controller in swift
Say ViewControllerA presents ViewControllerB modally.
But, since you may not have written the code for ViewControllerA you aren't aware of the lifecycle of ViewControllerA.
It may dismiss 5 seconds (say) after presenting your view controller, ViewControllerB.
In this case, if you were simply using dismissViewController from ViewControllerB to dismiss itself, you would end up in an undefined state--perhaps not a crash or a black screen but an undefined state from your point of view.
If, instead, you were using the delegate pattern, you would be aware of the state of ViewControllerB and you can program for a case like the one I described.
If contents is binary data with picture - you select view as picture.
To view the result open the CSV file with a text editor (NOT Excel).
The work-around that @MartinSmith described as a comment to the (currently) accepted answer didn't work for me (got an error when trying to view the full XML result complaining about "The '[' character, hexadecimal value 0x5B, cannot be included in a name").
The easiest way to quickly view large varchar/text column:
If you only have to view it, I've used this:
The result is a beautiful un-truncated text written to a file for viewing/editing.
In case if < TEXT VIEW > is placed in LinearLayout, set the Layout_weight proprty of < and > to 0 and 1 for TextView.In case of RelativeLayout align < and > to left and right and set "Layout to left of" and "Layout to right of" property of TextView to ids of < and >
Below you can see a layout where ListView takes all free space with buttons at bottom:
When using a relative layout, you can make a view stretch by anchoring it to both of the views it's supposed to stretch toward.
Supported in ([source (hyper-link)]):
Chrome 37, Edge 79, Firefox 27, IE 11, Opera 24, Safari 9.1, WebView Android 37, Chrome Android 37, Firefox for Android 27, Opera Android 24, Safari on iOS 9.3, Samsung Internet 3.0
For Both Height and Width Try Changing the height inside the View style to 'auto' full code bellow:
Also try Giving padding to the View for arrange the text properly.
It works with Nicholas answer unless you want to center the view somewhere.
In that case, you could add a wrapper view around the view to obtain the width of its content and set alignItems: 'center'.
The background color is added to show the size of the inner view
If you want to apply width to View based on <Text> , you can do something like this :
tldr: set alignItems to any value other than 'stretch' for the style of the parent View of your View containing Text
The issue your facing is likely related to React Native's default value for alignItems: 'stretch' on a <View /> element.
Basically, all <View /> elements by default cause their children to stretch along the cross axis (axis opposite to the flexDirection).
Setting alignItems to any value other than "stretch" ("baseline", "flex-start", "flex-end", or "center") on the parent View prevents this behavior and addresses your problem.
Below is an example where there are two View elements contained inside of a parent View with a blue border.
The two View elements each contain a View wrapped around a Text element.
In the case of the first View with default styling, the yellow child View expands horizontally to fill the entire width.
In the second View where alignItems: 'baseline', the pink View does not expand and stays the size of it's child Text element.
Now you can create in your view an URL to the files using the asset helper:
Then in any view you can access your image through url helper like this.
If you are using the static serve view in development, you have to have DEBUG = True :
That's because this view is grossly
  inefficient and probably insecure.
EDIT: You could add some urls just to test your 404 and 500 templates, just use the generic view direct_to_template in your urls.
Support for string view arguments to url() is deprecated and will be removed in Django 1.10
For these reasons, the Django static view is designed only for use during development and will not work if your DEBUG setting is False.
if you are trying to access the rootViewController you set in your appDelegate.
Swift 3: Chage ViewController withOut Segue and send AnyObject 
Use: Identity  MainPageViewController on target ViewController
or if you want to Change View Controller and send Data
Use .last will return top view Controller is active.
NOTE: View want to display ads required in NavigationView, if not, ads will be not run.
Example: NavigationView { View1() }
The actions, views and activities on Android are the baked-in way of working with the Android UI and are an implementation of the model–view–viewmodel (MVVM) pattern, which is structurally similar (in the same family as) model–view–controller.
MVC just states more or less that you should not mingle data and view, so that e.g.
views are responsible for holding data or classes which are processing data are directly affecting the view.
More complicated in my opinion are the activities which are responsible sometimes for the view, but nevertheless act as an controller in the same time.
If you define your views and layouts in the XML files, load your resources from the res folder, and if you avoid more or less to mingle these things in your code, then you're anyway following an MVC pattern.
View: How to render
The model would say to the view, I don't care if your rendering is Android or iOS or Windows Phone, this is what I need you to render.
The view would only handle the platform-specific rendering code.
However, if you consider the Activity as part of the view then implementing MVC is quite straightforward.
An Adapter object acts as a bridge between an AdapterView and the
  underlying data for that view.
However, it seems a little like Qt's Model-View-Delegate architecture, which they claim is a step up from a traditional MVC pattern.
View = layout, resources and built-in classes like Button derived from android.view.View.
We may be talking about MVC, but it will be so to say FMVC, Framework--Model--View--Controller.
[android-binding (hyper-link)] - Providing a framework that enabes the binding of android view widgets to data model.
Inject your View, Resource, System Service, or any other object, and let RoboGuice take care of the details.
At the moment, without a third-party framework, you usually have lots of code (like addXXListener(), findViewById(), etc.
The view (user interface), and
The view is the XML layout, and the controller is the (activity + its fragment).
View: How it’s displayed.
A view is attached to its model (or model part)
and gets the data necessary for the presentation.
Important feature of MVC: We can modify Either the Model  or View or Controller still not affecting the other ones
Say we change the color in the view, size of the view or the position
of the view.
Say we change the model (instead of data fetched from the server
fetch data from assets ) still it won’t affect the view and
controller
Say we change the Controller(Logic in the activity) it won’t affect
the model and the view
Basically, you have a component (activity, fragment, and viewgroup).
Inside you define the structure and style of the view layer.
Also you define how data should be bound to the views.
Then, once your data is changed - the global "render()" method will be called, and your views will be smartly updated with the most recent data.
Here "count" is a model, view() method is a view, and "v -> count++" is a controller which listens to the button clicks and updates the model.
NOTE 2: If your activity is presenting multiple models then rather than writing the code/logic in activity, it is better to divide the views in fragments.
So in the future if any more model is needed to show up in the view, add one more fragment.
There is not an implemented MVC architecture, but a set of libraries / examples exists to implement an MVP (model–view–presenter) architecture.
In MVC, the View layer only knows how to show the user interface (UI).
But the View does NOT directly ask the model to find the data, it does it through the Controller.
So the Controller calls the Model to provide the required data for the View.
Once the data is ready, the Controller informs the View that the data is ready to be acquired from the Model.
Now the View can get the data from the Model.
It is worth noting that the View can know about the availability of the data in the Model either through Controller -- also known as Passive MVC -- or by observing the data in the Model by registering observables to it, which is Active MVC.
On the implementation part, one of the first things that comes to mind is that what android component should be used for the View?
The View should be able to present the user interface (UI) on the device and respond to the user's interaction with the UI.
In the example app used in [this article (hyper-link)] I have used Activity for the View layer, but Fragment  can also be used.
You have a class which responsibility is to get the data - the model, and then you have the View class which is the view.
When talking about the view most people think only for its visual part defined in the xml.
Let's not forget that the View also has a program part with its constructors, methods and etc, defined in the java class.
UPDATE: If you are feeling adventurous then you can make an extension on the UIView as shown below:
(see [Remove all subviews?
I don't know if you managed to resolve this but I have recently experienced a similar problem where the For loop left one view each time.
I found this was because the self.subviews was mutated (maybe) when the removeFromSuperview() was called.
By doing .copy(), I could perform the removal of each subview while mutating the self.subviews array.
This is because the copied array (subViews) contains all of the references to the objects and is not mutated.
So that you can use self.view.lf_removeAllSubviews in a UIViewController.
For iOS/Swift, to get rid of all subviews I use:
to get rid of all subviews of a particular class (like UILabel) I use:
For removing just subviews of a specific class - this was the only Swift code that worked for me in Xcode6.1.1.
Assuming the only subviews you want to remove are of type UIButton...
Extension for remove all subviews, it is quickly removed.
If you add a tag to your view you can remove a specific view.
I did as following because just removing from superview did not erase the buttons from array.
I create 2 different methods to remove subview.
Here's another approach that allows you call the operation on any collection of UIView instances (or UIView subclasses).
This makes it easy to insert things like filter after .subviews so you can be more selective, or to call this on other collections of UIViews.
Alternatively you can accomplish the same thing with a UIView extension (though this can't be called on some arbitrary array of UIView instances):
Don't forget to Tag your view (someView.tag = 321) before you remove it with this code.
Project Structure) to display on the left sidebar (clicked  View > Toolbar Buttons until tick appears)
No files or folders were shown in Project View anymore.
The Project Structure view wouldn't even open, and renaming the .idea folder to .idea.bak and re-importing the project didn't make any difference.
If you have a gradle module with the same name as your projects root folder, the gradle import will replace your toplevel module configuration and change your view completely.
I assume you mean that your view is being moved down the navigation controller's stack by the pushing a new view when you say pushed onto the stack.
I would suggest using the viewDidUnload method to add a NSLog statement to write something to the console so you can see what is going on, you may want to add a NSLog to viewWillDissappeer.
This is, of course, possible because the UINavigationController's view controller stack (exposed through the viewControllers property) has been updated by the time that viewWillDisappear is called.
If you just want to know whether your view is getting popped, I just discovered that self.navigationController is nil in viewDidDisappear, when it is removed from the stack of controllers.
I'm surprised there's no navigation controller protocol to register a view controller to be notified on pops.
From what I know, in viewDidDisappear the view already has been popped.
Which means when you query self.navigationController.viewControllers you will get a nil.
From Apple's Documentation in UIViewController.h :
"These four methods can be used in a view controller's appearance
callbacks to determine if it is being   presented, dismissed, or added
or removed as a child view controller.
For example, a view controller
can   check if it is disappearing because it was dismissed or popped
by asking itself in its viewWillDisappear:   method by checking the
expression ([self isBeingDismissed] || [self
isMovingFromParentViewController])."
- (BOOL)isMovingToParentViewController NS_AVAILABLE_IOS(5_0);
- (BOOL)isMovingFromParentViewController NS_AVAILABLE_IOS(5_0);
This error took me a while to track down, initially I tried pinning the ScrollView's size but the error message clearly says "content size".
I made sure everything I pinned from the top of the ScrollView was also pinned to the bottom.
That way the ScrollView can calculate its content height by finding the height of all the objects & constraints.
Initially I had most things X centered in the ScrollView, but I had to also pin the objects to the side of the ScrollView.
Check out this really quick and to the point tutorial on how to get the scroll view working and fully scrollable with auto layout.
Now, the only thing that is still leaving me puzzled is why the scroll view content size is always larger then necessary..
[http://samwize.com/2014/03/14/how-to-use-uiscrollview-with-autolayout/ (hyper-link)]
It's answer for my self-answered question [UIScrollView + Centered View + Ambigous Scrollable Content Size + many iPhone sizes (hyper-link)].
scrollView with 0 constraints to all edges
Add 2 additional constraints, for example "0" for trailing and/or bottom space for our view (look at the example on screenshot below).
You need to create an UIView as a subview of the UIScrollView as described below:
UIViewController
UIView 'Main View'


UIScrollView

UIView 'Container View'


[Your content]
The second step is to make the UIScrollView constraints.
I did this with the top, bottom, leading and trailing constraints to its superView.
Next I added the constraints for the container of UIScrollView and here is where the problem begins.
Continue with the same constraints above, and just add the constraints Equal Height and Equal Width to your Container View in relation to the Main View and not to your UIScrollView.
In other words the Container View's constraints are tied to the UIScrollView's superview.
After that you will not have warnings in your Storyboard and you can continue adding the constraints for your subviews.
Inside the UIScrollView add a UIView (we can call that contentView);
In this contentView, set top, bottom, left and right margins to 0 (of course from the scrollView which is the superView); Set also align center horizontally and vertically;
Now you can add all your views in that contentView, and the contentSize of the scrollView will be automatically resized according with the contentView.
Using contentView (UView) as container inside UIScrollView, stick to edges (top, bottom, trailing, leading) of superview (UIScrollView) and contentView should have equalwidth and equalheight to superview.
For your content view you need to set constraints for leading/trailing/top/bottom spaces to scrollview and this will not change content view frame, like this: [image]
Of course you need to create additional constraints for content view so scroll view could know content size.
all the subviews inside a scrollview must have constraints touching all the edges of the scroll view, as its explained in the documentation, the height and width of a scroll view is calculated automatically by the measures in of the subviews, this means you need to have Trailing and leading constraints for width and Top and Bottom constraints for height.
@Matteo Gobbi's answer is perfect, but in my case,  the scrollview can't scroll, i remove "align center Y" and add "height >=1", the scrollview will became scrollable
What I did is create a separate content view as shown here.
The content view is freeform and can has all subviews added to it with their own constraints in relation to the contentView.
The UIScrollView is added to the main view controller.
Programatically I add the contentView which is linked via IBOutlet to class and set the contentView of UIScrollView.
View(Superview)
ScrollView 0,0,600,600
UIView inside ScrollView : 0,0,600,600
UIView contains image view , label
Now add leading/trailing/top/bottom for scrollView(2) then UIView(3).
Select View(1) and View(3) set equally height and weight.. its solved my issue.
You can often bypass that warning by adding a base UIView to the scrollview as a "content view", as they mentioned and make it the same size as your scroll view and, on this content view, set these 6 parameters.
What suppressed the Storyboard errors and warnings for me was setting the intrinsic size of the scroll view and the content view (in my case, a stackview) to Placeholder.
And it says - Setting a design time intrinsic content size only affects a view while editing in Interface Builder.
The view will not have this intrinsic content size at runtime.
Note: In storyboard, I have pinned all the edges of scrollview to the superview and all the edges of stackview to the scrollview.
In my code, I have set the translatesAutoresizingMaskIntoConstraints as false for both the scrollview and the stackview.
When the stackview grows dynamically, the constraints set in storyboard ensure that the stack is scrollable.
See below: content view in scrollview vertical and horizontal centralized.
you got ambiguity error, always make sure two added into scrollview from your content view is 1).button space to container.2)trailing space to constraint that is highlighted in screenshot,
these constraint means in scroll is how much you can scroll after your content view height or width.
All you have to do, add a subview to UIScrollView with same width and height.
Then select ViewController and press Reset to suggested constraint.
You can also use constraints between the scroll view’s content and objects outside the scroll view to provide a fixed position for the scroll view’s content, making that content appear to float over the scroll view.
For example , if you accidentally pinned your top Label/Button/Img/View to the view outside the scroll area (Maybe a header or something just above the scrollView?)
instead of the contentView, you'd freeze your whole contentView in place.
As mentioned in previous answers, you should add a custom view inside the scroll view:
Add all your subviews to the content view.
At some point you will see a scroll content view has ambiguous content size warning, you should select the content view and click the "Resolve auto layout issues" button (at the bottom right corner of the IB layout), and select the "Add missing constraints" option.
From now on when you run the project, the scroll view will automatically update it's content size, no additional code needed.
You just have to make sure that there is a way to make a continuous
  line of constraints from the top to the bottom of the scrollview.
In my case - a horizontally scrolling scroll view - I also needed to add width and height constraints for each child of the scroll view, although [Apple's technical note (hyper-link)] doesn't tell you this.
Set the ViewController's (the one holding the UIScrollView) size to Freeform in the size inspector in Interface Builder and all should work.
[Freeform setting in Size inspector in Interface Builder for the containing UIViewcontroller (hyper-link)]
For me adding a contentView didn't really work as suggested.
Moreover, it creates an overhead due to the added view (although I don't consider this a big problem).
What worked best for me was just to turn off the ambiguity-checking for my scrollView.
But keep in mind, that if other constraints for your scrollView break, the Interface-Builder will not warn you any more about it.
People who are struggling with uiscrollview not scrolling just set your content view's bottom constraint with your last view's bottom layout (which is inside of your content view).
Scrollview only concerned about getting maximum height from its content view, and we are setting it as last view's bottom constraint, which means scrollview automatically will change its content offset.
In my case last view was UILable with no of lines property = 0(which automatically adjust its height depending upon its content) so it dynamically increase uilable's height and eventually our scrollable area increases because of uilable's bottom layout is aligned with our content view's bottom, which forces scrollview to increase it's content offset.
Add UIScrollView and pin it 0,0,0,0 to superview (or your desired size)
Add UIView in ScrollView, pin it 0,0,0,0 to all 4 sides and center it horizontally and vertically.
Add all views that you need into this view.
Don't forget to set the bottom constraint on the lowest view.
Select the UIScrollView, select the size inspector and deselect Content Layout Guides.
I made a video on youTube 
[Scroll StackViews using only Storyboard in Xcode (hyper-link)]
The view inside the scrollView -
does not have any intrinsic content Size (e.g UIView)
does have its own intrinsic content Size (e.g UIStackView)
For a vertically scrollable view in both cases you need to add these constraints:
Equal width to scrollview (to stop scrolling horizontally)
You don't need any other constraints for views which have his own intrinsic content height.

For views which do not have any intrinsic content height, you need to add a height constraint.
The view will scroll only if the height constraint is more than the height of the scrollView.
I solved this kind of problem for my view by using "Resolve auto layout issues" > "Add missing constraints" for Selected View
[ (hyper-link)]
in which:
trailing, bottom are the trailing, bottom of UIScrollView
1) Set UIScrollView top, bottom, left and right margins to 0
2) Inside the UIScrollView add a UIView and set top, bottom, leading, trailing margins to 0 ( equal to UIScrollView margins ).
Add a UIScrollView with constraints 0,0,0,0 to superview.
Add a UIView in ScrollView, with constraints 0,0,0,0 to superview.
Add same width constraint for UIView to UIScrollView.
Add Height to UIView.
Add elements with constraints to the UIView.
For the element closest to the bottom, make sure it has a constraint to the bottom of UIView.
If you are wondering why all of the answers does not work anymore, make sure that you have pinned the content view (the one you've put inside the scroll view) to Content Layout Guide of the scroll view and NOT to Frame Layout Guide.
Content view edges (leading, trailing, top, bottom) should not be pinned like leading on the image - to Frame Layout Guide
Put scroll view in the root view
Pin all the sides of scroll view to the superview
Take another UIView (will call it content view) and put it inside the scroll view
Pin all the sides of the content view to scroll view's Content Layout Guide
Pin the content view's width to be equal to scroll view's Frame Layout Guide
Fix the content view height in any way you want (I used just constant height constraint in the example below)
If you still have problems with UIScrollView, just turn off Content Layout Guides
(Select your ScrollView in xcode Interface Builder -> choose Size inspector in right panel -> deselect 'Content Layout Guides')
Or try these steps: [xcode 11 scroll view layouts (hyper-link)] - it can
 be useful for new style of layout.
Add scrollview in UIView and add constraints leading, top, trailing and bottom to 0,0,0,0.
Set height of scroll view as per the requirements for eg.
Add UIView to scroll view and add constraints leading, top, trailing and bottom to 0,0,0,0 and align centre(X) and center(Y) constraints.
Deselect “Content Layout Guides” in size inspector of scroll view.
Add your scroll view inside a well defined view and then add the stack view inside the scroll view
Add top, left, right, bottom, center X and center Y constraints from scroll view and stack view to their relevant super views
Make sure that constraints are linked from stack view to the rightful superview (scrollview) since current default setting is to add an Align Top constraint and not a Top Space one.
For any view, the frame and its content's sizes are the same ie if you have some content (e.g.
This is NOT true for scrollview's contents.
The content is usually bigger than the frame size of the scrollView.
Hence it's the only view that needs 6 constraints not 4.
For any other view having more than 4 required constraints will cause a conflict.
To setup your scroll view, its contents and position of scrolling, you basically need to answer three questions:
ie at any given moment how big should the scrollview be?
Understanding it just helps how a scrollView works.
It won't know what area of  the content is hidden (not visible in the scrollView) and what area of the content is not (visible in scrollView) hidden.
If all the contents you've added into the scrollview are constrained to the edges of the scrollview, then as the content grow the scrollview will add space to accommodate.
It's just that you might be using UIViews where its intrinsicContentSize is 0 so the scrollView will still complain about ambiguity of its content.
However if you've used a UILabel and it has a non-empty text, then its intrinsicContentSize is set (based on Font size and text length and line breaks, etc) so the scrollView won't complain about its ambiguity.
1) Implement your own IViewEngine and set the ViewEngine property of the Controller you are using to your ImageViewEngine in your desired "image" method.
2) Use a view :-).
Solution 1: To render an image in a view from an image URL
And use it in a view like:
you can use File to return a file like View, Content etc
If you set one it to a value greater than 0, it will stretch that view into the remaining space available.
If you had multiple views that needed to be stretched, then the value will become a weight between them.
So if you had two views both set to a layout_weight value of 1, then they would both stretch to fill in the space but they would both stretch to an equal amount of space.
If you set one of them to the value of 2, then it would stretch twice as much as the other view.
i think u can set the heiht at runtime for 1 item just scrollView.setHeight(200px), for 2 items scrollView.setheight(400px) for 3 or more scrollView.setHeight(600px)
As we further know views should adjust dynamically and become the space which is appropriate.
If you set a max height you maybe force the view not to get enough space or take to less space.
But if the resolution will ever change dramatically, and it will!, then the view, which has a max height, will look not appropriate.
To do that you will need to discovery the height of each item of you scrollView.
After that just set your scrollView height to numberOfItens * heightOfItem.
In order to create a ScrollView or ListView with a maxHeight you just need to create a Transparent LinearLayout around it with a height of what you want the maxHeight to be.
You then set the ScrollView's Height to wrap_content.
This creates a ScrollView that appears to grow until its height is equal to the parent LinearLayout.
None of these solutions worked for what I needed which was a ScrollView set to wrap_content but having a maxHeight so it would stop expanding after a certain point and start scrolling.
I just simply overrode the onMeasure method in ScrollView.
If some layout present below the scrollview then this trick wont work –  madhu Mar 5 at 4:36
if you guys want to make a non-overflow scrollview or listview, just but it on a RelativeLayout with a topview and bottomview on top and bottom for it:
MaxHeightScrollView.java:
I used this is a layout class that Overrides RelativeLayout and this allowed me to create a custom dialog with a ScrollView as the child of MaxHeightRelativeLayout that does not expand the full height of the screen and also shrinks to fit within the smallest widow size in multi-window for Android N.
My MaxHeightScrollView custom view
Wrap your ScrollView around your a plainLinearLayout with layout_height="max_height", this will do a perfect job.
Just create a new class extending ScrollView and override it's onMeasure method.
For example, we need to show a bottom dialog with a mutable header TextView, a mutable ScrollView and a mutable footer TextView.
The dialog's max height is 320dp，when total height not reach 320dp ScrollView act as wrap_content, when total height exceed ScrollView act as "maxHeight=320dp - header height - footer height".
I used a [custom ScrollView (hyper-link)] made in Kotlin which uses maxHeight.
Here is the code of ScrollViewWidthMaxHeight:
It forces the View (that is inside a ConstraintLayout) to be 300dp as a max height.
View the details of a commit, such as author name, email, date, committer name, email, date and comments.
View a previous copy of the file or compare it against the local
workspace version or a previous version.
View the changes to the active line in the editor (Git Blame).
Use keyboard shortcuts to view history of a file or line
View the Git log (along with details of a commit, such as author name, email, comments and file changes).
After installing, you can open the graph view from the bottom status bar.
In this milestone, we've made progress on the new Timeline view, and have an early preview to share.
This is a unified view for visualizing time-series events (e.g.
To enable the Timeline view, you must be using the [Insiders Edition (hyper-link)] ([VSCode 1.44 March 2020 (hyper-link)]) and then add the following setting:
Well, since you can currently only have one ngView directive...
You may use ng-include to avoid using nested ng-views.
[http://docs.angularjs.org/api/ng/directive/ngInclude (hyper-link)]
[http://plnkr.co/edit/ngdoc:example-example39@snapshot?p=preview (hyper-link)]
My index page I use ng-view.
Angular ui-router supports nested views.
I too was struggling with nested views in Angular.
Here is an example application that uses multiple levels of views nesting
As it can be seen there are 4 main views (view1,view2,view3,view4) and view1 has 3 child views.
Try adding android:fillViewport="true"to your ScrollView
remember that android:layout_height=”fill_parent” means “set the height to the height of the parent.” This is obviously not what you want when using a ScrollView.
After all, the ScrollView would become useless if its content was always as tall as itself.
To work around this, you need to use the ScrollView attribute called android:fillViewport.
When set to true, this attribute causes the scroll view’s child to expand to the height of the ScrollView if needed.
When the child is taller than the ScrollView, the attribute has no effect.
[http://www.curious-creature.org/2010/08/15/scrollviews-handy-trick/ (hyper-link)]
Just add android:fillViewport="true"  in yout xml layout in Scrollview
BottomNavigationView uses colorPrimary from the theme applied for the selected tab and it [uses (hyper-link)] android:textColorSecondary for the inactive tab icon tint.
So you can create a style with the prefered primary color and set it as a theme to your BottomNavigationView in an xml layout file.
I was doing a very silly mistake, I was using a selector file named as bottom_color_nav.xml for Select and unselect color change but still it was not reflecting any color change in BottomNavigationView.
In order to set textColor, BottomNavigationView has two style properties you can set directly from the xml:
I am using a com.google.android.material.bottomnavigation.BottomNavigationView (not the same as OP's) and I tried a variety of the suggested solutions above, but the only thing that worked was setting app:itemBackground and app:itemIconTint to  my selector color worked for me.
Not totally relevant here but for full transparency, my BottomNavigationView style is as follows:
To view your data present in db file you need to download sqlite browser or add plugin of the same in any browser so you need to open file in browser and view your data.
Edit: To view your database on an Emulator follow these steps (for actual device, scroll to the bottom):
Android Studio versions >= 3.0:

Open Device File Explorer via View > Tool Windows > Device File Explorer

Go to data > data > PACKAGE_NAME > database, where PACKAGE_NAME is the name of your package (it is com.Movie in the example above)

Right click on the database and select Save As.... Save it anywhere you want on your PC.
You can now view the contents of your database.
Go to [this (hyper-link)] Github repository and follow the instructions in the readme to be able to view your database on your device.
Then, with a unix tool like 'watch', you can have a terminal window open with a periodically updating view of your database script output.
On the actual [website (hyper-link)], they also talk about features for network inspection and looking through the view hierarchy.
Update:
You can now use Stetho to view Realm files (if you're using Realm instead of an SQLite DB): [https://github.com/uPhyca/stetho-realm (hyper-link)]
Update #2:
You can now use Stetho to view Couchbase documents: [https://github.com/RobotPajamas/Stetho-Couchbase (hyper-link)]
In my case, it is in data/data//app_webview/databases/file_0/1
View -> Tool Windows -> Device File Explorer
View --> Tools Window --> Device File Explorer
...  Click the "Open SQL Console" icon, and you end up with this nice view of your database inside Android Studio:
[ (hyper-link)]
To get started, deploy your app to a device running API level 26 or higher and select View > Tool Windows > Database Inspector from the menu bar.
With the release of [Android Studio 4.1 Canary and Dev preview  (hyper-link)], you can use a new tool called
Install AS 4.1+, run the app, open database inspector, now you can view your database files on the left side of the database inspector panel then select the table to view the content.
New Database Inspector introduced in Android 4.1 Canary 5 Preview where you can now Inspect, query, modify, and debug SQLite databases in your running app directly from the IDE - [https://developer.android.com/studio/preview/features?linkId=86173020#database-inspector (hyper-link)]
Supports database live query as well - [https://developer.android.com/studio/preview/features?linkId=86173020#query (hyper-link)]
You can apply view/update/query operations easily.
Go to  View > Tool Windows > Device File Explorer
2.Select View > Tool Windows > Database Inspector from the menu bar.
SQL Developer can start a new tab every time you select a database object to view; but, you will have to close the tab manually.
Set this in:
Tools->Preferences->Database->ObjectViewer->Automatically Freeze Object Viewer Windows
New Document Tab Group (will allow viewing tables simultaneously)
This issue is a known bug of RecyclerView.
The best solution is, clear the list every time before refresh RecyclerView.
For fix this issue just call notifyDataSetChanged() with empty list before updating recycle view.
Use this to refresh a RecyclerView
I had this problem when scrolling fast through my endless/paging RecyclerView.
So when scrolling fast and adding new pages of items to the RecyclerView Adapter and notify the adapter that new data had been inserted, I was not taking into account the additional header item, thus making the size of the adapter’s list wrong... and causing this exception...
So in short, if you’re using a header/footer in our RecyclerView adapter make sure you take it into account when updating the adapters data.
Removing all views from RecyclerView helped me:
I had to do both notifies for the recycler view to work
You have to post updates rather than sending notifiy messages directly in order to prevent the recycler view from crashing when the update comes in before the view is laid out.
put this line along with setting recyclerView.
issue was fixed by
setting ItemAnimator to null for RecyclerView.
put this line along with setting recyclerView.
issue was fixed by setting ItemAnimator to null for RecyclerView.
[Event Viewer is opened (hyper-link)].
Reviewing my web.config file, it was discovered that there was an error that once fixed, allowed me to easily remove the service without the additional closing of the services console step.
Let's say you have a very short list of properties that you wouldn't want to ever include in a View, so when updating the entity, those would be omitted.
This example allows you to essentially leave your business logic alone after adding a new field to your Users table and to your View.
Its probably better to do this with view models, though, in order to avoid repeating sets of properties.
I haven't done that yet because I don't know how to avoid bringing the validation messages on my view model validators into my domain project.
Use view models.
Here is a very simple way to convert a view object into a entity.
The simple idea is that only the properties that exist in the view model get written to the entity.
Views don't need to have all the properties of the entity.
You never have to update code when you add remove a property to a view.
Edit:
Using .detectChanges() inside subscibe could lead to issue [Attempt to use a destroyed view: detectChanges (hyper-link)]
I was updating my view inside a function that was being called by a parent component, and in my parent component I forgot to use @ViewChild(NameOfMyChieldComponent).
And update your view to use AsyncPipe:
There is a predefined one called ViewBuilder.
Then, where you want to diplay your passed-in views, just call the function like this:
You will be able to use your new view like this:
This will let you pass up to 10 views and use if conditions etc.
You can create your custom view like this:
You can pass a NavigationLink (or any other view widget) as a variable to a subview as follows:
I really struggled to make mine work for an extension of View.
The extension for View (using generics) - remember to import SwiftUI:
This not only allows you to put simple Views inside, but also, thanks to @ViewBuilder, use if-else and switch-case blocks:
Bonus:
If you want a greedy container, which will claim all the possible space (in contrary to the container above which claims only the space needed for its subviews) here it is:
Basically add a publisher to your DetailViewA which will be triggered from DetailViewB.
In DetailViewB dismiss the view and inform the publisher, which him self will close DetailViewA.
The idea is to force a refresh of the root view, this way leading to a cleaning of the navigation stack.
NB: The simple solution by notification below works on iOS not watchOS, as watchOS clears the root view from memory after 2 navigation level.
I don't have exactly the same issue but I do have code that changes the root view from one that doesn't support a navigation stack to one that does.
Since the SceneDelegate put itself in the environment any child view can add
I think if you did something similar that kept the View but created a new UIHostingController for it and replaced window.rootViewController it might work for you.
The more I think about how SwiftUI works and how things are structured, the less I think Apple will provide something equivalent to popToRootViewController or other direct edits to the navigation stack.
It flies in the face of the way SwiftUI builds up view structs because it lets a child view reach up into a parent's state and manipulate it.
DetailViewA can't create either of the of the destination views without providing access into its own state, meaning the author has to think through the implications of providing said access.
The trick is to collect all the states of your views, which tell if they are shown.
I have added the selection for the tabview tab and the boolean values saying if a specific view is shown
setting up the tabview with two tabs and binding our NavigationController.selection to the tabview:
Setting the view modifier isDetailLink to false on a NavigationLink is the key to getting pop-to-root to work.
isDetailLink is true by default and is adaptive to the containing View.
On iPad landscape for example, a Split view is separated and isDetailLink ensures the destination view will be shown on the right-hand side.
Setting isDetailLink to false consequently means that the destination view will always be pushed onto the navigation stack; thus can always be popped off.
Along with setting isDetailLink to false on NavigationLink, pass the isActive binding to each subsequent destination view.
At last when you want to pop to the root view, set the value to false and it will automatically pop everything off:
For me, in order to achieve full control for the navigation that is still missing in swiftUI, I just embedded the SwiftUI View inside a UINavigationController.
Take note that I hide the navigation bar in order to use the NavigationView as my display.
After that on my SwiftUI View I used/implemented the HasRootNavigationController protocol and extension
fullscreen views) define your own simple Screen view:
Then embed your root in a NavigationStackView (as you'd do with the standard NavigationView):
Now let's create a couple of child views just to show you the basic behaviour:
You can exploit PushView and PopView to navigate back and forth.
Of course, your content view inside the SceneDelegate must be:
In my case, I don't want to use the @Binding at every subsequent view.
Step 2: Create instance of AppState and add in contentView in SceneDelegate
Step 3: Code of ContentView.swift
So I am updating the appState value of the last view in the Stack which using .onReceive() I am capturing in the contentView to update the isActive to false for the NavigationLink.
Definitely, @malhal has the key to the solution, but for me, it is not practical to pass the Binding's into the View's as parameters.
Here is another approach that is modeled after Apple's published dismiss() method to pop to the previous View.
Add .environment(\.rootPresentationMode, self.$isPresented) to the root NavigationView, where isPresented is Bool used to present the
first child view.
Either add .navigationViewStyle(StackNavigationViewStyle()) modifier to the root NavigationView, or add .isDetailLink(false) to the NavigationLink for the first child view.
Add @Environment(\.rootPresentationMode) private var rootPresentationMode to any child view from where pop to root should be performed.
Finally, invoking the self.rootPresentationMode.wrappedValue.dismiss() from that child view
will pop to the root view.
You can use an @environmentobject injected into ContentView() to handle the selection:
To go back to contentview in child navigationlinks, you just set the navigationHelper.selection = nil.
This solution is based malhal's answer, uses suggestions from Imthath and Florin Odagiu, and required Paul Hudson's NavigationView video to bring it all together for me.
That allows a second view to appear.
You can use additional links to add more views.
The second view, plus any others that may have stacked up, disappear.
First, setup you environment ObservableObject and for readability, use an enum to type your views.
In your main ContentView, use buttons with NavigationLink on EmptyView().
Screen_11 on main view needs to remain active on Screen_12, and conversely, Screen_21 needs to remain active with Screen_22 or otherwise the views will pop out.
It allows the stack of views on a navigation flow to remain active.
I figure out a simple solution to pop to the root view.
I am sending a notification and then listening for the notification to change the id of the NavigationView, this will refresh the NavigationView.
It is easier to present and dismiss a modal view controller that includes a NavigationView.
Setting the modal view controller to fullscreen and later dismissing it gives the same effect as a stack of navigation views that pop to root.
[https://www.hackingwithswift.com/quick-start/swiftui/how-to-present-a-full-screen-modal-view-using-fullscreencover (hyper-link)]
Since currently SwiftUI still uses a UINavigationController in the background it is also possible to call its popToRootViewController(animated:) function.
You only have to search the view controller hierarchy for the UINavigationController like this:
in the ContentView.swift file:
define a RootSelection class, declare an @EnvironmentObject of RootSelection to record the tag of the current active NavigationLink only in root view.
add a modifier .isDetailLink(false) to each NavigationLink that is not a final detail view.
use a file system hierarchy to simulate the NavigationView.
this solution works fine when the root view has multiple NavigationLink.
.environmentObject(RootSelection()) is required for the ContentView() object in xxxApp.swift file
Enough in the root view (where you want to go back) use NavigationLink with an isActive designer.
In the last view, switch to the FALSE variable controlling the isActive parameter.
You can use some common class as I have in the example, or transmit this variable down the VIEW hierarchy through binding.
NavigationViewKit
[https://github.com/fatbobman/NavigationViewKit (hyper-link)]
in any view in NavigationView
You can also call it through NotificationCenter without calling it in the view
You do this by implementing [View#onSaveInstanceState (hyper-link)] and [View#onRestoreInstanceState (hyper-link)] and extending the [View.BaseSavedState (hyper-link)] class.
The work is split between the View and the View's SavedState class.
Then your View class can do the work of extracting the state members and doing the work necessary to get the class back to a valid state.
Notes: View#onSavedInstanceState and View#onRestoreInstanceState are called automatically for you if View#getId returns a value >= 0.
Otherwise you have to call View#onSaveInstanceState and write the Parcelable returned to the parcel you get in Activity#onSaveInstanceState to save the state and subsequently read it and pass it to View#onRestoreInstanceState from Activity#onRestoreInstanceState.
The answers here already are great, but don't necessarily work for custom ViewGroups.
To get all custom Views to retain their state, you must override onSaveInstanceState() and onRestoreInstanceState(Parcelable state) in each class.
What I came up with was remarkably like Kobor42's answer, but the error remained because I was adding the Views to a custom ViewGroup programmatically and not assigning unique ids.
The link shared by mato will work, but it means none of the individual Views manage their own state - the entire state is saved in the ViewGroup methods.
The problem is that when multiple of these ViewGroups are added to a layout, the ids of their elements from the xml are no longer unique (if its defined in xml).
At runtime, you can call the static method View.generateViewId() to get a unique id for a View.
Here is my code from the ViewGroup (it is abstract, and mOriginalValue is a type variable):
To augment other answers - if you have multiple custom compound views with the same ID and they are all being restored with the state of the last view on a configuration change, all you need to do is tell the view to only dispatch save/restore events to itself by overriding a couple of methods.
Basically your compound view's children's view IDs are shared by each compound view and state restoration gets confused.
By only dispatching state for the compound view itself, we prevent their children from getting mixed messages from other compound views.
I had the problem that onRestoreInstanceState restored all my custom views with the state of the last view.
I solved it by adding these two methods to my custom view:
Instead of using onSaveInstanceState and onRestoreInstanceState, you can also use a [ViewModel (hyper-link)].
Make your data model extend ViewModel, and then you can use ViewModelProviders to get the same instance of your model every time the Activity is recreated:
To use ViewModelProviders, add the following to dependencies in app/build.gradle:
You can read more about ViewModels here:
[Android Developer Guide, Saving UI States, Use ViewModel to handle configuration changes (hyper-link)]
[Tutorial ViewModels : A Simple Example (hyper-link)]
the only small drawback is that you must declare your saveable child views beforehand.
The above can be combined with a recently introduced option in Compiler settings to get a view very similar to that of Eclipse.
Switch to 'Problems' view in the Project pane:   [image]
Finally, look at the Problems view:   [image]
I also had to use the menu item "View, Tool Windows, Problems" to see the problems tool window at the bottom of the screen.
the "problem view" mentioned in previous answers was helpful, but i saw it didn't catch all the errors in project.
After running application, it began populating other classes that had issues but didn't appear at first in that problems view.
The problem is that visibility is an Integer on the View class, this means you have two ways to make this work:
Use the View.VISIBLE and View.GONE constants.
In your ViewModel java code:
Just call it in - viewDidAppear: of the presented view controller.
The problem is that if a view controller is embedded in one of these controllers the navigation or tab bar controller takes precedence and makes the decisions on autorotation and supported orientations.
I use the following 2 extensions on UINavigationController and UITabBarController so that view controllers that are embedded in one of these controllers get to make the decisions.
Now you can override the supportedInterfaceOrientations method or you can override shouldAutoRotate in the view controller you want to lock down otherwise you can leave out the overrides in other view controllers that you want to inherit the default orientation behavior specified in your app's plist
In theory this should work for all complex view controller hierarchies, but I have noticed an issue with UITabBarController.
Or ask the visible view controller
Then disabling rotation on the single View
I found that if it's a presented view controller, you can override preferredInterfaceOrientationForPresentation
[https://developer.apple.com/library//ios/documentation/UIKit/Reference/UIViewController_Class/index.html#//apple_ref/occ/clm/UIViewController/attemptRotationToDeviceOrientation (hyper-link)]
Call it in your viewDidAppear: method.
didnt'work for me when I called it in viewDidAppear of the presented view controller.
However it did work when I called it in preparForSegue in the presenting view controller.
And finally when a ViewControllerA need landscape state.
Just do that: before push/present to ViewControllerA assign isShouldRotate to true.
Don't forget when pop/dismiss that controller assign isShouldRotate to false at viewWillDisappear.
If you are using navigationViewController you should create your own superclass for this and override:
this will disable rotation in SecondViewController but if you push your SecondViewController when your device is on portrait orientation then your SecondViewController will appear in portrait mode.
According to solution showed by @sid-sha you have to put everything in the viewDidAppear: method, otherwise you will not get the didRotateFromInterfaceOrientation: fired, so something like:
PS (this method dont require to override orientation functions like shouldautorotate on every viewController, just one method on AppDelegate)
So, in every class in your project you can set this var in viewWillAppear:
lock all views in portrait mode
use AVPlayerViewController to play video
If it's a portrait then lock the view in portrait mode only.
Second, in your main view controller, define following functions
Then, you need to subclass AVPlayerViewController
Override these three functions in MyPlayerViewController.swift
Finally, create MyPlayerViewController instance in your view controller and set the property size value.
Initiate your player with proper videoUrl, then assign your player to playerViewController.
XXViewController is the ViewController you want to support Landscape mode.
Then [Sunny Shah's solution (hyper-link)] would work in your XXViewController on any iOS version:
This is the utility function to find the top most ViewController.
Use this to lock view controller orientation, tested on IOS 9:
Add the following code in your UIViewController implementation:
The key for me was the attemptRotationToDeviceOrientation call in viewWillAppear - without that the view would not properly rotate without physically rotating the device.
I tried a few solutions in here and the important thing to understand is that it's the root view controller that will determine if it will rotate or not.
I created the following objective-c project [github.com/GabLeRoux/RotationLockInTabbedViewChild (hyper-link)] with a working example of a TabbedViewController where one child view is allowed rotating and the other child view is locked in portrait.
It's not perfect but it works and the same idea should work for other kind of root views such as NavigationViewController.
[iOS9+]
If anyone dragged all the way down here as none of above solutions worked,
and if you present the view you want to change orientation 
by segue, you might wanna check this.
I wanted to force orientation and then on going back go back to device orientation but [UIViewController attemptRotationToDeviceOrientation]; just did'nt work.
And on view dissmising I just force back to any orientation I have as userOreintation:
You can return [EmptyResult (hyper-link)] to return an empty view.
Best solution currently is to just use a custom view controller with its view defined in a xib, and simply delete the "view" property that Xcode creates inside the storyboard when adding the view controller to it (don't forget to set the name of the custom class though).
You can use this trick for any kind of container views, or content view.
For example, if you have a base view controller class controllerA which has a XIB name controllerA.xib and you subclassed this with controllerB and want to create an instance of controllerB in a storyboard, then you can:
create the view controller in the storyboard
delete the view of the controllerB in the storyboard
override load view in controllerA to:
The .xib file contains your custom view layout (using auto layout constraints preferably).
Use your custom view anywhere in your storyboard.
Just add a UIView and set the class name to your custom class name.
1) Create a custom subclass of UIView (you can go to File -> New -> File... -> Cocoa Touch Class.
Make sure "Subclass of:" is "UIView").
2) Add a view that's based on the xib as a subview to this view at initialization.
3) Wherever you want to use it in your storyboard, add a UIView as you normally would, select the newly added view, go to the Identity Inspector (the third icon on the upper right that looks like a rectangle with lines in it), and enter your subclass's name in as the "Class" under "Custom Class".
I've always found the "add it as a subview" solution unsatisfactory, seeing as it screws with (1) autolayout, (2) @IBInspectable, and (3) outlets.
That object is then put through the hydration process, has awakeFromNib called on it, is added as a view, etc.
We can use this in a "cardboard cut-out" subclass of our view, the only purpose of which will be to load the view from the NIB and return it for use in the Storyboard.
The embeddable subclass is then specified in the Storyboard view's identity inspector, rather than the original class.
This extra boilerplate might seem suboptimal—and in a sense it is, because ideally UIStoryboard would handle this seamlessly—but it has the advantage of leaving the original NIB and UIView subclass completely unmodified.
Note: the class set on the view in the NIB file remains the same.
The subclass can't be used to instantiate the view in code, so it shouldn't have any additional logic, itself.
⚠️ The one significant drawback here is that if you define width, height, or aspect ratio constraints in the storyboard that don't relate to another view then they have to be copied over manually.
Constraints that relate two views are installed on the nearest common ancestor, and views are woken from the storyboard from the inside-out, so by the time those constraints are hydrated on the superview the swap has already occurred.
Constraints that only involve the view in question are installed directly on that view, and thus get tossed when the swap occurs unless they are copied.
Note that what is happening here is constraints installed on the view in the storyboard are copied to the newly instantiated view, which may already have constraints of its own, defined in its nib file.
instantiateViewFromNib is a type-safe extension to UIView.
Create a custom UIView class in a .swift file to control your xib.
GOTCHA: leave the class value (under the identity Inspector) for your custom view in the .xib file blank.
So your custom view will have no specified class, but it will have a specified File's Owner.
Add a UIView to your desired storyboard and set the class to be your custom class name (i.e.
I think about alternative for using XIB views to be using View Controller in separate storyboard.
Then in main storyboard in place of custom view use container view with Embed Segue and have StoryboardReference to this custom view controller which view should be placed inside other view in main storyboard.
Then we can set up delegation and communication between this embed ViewController and main view controller through prepare for segue.
This approach is different then displaying UIView, but much simpler and more efficiently (from programming perspective) can be utilised to achieve the same goal, i.e.
have reusable custom view that is visible in main storyboard
The additional advantage is that you can implement you logic in CustomViewController class and there set up all delegation and view preparation without creating separate (harder to find in project) controller classes, and without placing boilerplate code in main UIViewController using Component.
Music Player component (widget like) that is embeddable in other views.
Use extension for UIView:
Create files MyView.h, MyView.m and MyView.xib.
First prepare your MyView.xib as [Ben Patch's response (hyper-link)] says so set class MyView for File's owner instead of main view inside this XIB.
MyView.h:
MyView.m:
And later just create your view programatically:
Preview of this view will not be shown in Storyboard if you use WatchKit Extension because of this bug in Xcode >= 9.2: [https://forums.developer.apple.com/thread/95616 (hyper-link)]
You can just create your CustomView class, have the master instance of it in a xib with all the subviews and outlets.
No need to fiddle with File's Owner, or connect outlets to a proxy or modify the xib in a peculiar way, or add an instance of your custom view as a subview of itself.
Change your superclass from UIView to NibView (or from UITableViewCell to NibTableViewCell)
It even works with IBDesignable to refer your custom view (including the subviews from the xib) at design time in the storyboard.
File's owner is supposed to be used only for top-level objects not UIViews.
Having UIView as File's owner leads to these undesirable consequences.
You are forced to use contentView where you are supposed to use self.
It’s not only ugly, but also structurally wrong because the intermediate view keeps data structure from conveying it’s UI structure.
You can only have one UIView per Xib.
An Xib is supposed to have multiple UIViews.
Edit: This does work on SQL Server, and it doesn't require you joining to sys.schemas to get the schema of the view.
if it's Oracle you would use the "all_views" table.
If you want to check the validity and consistency of all the existing views you can use the following query
WHERE nView is the name of view
For people checking the existence to drop View use this
DROP VIEW [ IF EXISTS ] [ schema_name . ]
view_name [ ...,n ] [ ; ]
You can check the availability of the view in various ways
use sys.views
use INFORMATION_SCHEMA.VIEWS
When you write an XML layout, it will be inflated by the Android OS which basically means that it will be rendered by creating view object in memory.
Let's call that implicit inflation (the OS will inflate the view for you).
You can also inflate views explicitly by using the LayoutInflater.
Use the returned View
Set the content view with returned view (above)
"Inflating" a view means taking the layout XML and parsing it to create the view and viewgroup objects from the elements and their attributes specified within, and then adding the hierarchy of those views and viewgroups to the parent ViewGroup.
When you call setContentView(), it attaches the views it creates from reading the XML to the activity.
You can also use LayoutInflater to add views to another ViewGroup, which can be a useful tool in a lot of circumstances.
Inflating is the process of adding a view (.xml) to activity on runtime.
When we create a listView we inflate each of its items dynamically.
If we want to create a ViewGroup with multiple views like buttons and textview, we can create it like so:
Then we have to create a layout where we can add above views:
And now if we want to add a button in the right-corner and a textview on the bottom, we have to do a lot of work.
First by instantiating the view properties and then applying multiple constraints.
I think here "inflating a view" means fetching the layout.xml file drawing a view specified in that xml file and POPULATING ( = inflating ) the parent viewGroup with the created View.
Because we make UI into XML but view objects is what we display so we somehow need to convert xml into view objects so inflating means we are converting xml into view objects so that it can be displayed, for this we need a service called layout inflator service and give it an xml and it will be convert for you.
In the iOS UIKit universe, this means getting the reference to the .Xib (which is XML, just like android) file and adding it to the current ViewController's view hierarchy.
Enable the tool bar by View -> Toolbar.
When you create (or load) your view controller, you'll want to register it as an observer for the UIApplicationDidBecomeActiveNotification and specify which method that you want to call when that notification gets sent to your application.
Remember to remove yourself as the observer when your view is going away:
.aspx
For those looking for the older .aspx view (and Asp.Net WebForms) [server side comment syntax (hyper-link)]:
minification), will waste I/O, and, since the comment can be viewed by the user by viewing the page source or intercepting the traffic with the browser's Dev Tools or a tool like Fiddler or Wireshark, can also pose a security risk, hence the preference to use server side comments on server generated code (like MVC views or .aspx pages).
Views are handy when you need to select from several tables, or just to get a subset of a table.
Views are a bit of separation, allowing you to view the data in the tables differently than they are stored.
A common practice is to hide joins in a view to present the user a more denormalized data model.
Other uses involve security (for example by hiding certain columns and/or rows) or performance (in case of materialized views)
Views can:
Increase performance (Sql Server Indexed Views)
Offer specific query optimization with the view that might be difficult to glean otherwise
And you should not design tables to match views.
Views are partly a tool that mitigates the complexities that arise from an efficient, normalized model by allowing you to abstract that complexity.
Also, asking "what are the advantages of using a view over a table? "
You can't go without tables, but you can do without views.
Tables are the concrete model and Views are an abstracted, well, View.
First of all as the name suggests a view is immutable.
thats because a view is nothing other than a virtual table created from a stored query in the DB.
Because of this you have some characteristics of views:
you can join multiple tables into a single view
you can aggregate data in a view (select count)
view dont actually hold data, they dont need any tablespace since they are virtual aggregations of underlying tables
so there are a gazillion of use cases for which views are better fitted than tables, just think about only displaying active users on a website.
a view would be better because you operate only on a subset of the data which actually is in your DB (active and inactive users)
Views for selection:
Views provide abstraction over tables.
You can add/remove fields easily in a view without modifying your underlying schema
Views can model complex joins easily.
Views can hide database-specific stuff from you.
You can easily manage your GRANTS directly on views, rather than the actual tables.
It's easier to manage if you know a certain user may only access a view.
Views can help you with backwards compatibility.
You can change the underlying schema, but the views can hide those facts from a certain client.
Views for insertion/updates:
You can handle security issues with views by using such functionality as Oracle's "WITH CHECK OPTION" clause directly in the view
It's not obvious whether you will be able to insert/update a view, because the view hides its underlying joins from you
Views are acceptable when you need to ensure that complex logic is followed every time.
For instance, we have a view that creates the raw data needed for all financial reporting.
By having all reports use this view, everyone is working from the same data set, rather than one report using one set of joins and another forgetting to use one which gives different results.
Views are acceptable when you want to restrict users to a particular subset of data.
For instance, if you do not delete records but only mark the current one as active and the older versions as inactive, you want a view to use to select only the active records.
Views can be used to ensure that users only have access to a set of records - for instance, a view of the tables for a particular client and no security rights on the tables can mean that the users for that client can only ever see the data for that client.
Views are very helpful when refactoring databases.
Views are not acceptable when you use views to call views which can result in horrible performance (at least in SQL Server).
When views call views, they have to completely generate the underlying view.
I have seen this where the view called a view which called a view and so many millions of records were generated in order to see the three the user ultimately needed.
I remember one of these views took 8 minutes to do a simple count(*) of the records.
Views calling views are an extremely poor idea.
Views are often a bad idea to use to update records as usually you can only update fields from the same table (again this is SQL Server, other databases may vary).
You should design your table WITHOUT considering the views.
Apart from saving joins and conditions, Views do have a performance advantage: SQL Server may calculate and save its execution plan in the view, and therefore make it faster than "on the fly" SQL statements.
View may also ease your work regarding user access at field level.
Views can represent a subset of the data contained in a table.
Views can limit the degree of exposure of the underlying tables to the outer world: a given user may have permission to query the view, while denied access to the rest of the base table.
Views can join and simplify multiple tables into a single virtual table.
Views can act as aggregated tables, where the database engine aggregates data (sum, average, etc.)
Views can hide the complexity of data.
For example, a view could appear as Sales2000 or Sales2001, transparently partitioning the actual underlying table.
Views take very little space to store; the database contains only the definition of a view, not a copy of all the data that it presents.
Views can provide extra security, depending on the SQL engine used.
EDIT: this flakes out if the view is rotated, as the frame property is undefined if a CGAffineTransform has been applied.
You might even be able to account for rotation this way by using CGPointApplyAffineTransform() with your UIView's CGAffineTransform.
Brad Larson's solution worked great even when the view is rotated.
It works with rotated view too!
For me understanding position and anchorPoint was easiest when I started comparing it with my understanding of frame.origin in UIView.
A UIView with frame.origin = (20,30) means that the UIView is 20 points from left and 30 points from top of its parent view.
This distance is calculated from which point of a UIView?
Its calculated from top-left corner of a UIView.
Here is [user945711's answer (hyper-link)] adjusted for NSView on OS X.
Besides NSView not having a .center property, the NSView's frame doesn't change (probably because NSViews do not come with a CALayer by default) but the CALayer frame origin changes when the anchorPoint is changed.
This is an alternate solution which allows you to change the anchor point through the Attributes Inspector and has another property to view the anchor point for confirmation.
This really helped me when planning transforms on UIViews.
In this case I am passing data from a selected cell in a table view to another view controller.
in the .h file of the trget view:
I've added a property called userInfoDict to ViewControllers using a category.
It will pass this userInfoDict to the next ViewController.
The shadow we're trying to remove is a hairline UIImageView somewhere under UINavigationBar.
Add method which finds this shadow (hairline) UIImageView:
[code snippet]
Add/edit viewWillAppear/viewWillDisappear methods:
[code snippet]
This might sound stupid, but this hairline only appears when the background color for viewController's view is set to any color, but white.
So if you want it to disappear without much trouble just set the controller's view background color to WHITE COLOR.
In your UINavigationBar subclass, override didAddSubview with the following code:
Did it for me [UIColor blackColor] might be your background color,
and tabviewController is your UITabBarController if you are using it!
I just added a 1 pixel high UIView to the bottom of the nav bar (1 pixel below the nav bar) with the same colour as my nav bar:
A nice short Swift function to find the hairline in the subviews is this one:
You should add a view to a bottom of the UISearchBar
For any view controller:
Simply call this from within viewDidLoad().
you need to put this in viewDidLayoutSubviews instead of viewDidLoad
In Viewdidload()
Set Navigation controller's userdefault value true for key "hidesShadow"
Just put this function at the first Viewcontroller and call it in viewdidload
Add this to viewDidLoad():       
[code snippet]
Try to add this in ViewDidLoad method:
One very important note here - it's a lot more flexible to change the appearance of the UIViewController's navigationItem than the navigationBar directly.
For the simple reason that the navigationItem is tied to a single UIViewController and represents the state of the navigationBar for that particular UIViewController.
This is big, as you don't have to handle the navigation bar changes between different view controllers within viewWillAppear (or something similar), as you would if you mutated the navigationBar; which is, remember, shared between all view controllers of a given navigation stack (UINavigationController), and changing it in one place changes it for all view controllers up to the stack.
You just set the correct UINavigationBarAppearance for a particular view controller and UIKit will correctly update the navigation bar styling depeneding on which view controller is currently the top view controller on the navigation stack.
adds a view controller as a child of another view controller.
I used [Reveal (hyper-link)] to inspect the view hierarchy after the screen goes black.
The key UIWindow is completely empty – no view hierarchy at all!
You can just re-add the toViewController's view as a subview of the key window's:
I've checked and the key window's rootViewController is still correctly set, so that's fine.
instead of [inView insertSubview:toViewController.view aboveSubview:fromViewController.view];
    just add: [inView addSubview:toViewController.view];
In iOS 8, you must manipulate the views returned by viewForKey: instead of the .view property of the view controllers returned by viewControllerForKey:.
This isn't particularly clear from the beta documentation, but if you look into the source for UIViewControllerTransitioning.h you'll see this comment above viewControllerForKey::
So instead of adjusting frames etc of toViewController.view, use the return value of [transitionContext viewForKey:UITransitionContextToViewKey].
If your app needs to support iOS7 and/or Xcode 5, then you can use a simple category method on UIViewController like the following:
Then, get your toViewController and fromViewController as usual, but get the views using [toViewController viewForTransitionContext:transitionContext].
Edit: There appears to be a bug, where the presenting view controller's view is nil when returned from viewForKey, which prevents you from making modal transitions that animate the presenting view at all (such as sliding off, or flip-horizontal).
Apple may intend that UIModalPresentationCustom only modifies the view of the incoming modal.
If you want to modify the outgoing view, you need to guarantee full screen presentation of the new view?
In any case, you should use viewForKey and UIModalPresentationFullScreen.
In other words, leaving at the default of UIModalPresentationFullScreen instead of specifying UIModalPresentationCustom fixed the disappearing view issue.
Note the UIViewControllerTransitioningDelegate protocol still seems to be followed even when leaving this at the default.
In iOS 8, you need create a UIPresentationController and implement the method below, in the UIViewControllerTransitioningDelegate.
Asks your delegate for the custom presentation controller to use for managing the view hierarchy when presenting a view controller.
When you present a view controller using the
  UIModalPresentationCustom presentation style, the system calls this
  method and asks for the presentation controller that manages your
  custom style.
The default presentation controller does not add any views or
  content to the view hierarchy.
I had to swap the order and call the [transitionContext completeTransition:] method after adding the view back in to get presenting a new view controller from the dismissal completion block of another view controller to work right.
The view disappears because you take out the presenting view controller's view out of its original location (view hierarchy), put it inside the containerView that your animator provides but never returns it back after the animation has finished.
So that view controller's view is removed with its superview (containerView) from the window completely.
In iOS 7 the system always returned view controllers' views that are involved in the presentation (presenting and presented) to their original places after the transition has finished animating automatically.
The rule is very simple: the animator should only manipulate the presenting view controller's view if that view controller's view is going to be hidden (removed from the view hierarchy) completely by the end of transition.
In other words it means that after the initial presentation animation finishes only the presented view controller's view will be visible and not the presenting view controller's view.
For example if you set presented view controller's view's opacity to 50% and use UIModalPresentationFullScreen you will not be able to see presenting view controller's view underneath the presented but if you use UIModalPresentationOverFullscreen - you will (UIPresentationController's shouldRemovePresentersView method is responsible for specifying that).
Why not allow the animator manipulate the presenting view controller's view at all times?
First of all, if the presenting view controller's view is going to stay visible after the animation finishes during the whole presentation life cycle there is no need to animate it at all — it just stays where it is.
Second, if the ownership for that view controller is transferred to the presentation controller, the presentation controller will most likely not know how to layout that view controller's view when needed for example when the orientation changes, but the original owner of the presenting view controller does.
In iOS 8 viewForKey: method was introduced to get views that the animator manipulates.
First, it helps to follow the rule described above by returning nil whenever the animator should not touch the view.
Second, it may return a different view for the animator to animate.
In this case you would want to add some shadow or decoration around the presented view controller's view.
The animator will animate that decoration instead and the presented view controller's view will be a child of the decoration.
viewControllerForKey: doesn't go away, it can still be used if a direct access to view controllers is needed but the animator should not make any assumptions about the views it needs to animate.
There are several things you can do to correctly fix an issue with a disappearing presenting view controller's view when you explicitly place it inside the animator's container view:
If do not need to animate the presenting view controller's view, use viewForKey: to get views to animate instead of reaching out to view controller's views directly.
viewForKey: may return nil or even completely different views.
If you want to animate the presenting view controllers's view you should consider using UIModalPresentationFullScreen style or continue using UIModalPresentationCustom and implement your own subclass of UIPresentationController with shouldRemovePresentersView returning YES.
In all other rare cases you will have to return the presenting view controller's view to its original location as other answers suggested.
My original transition on iOS 7 was just to have a blurred background of the view underneath the modal.
I found that viewForKey:UITransitionContextToViewKey returns nil on ios8.
So if it's nil, I grab the view from the 'to' view controller.
However, this seems to result in the 'to' view not being moved from the container to the window when completeTransition:YES is called.
So if viewForKey:UITransitionContextToViewKey returns nil, I fall over to toVC.view, and keep track of the fact that it returned nil, and after the completion I move it to the container's initial superview (which happens to be the window).
subclass UIPresentationController, override shouldRemovePresentersView (with NO)
override presentationControllerForPresentedViewController in your TransitionDelegate class and return your custom UIPresentationController
+1 in your custom transition, don't add toView when the dismissal animation is happening.
I was looking to create a custom transition with a semi-transparent background where I could still see the view controller I was coming from but I only got a black background.
Override the shouldRemovePresentersView to false as follows:
[code snippet]
In the place you are instantiating the new view controller and setting its  transition delegate, indicate that you want it to show a custom modal presentation style as follows: 
[code snippet]
Now override the presentationController method of your UIViewControllerTransitioningDelegate and return your custom UIPresentationController.
One other thing to note is you should not try and reference your fromView in your presentAnimator class.
Turns out, you need to set the presentation style BEFORE THE VIEW LOADS.
Do it in init, or do it from the previous controller, or however you'd like - as long as it is before the view loads.
What I want to do is very simple: I have a collection view, when a cell is tapped, it will segue to a detail view.
Instead of using the boring default style of 'present modally', I want to make it more interesting, so I wrote an animator for view controller transition.
When it shows the detail view, everything works as expected.
However, when I dismiss the detail view and return to the collection view, I can only see the animated detail view, the collection view is just gone.
1.Right after the following line is called from function 'animateTransition()', the collection view resumes and shows up
2.As long as the detail view is not fully cover the collection view, the collection view will not disappear when it segues back from detail view
The detail view could show in full screen with animation and when it dismissed, I can see both collection view as background and animated detail view.
3.To refer to 'toView' and 'fromView', both of the following methods work
But when I switched the segue style to 'Over Full Screen', the directly way return 'nil' for both 'toView' and 'fromView' and only indirectly way works, this problem is also mentioned in [another post (hyper-link)], so I think it's worth to post my little discovery here.
I was having the same problem when dismissing a content view controller.
My app has this parent view controller showing a child view controller (presenting vc) modally.
Then when a subview in the childVC is tapped, it shows another vc (which I am calling the content view controller (presented vc))
First of all, you'd need to determine the CGRect of the UIView that you will be presenting.
Now that you are calculating the screen area to blur, passing it into the blur category and receiving a UIImage back that has been blurred, now all that is left is to set that blurred image as the background of the view you will be presenting.
Just copy the layer of UIToolbar and you're done, AMBlurView does it for you.
Just draw a UIToolbar behind your view.
You can try using my custom view, which has capability to blur the background.
The background of my view is a scrollView which scrolls with the view, thus provide the blur effect for the rest of the superview.
You have to do a Gaussian Blur, so the first thing you have to do is to add a new .m and .h file with the code i'm writing here, then you have to make and screen shoot, use the desired effect and add it to your view, then your UITable UIView or what ever has to be transparent, you can play with applyBlurWithRadius, to archive the desired effect, this call works with any UIImage.
I just wrote my little subclass of UIView that has ability to produce native iOS 7 blur on any custom view.
[https://github.com/ivoleko/ILTranslucentView (hyper-link)]
Every response here is using vImageBoxConvolve_ARGB8888 this function is really, really slow, that is fine, if the performance is not a high priority requirement, but if you are using this for transitioning between two View Controllers (for example) this approach means times over 1 second or maybe more, that is very bad to the user experience of your application.
iOS/GPUImageMovieWriter
iOS/GPUImageView
Frame A view's frame (CGRect) is the position of its rectangle in the superview's coordinate system.
Bounds A view's bounds (CGRect) expresses a view rectangle in its own coordinate system.
Center A center is a CGPoint expressed in terms of the superview's coordinate system and it determines the position of the exact center point of the view.
Taken from [UIView + position (hyper-link)] these are the relationships (they don't work in code since they are informal equations) among the previous properties:
NOTE: These relationships do not apply if views are rotated.
Using the frame allows you to reposition and/or resize a view within its superview.
Usually can be used from a superview, for example, when you create a specific subview.
When you need the coordinates to drawing inside a view you usually refer to bounds.
A typical example could be to draw within a view a subview as an inset of the first.
Drawing the subview requires to know the bounds of the superview.
Different behaviours happen when you change the bounds of a view.
The change happens around the center of the view.
For example, if you change the origin for view1 you can see (comment the previous code if you want) that now the top left corner for view2 touches the view1 one.
You say to view1 that its top left corner now is at the position (20.0, 20.0) but since view2's frame origin starts from (20.0, 20.0), they will coincide.
The origin represents the view's position within its superview but describes the position of the bounds center.
Both allow to derive the frame of a view (See previous equations).
View1's case study
This instead what happens if I change [self view] bounds like the following.
Here you say to [self view] that its top left corner now is at the position (30.0, 20.0) but since view1's frame origin starts from (30.0, 20.0), they will coincide.
[UIView Geometry (hyper-link)]
[UIView Frames and Bounds (hyper-link)]
Setting this value to YES causes subviews to be clipped to the bounds
  of the receiver.
If set to NO, subviews whose frames extend beyond the
  visible bounds of the receiver are not clipped.
In other words, if a view's frame is (0, 0, 100, 100) and its subview is (90, 90, 30, 30), you will see only a part of that subview.
The latter won't exceed the bounds of the parent view.
Instead to a UIView, this property is applied to a CALayer.
For further references take a look to [How is the relation between UIView's clipsToBounds and CALayer's masksToBounds?
Frame is not really a distinct property of the view or layer at all, it is a virtual property, computed from the bounds, position(UIView's center), and transform.
So basically how the layer/view layouts is really decided by these three property(and anchorPoint), and either of these three property won't change any other property, like changing transform doesn't change bounds.
Just like a picture can be moved anywhere on the wall, the coordinate system of a view's frame is the superview.
(wall=superview, frame=view)
The basketball is somewhere within the court just like the coordinate system of the view's bounds is within the view itself.
(court=view, basketball/players=content inside the view)
Like the frame, view.center is also in the coordinates of the superview.
The yellow rectangle represents the view's frame.
The green rectangle represents the view's bounds.
This is the same as example 2, except this time the whole content of the view is shown as it would look like if it weren't clipped to the bounds of the view.
The best way to learn is creating Single View Application, trying modify these parameters and see how subviews change.
Sure, as long as when it's all said and done your view returns an HttpResponse object.
If you don't want to return the HttpResponse from the first view then just store it into some variable to ignore:
View functions should return a rendered HTML back to the browser (in an HttpResponse).
Calling a view within a view means that you're (potentially) doing the rendering twice.
Instead, just factor out the "add" into another function that's not a view, and have both views call it.
And your app_name/view1_template.html might contain a conditional template tag
Without class based views:
With [class based views (hyper-link)]:
What about trying something like the following assuming you are using only one view engine:
If you want to re-use this across multiple controller actions, building on the solution given by Dave, you can define a custom view result as follows:
Then in your action simply return an instance of your custom view:
In asp.net core 2.x the ViewEngines property no longer exists so we have to use the ICompositeViewEngine service.
For the curious: The base interface IViewEngine is not registered as a service so we must inject ICompositeViewEngine instead.
The FindView() method however is provided by IViewEngine so the member variable may use the base interface.
Note that the call is "GetView", not "Find View)
A screen shot of the view with code and assembly.
"ESC" to switch to code view, "i" to switch back to gdb
The most useful views are already implemented: source, assembly, registers, stack, memory, threads, expressions... but it should be easy to extend it with any information that is exposed on the GDB Python API.
A view represents a virtual table.
You can join multiple tables in a view and use the view to present the data as if the data were coming from a single table.
[Creating Views and Stored Procedures (hyper-link)] - has some information from Microsoft as to when and why to use each.
So, if I find myself querying from those tables A LOT... instead of doing the join in EVERY piece of SQL, I would define a view like:
A SQL View is a virtual table, which is based on SQL SELECT query.
A view references one or more existing database tables or other views.
View is simple showcasing data stored in the database tables whereas a stored procedure is a group of statements that can be executed.
A view is faster as it displays data from the tables referenced whereas a store procedure executes sql statements.
Check this article : [View vs Stored Procedures (hyper-link)] .
Whereas Views are used for SELECT statements.
In views you cannot alter the data.
Some databases have updatable Views where you can use INSERT-UPDATE-DELETE on Views.
A View:
@Patrick is correct with what he said, but to answer your other questions a View will create itself in Memory, and depending on the type of Joins, Data and if there is any aggregation done, it could be a quite memory hungry View.
A VIEW is a dynamic query where you can use a "WHERE"-Clause
Nor a view, nor a stored procedure allocate memory.
Only a materialized view
A TABLE is just one ENTITY, a view can collect data from different ENTITIES or TABLES
A view is a simple way to save a complex SELECT in the database.
Views are static.
Simple views just run the query and filter the result.
But databases like Oracle allow to create a "materialized" view which is basically a table which is updated automatically when the underlying data of the view changes.
A materialized view allows you to create indexes on the columns of the view (especially on the computed columns which don't exist anywhere in the database).
Main difference is that when you are querying a view then it's definition is pasted into your query.
Another option are indexed views..
Mahesh is not quite correct when he suggests that you can't alter the data in a view.
So with patrick's view
You can't INSERT to this view as not all of the fields in all of the table are present and I'm assuming that PROFILE_ID is the primary key and can't be NULL.
However you can sometimes INSERT into a view ...
I created a view on an existing table using ...
Obviously you can't update any fields which are aggregated or calculated but any view which is just a straight view should be updateable.
If the view contains more than one table then you can't insert or delete but if the view is a subset of one table only then you usually can.
In addition to the above comments, I would like to add few points about Views.
Views can be used to hide complexity.
In such scenario, he can create Views which can be easily queried by other team members as they are querying any single table.
Security can be easily implemented by Views.
These columns are not supposed to be visible to the users who are not authorized to view them.
In such case, we can create a View selecting the columns in a table which doesn't require any authorization like Name, Age etc, without exposing sensitive columns (like Salary etc.
Now we can remove permission to directly query the table Employee and just keep the read permission on the View.
In this way, we can implement security using Views.
Use shape in xml with rectangle.set the property of bottom or upper radius as want.then apply that xml as background to ur view....or...use gradients to do it from code.
In Android L you will be able to just use [View.setClipToOutline (hyper-link)] to get that effect.
In previous versions there is no way to just clip the contents of a random ViewGroup in a certain shape.
If you only need rounded corners in the ImageView, you can use a shader to 'paint' the image over the shape you are using as background.
If you really need every children to be clipped, maybe you can another view over your layout?
You could actually create a custom ViewGroup that draws that shape over every children overriding the onDraw method.
according to this post written by Guy Romain, one of the leading developers of the entire Android UI toolkit,  it is possible to make a container (and all his child views) with rounded corners, but he explained that it too expensive (from performances of rendering issues).
I'll recommend you to go according to his post, and if you want rounded corners, then implement rounded corners ImageView according to this post.
Or you can use a android.support.v7.widget.CardView like so:
[Jaap van Hengstum's answer (hyper-link)] works great however I think it is expensive and if we apply this method on a Button for example, the touch effect is lost since the view is rendered as a bitmap.
For me the best method and the simplest one consists in applying a mask on the view, like that:
The CardView worked for me in API 27 in Android Studio 3.0.1.
And keep this drawable as background for the view to which you want to keep rounded corner border.
You can use an androidx.cardview.widget.CardView like so:
With the Material Components Library the best way to make a View with rounded corners is to use the MaterialShapeDrawable.
Finally apply the shapeDrawable as background in your LinearLayout (or other view):
In order to view all the SQL and parameters in OpenJPA, put these two parameters in the persistence.xml:
There are a couple of advantages to using a function to define your view model.
In that case, you could use viewModel directly in the computed observable, but it does get evaluated immediate (by default) so you could not define it within the object literal, as viewModel is not defined until after the object literal closed.
Many people don't like that the creation of your view model is not encapsulated into one call.
By using self in this case, you can ensure that it is being removed from the overall view model.
My viewModel is a singleton, I don't need to create multiple instances (i.e.
new viewModel())
The default view option is just after the "SCM checkout retry count" and before "enable security"
You might need more than one view, but it seems you have already created another one...
from comment> When I go to Manage Jenkins -> Configure System and Default View, all our "public" views are listed there in the drop down.
Make sure the view you created isn't just in "My Views" for your user, and is open to everyone.
You can only choose between default views when you have more than one view.
So first, create a new view by clicking the '+' mark on the Jenkins dashboard:
Of course, the '+' will only appear if you have permission to create new views.
The Default View option appears.
Using this you can select the default view.
To change the default view in Jenkins go to Jenkins Dashboard:
Select Manage Jenkins --> Configure System --> Default view
Default view will be available after SCM checkout retry count in MAVEN Project Configuration .
Select your applicable View and Save and you're done.
from your TextView and then adjust padding and margin accordingly.
If you want to provide a wrap_content behavior, but still enforce the constraints on your View, you should set its width and/or height to wrap_content combined with the app:layout_constrainedWidth=”true|false” and/or app:layout_constrainedHeight=”true|false” attributes, as stated [on the docs (hyper-link)]:
Give your re-usable views some sort of identifier which is set dynamically.
Have the re-usable views query the NavigationCoordinator for the destination view, passing their identifier and the identifier of the view type they are navigating to.
This leaves the NavigationCoordinator as a single injection point, and it's a non-view object which can be accessed outside the view hierarchy.
During setup you can register the right view classes for it to return, using some sort of matching with the identifiers it's passed at runtime.
Since it is injected via the environment, any view can override the default NavigationCoordinator at any point and supply a different one to its subviews.
But what if ViewB also needs a preconfigured view-destination ViewC?
I would need to create ViewB already in such a way that ViewC is injected already in ViewB before I inject ViewB into ViewA.
Rather than supplying views, you can design your re-usable components so that you supply closures which supply views on demand.
That way the closure which produces ViewB on demand can supply it with a closure which produces ViewC on demand, but the actual construction of the views can happen at a time when the contextual information that you need is available.
Inside of ContentView, we have this:
We can define the ContenViewDelegate protocol like this:
Where Item is just a struct which is identifiable, could be anything else (e.g id of some element like in a TableView in UIKit)
Next step is to adopt this protocol in Coordinator and simply pass the view you want to present:
Here is a fun example of drilling down infinitely and changing your data for the next detail view programmatically
I will follow a little example where our View that should be reusable is a simple View that shows a Text and a NavigationLink that will go to some Destination.
The design problem: NavigationLinks are hardcoded into the View.
In your example it is bound to the View but as other answers have already shown, you can inject the destination to your View type struct MyView<Destination: View>: View.
You can use any Type conforming to View as your destination now.
But if the view containing this NavigationLink should be reusable I can not hardcode the destination.
As soon as I have multiple reusable screens I run into the logical problem that one reusable view (ViewA) needs a preconfigured view-destination (ViewB).
But what if ViewB also needs a preconfigured view-destination ViewC?
I would need to create ViewB already in such a way that ViewC is injected already in ViewB before I inject ViewB into ViewA.
At some point you need to tell the view what view comes next.
I put together a simple example that uses Coordinators to pass around dependencies and to create the views.
Now we can create a specific Coordinator that will show the BoldTextView when clicking on the NavigationLink.
If you want, you can also use the Coordinator to implement custom logic that determines the destination of your view.
The following Coordinator shows the ItalicTextView after four clicks on the link.
In this example I have a TextField -> EmptyView -> Text where the value from the TextField should be passed to the Text.
The EmptyView must not have this information.
This is the coordinator that creates views by calling other coordinators (or creates the views itself).
It passes the value from TextField to Text and the EmptyView doesn't know about this.
To wrap it all up, you can also create a MainView that has some logic that decides what View / Coordinator should be used.
to construct NavigationLink we need to provide some specific views for it.
AnyView
Here is a working demo of idea, based on Router/ViewModel concepts using type-erased views to avoid tight dependencies.
ViewA component will live in a UI isolated Framework.
ViewA component will likely know that somehow from there it would be able to navigate.
But ViewA doesn't care to much about the type of what's living within it.
It will just provide it's own "potentially" navigatable view and that's it.
A higher-order-component
erased typed builder (inspired by React, who would tell me after many years in iOS :D) that will receive a view from the component.
And this builder would provide a View.
ViewA does not need to know anything else.
ViewA
ViewA actually doesn't care about what to be placed within there.
What it does is define a contract that any segue coordinator attached to a view must be able to provide another view, as a destination, in response to a concrete segue.
It’s a design choice whether to use a single segue enumeration for a group of views tightly working together or have each view define its own.
The latter being a more preferable option if each view brings along its own generic types.
Here’s an example of a list view for generic Value type.
So this view accepts a segue coordinator that responds to destination queries based on available segues in Destinations and passes on the user selected value to the coordinator for decision making.
It is possible to define a default segue coordinator by conditionally extending the view and introducing a new convenience initializer as below.
Above we can see an example of responding to a single segue choice by instantiating another view from the framework DetailView.
We provide another segue coordinator and pass on the value (of user choosing) to the detail view.
Views can be made reusable and factored out into a separate module
such as framework or swift package.
Strong (context) type information is available at view construction site.
Deep view hierarchies do not result in nested closures.
Here is an overview:
Router with trigger views.
A router will return trigger subviews for all possible navigation routes to insert them into a presenting view.
Such a subview code snippet will contain NavigationLink or .sheet modifier inside, as well as a destination view specified, and will use a state property, stored in the router, via binding.
This way, the presenting view won’t depend on the navigation code and destination, only on a router protocol.
A presenting view example:
The SheetButton trigger view:
Source code: [https://github.com/ihorvovk/Routing-in-SwiftUI-with-trigger-views (hyper-link)]
A presenting view will be configured with general modifiers for presenting any other views: .navigation(router), .sheet(router).
A presenting view example:
Both solutions separate navigation logic from the view layer.
Here's another suggested solution decoupling Views and destination Views using Routers.
As you can see the presented View type and presentation styles are abstracted away from the presenting View.
RootView
around your view.
You can also make use of the inspect element of the view by CMD + click on the View and clicking Show SwiftUI Inspector > Background > Your Color
I'm not sure if the original poster meant the background color of the entire screen or of individual views.
add following line to SceneDelegate:                  window.rootViewController?.view.backgroundColor = .black
All SwiftUI's Lists are backed by a UITableViewin iOS.
so you need to change the background color of the tableView.
As you can see, you can set the color of each element in the View hierarchy like this:
The very common issue is we can not remove the background color of SwiftUI's HostingViewController (yet), so we can't see some of the views like navigationView through the views hierarchy.
You should wait for the API or try to fake those views (not recommended).
You can Simply Change Background Color of a View:
I like to declare a modifier for changing the background color of a view.
Then I use the modifier by passing in a color to a view.
Content view background-color
window.rootViewController?.view.backgroundColor = .lightGray
Simply use ZStack to add background color or images to your main view in SwiftUI
The window object contains all the public variables, so you can type it in the console and then expand to view all variables/attributes/functions.
When script execution is halted (e.g., on a breakpoint) you can simply view all globals in the right pane of the Developer Tools window:
If you want to exclude all the standard properties of the window object and view application-specific globals, this will print them to the Chrome console:
To view any variable in chrome, go to "Sources", and then "Watch" and add it.
Any logic having to do with what is displayed in the view should be delegated to a helper method, as methods in the model are strictly for handling data.
I agree that you shouldn't put that in the view ([keep it skinny (hyper-link)]) but unless the model is returning a url as a piece of data to the controller, the routing stuff should be in the controller.
But I don't really think this belongs in the model, the view (or maybe the model) sounds more apropriate.
About the routes, as far as I know the routes is for the actions in controllers (wich usually "magically" uses a view), not directly to views.
The controller should handle all requests, the view should present the results and the model should handle the data and serve it to the view or controller.
If you find yourself writing nasty amounts of logic in a view, try to move the logic somewhere more appropriate; request and internal communication logic probably belongs in the controller, data related logic may be placed in the model (but not display logic, which includes link tags etc.)
Use View#getHitRect instead of View#getDrawingRect on the view you're testing.
You can use View#getDrawingRect on the ScrollView instead of calculating explicitly.
Code from View#getDrawingRect:
Code from View#getHitRect:
Nice of them not to only providing Rect but also boolean indicating if View visible at all.
To expand a bit on Bill Mote's answer using getLocalVisibleRect, you may want to check if the view is only partially visible:
If you want to detect that the view is FULLY visible:
The posible constant values of the visibility in a View are:
[VISIBLE (hyper-link)]
This view is visible.
[INVISIBLE (hyper-link)]
This view is invisible, but it still takes up space for layout purposes.
[GONE (hyper-link)]
This view is invisible, and it doesn't take any space for layout purposes.
My Solution is use NestedScrollView Scroll element:
Using @Qberticus answer which was to the point but great btw, I compined a bunch of codes to check if whenever a scrollview is called and got scrolled it trigger the @Qberticus answer and you can do whatever you want, in my case I have a social network containing videos so when the view is drawed on the screen I play the video same idea like facebook and Instagram.
You can use the FocusAwareScrollView which notifies when view becomes visible :
Below is the code snippet for getting view visibility percentage in scroll view.
First of all set touch listener on scroll view for getting callback for scroll stop.
In above code snippet, we are getting call backs for scroll view touch events and post a runnable after 150 millis(Not mandatory) after getting the callback for scroll stopped.
In that runnable we will get location of scroll view on the screen and scroll view height.
Then get the direct child viewgroup instance of scroll view and get the child counts.
In my case direct child of scroll view is LinearLayout named scrollViewRootChild.
Then iterate all the child views of scrollViewRootChild.
In above code snippet you can see I am getting the location of the child on the screen in a integer array named viewLocation, get height of view in variable name viewHeight.
Then i called a private method getViewVisibilityOnScrollStopped.
This extension help detect view fully visible.
It also work if your View is a child of child of ... of ScrollView (eg: ScrollView -> LinearLayout -> ContraintLayout -> ... -> YourView).
1) view.getY() and view.getX() return the x,y value to FIRST PARENT.
I ended up implementing a combination of two of the Java answers ( @bill-mote [https://stackoverflow.com/a/12428154/3686125 (hyper-link)] and @denys-vasylenko [https://stackoverflow.com/a/25528434/3686125 (hyper-link)] ) in my project as a set of Kotlin extensions, which support either standard vertial ScrollView or HorizontalScrollView controls.
I used these to determine which item to snap to when a user stops scrolling in various scrollviews in my project:
Example usage, iterating through scrollview's LinearLayout children and logging outputs:
An extension for listing scroll view's scroll and get an action if child view visible on screen.
Use this extension function for any scrollable view
Many of them such as the subversive plugin for Eclipse will list the history of a file as well as allow you to view the diff of each revision.
The instantiateItem()-destroyItem()-isViewFromObject() interface on PagerAdapter is a lower-level interface that FragmentPagerAdapter uses to implement the much simpler getItem() interface.
I don't recommend the setTag() and findViewWithTag() workaround provided in the post you linked.
As you've discovered, using setTag() and findViewWithTag() doesn't work with fragments, so it's not a good match.
When notifyDataSetChanged() is called, ViewPager calls getItemPosition() on all the items in its adapter to see whether they need to be moved to a different position or removed.
This fix makes notifyDataSetChanged behave like a regular Adapter without view recycling.
You don't have to put all the update code inside getItem() like you do in an adapter for a ListView or other AdapterView types.
You can still use this callback to reorder your fragments in the ViewPager.
Try destroyDrawingCache() on ViewPager after notifyDataSetChanged() in your code.
Instead of returning POSITION_NONE from getItemPosition() and causing full view recreation, do this:
I have encountered this problem and finally solved it today, so I write down what I have learned and I hope it is helpful for someone who is new to Android's ViewPager and update as I do.
After you call viewpager.setAdapter(pageradapter), the adapter's getCount() is constantly called to build fragments.
ViewPager begin to create fragments (just the first 2 fragments) by data in memory.
Then the ViewPager has the right fragments you need.
The ViewPager and pager adapter just deal with data in memory.
To avoid this problem I implemented instantiateItem(ViewGroup, int) and update my array there, like this:
After hours of frustration while trying all the above solutions to overcome this problem and also trying many solutions on other similar questions like [this (hyper-link)], [this (hyper-link)] and [this (hyper-link)] which all FAILED with me to solve this problem and to make the ViewPager to destroy the old Fragment and fill the pager with the new Fragments.
1) Make the ViewPager class to extends FragmentPagerAdapter as following:
2) Create an Item for the ViewPager that store the title and the fragment as following:
3) Make the constructor of the ViewPager take my FragmentManager instance to store it in my class as following:
(Note that this FragmentStatePager and the ViewPager associated with it are contained in a Fragment not in a Activity)
for those who still face the same problem which i faced before when i have a ViewPager with 7 fragments.
the default for these fragments to load the English content from API service but the problem here that i want to change the language from settings activity and after finish 
settings activity i want ViewPager in main activity to refresh the fragments to match the language selection from the user and load the Arabic content if user chooses Arabic here what i did to work from the first time
I use [EventBus (hyper-link)] library to update Fragment content in ViewPager.
I've fixed the problem by calling TabLayout#setupWithViewPager(myViewPager); just after FragmentPagerAdapter#notifyDataSetChanged();
This solution won't work for everyone, but in my case, every Fragment in my ViewPager is a different class, and only one of them ever exist at a time.
This might be of help to someone - in my case when inserting a new page the view pager was asking for the position of an existing fragment twice, but not asking for the position of the new item, causing incorrect behaviour and data not displaying.
I have a list, I show this list with viewpager.
When I add a new element to head of the list and I refresh the viewpager nothings changed.
Firstly set viewpager adapter to null then recreate the adapter and set i to it to viewpager.
Using ViewPager2 and FragmentStateAdapter:
Updating data dynamically is supported by ViewPager2.
If you are using ViewPager2 to page through a mutable collection, you must also override getItemId() and containsItem().
Based on ViewPager2 [documentation (hyper-link)] and Android's Github [sample project (hyper-link)] there are a few steps we need to take:
Set up FragmentStateAdapter and override the following methods: getItemCount, createFragment, getItemId, and containsItem (note: FragmentStatePagerAdapter is not supported by ViewPager2)
Attach adapter to ViewPager2
Dispatch list updates to ViewPager2 with DiffUtil (don't need to use DiffUtil, as seen in sample project)
To use the view binding, you need to use the generated binding class not the LayoutInflater, for example, if the layout name is result_profile.xml then you need to use ResultProfileBinding as:
Use addView to  add the view in the hierarchy as: 
[code snippet]
If you are trying to use View Binding with the root view, this is working for me:
It's a custom view that just wraps a single TextView and provides an update(s:String) function to update the text.
The addView is closely associated with the val binding using the also {} scope function instead of an init {} clause, making the instantiation of the View feel much more declarative.
One could argue that the addView() is really a side effect and should be in the init {} section so that it is separate from the declaration of the binding val.
You can initialize the view binding property right away
I don't know if there is a GUI view inspection tool, but I have had some luck with the debugging method on UIView: -recursiveDescription
You get a printout of your entire view hierarchy.
You can also call it on a specific view to get a printout of the view hierarchy of that view.
This question is old but let me put info here about new tool which I develop:
[https://github.com/glock45/iOS-Hierarchy-Viewer (hyper-link)]
[image]
Xcode 6 now has 3D view hierarchy inspection built in like Reveal App and Spark Inspector.
Click on the "Debug View Hierarchy" button while your app is running to pause execution and inspect the views at the current moment.
The [FLEX Debugger (hyper-link)] provides an in app view inspector that allows you to modify the UI in a running app.
Usage (in debugger): po myView.dump()
It will print out a recursive hierarchy for any given UIView.
(Credit: [How to debug your view hierarchy using recursiveDescription (hyper-link)])
Are you calling getWidth() before the view is actually laid out on the screen?
A common mistake made by new Android developers is to use  the width
  and height of a view inside its constructor.
When  a view’s
  constructor is called, Android doesn’t know yet how  big the view will
  be, so the sizes are set to zero.
Based on @mbaird's advice, I found a workable solution by subclassing the ImageView class and overriding onLayout().
I'm not 100% convinced that this is the best solution (hence my not marking this answer as correct just yet), but it does work and according to the documentation is the first time when one can find the actual size of a view.
Here is the code for getting the layout via overriding a view if API < 11 (API 11 includes the View.OnLayoutChangedListener feature):
I was also lost around getMeasuredWidth() and getMeasuredHeight() getHeight() and getWidth() for a long time.......... later i found that getting the view's width and height in onSizeChanged() is the best way to do this........ you can dynamically get your CURRENT width and CURRENT height of your view by overriding the onSizeChanged() method.
New Blog Post: how to get width and height dimensions of a customView (extends View) in Android [http://syedrakibalhasan.blogspot.com/2011/02/how-to-get-width-and-height-dimensions.html (hyper-link)]
Use the ViewTreeObserver on the View to wait for the first layout.
You can use the View's [post() (hyper-link)] method.
The safe method, will work just before drawing the view, after the layout phase has finished:
On some cases, it's enough to measure the size of the view manually:
if you have a custom view that you've extended, you can get its size on the "onMeasure" method, but I think it works well only on some cases :
Use below code, it is give the size of view.
You can get both Position and Dimension of the view on screen
If you need to know the dimensions of a View right after it is drawn you can simply call post() on that given View and send there a Runnable that executes whatever you need.
It is a better solution than ViewTreeObserver and globalLayout since it gets called repeatedly not just once.
This Runnsble will execute only once and you will know the views size.
Otherwise, android.view.WindowLeaked exception will be thrown.
If progress dialog is created in portrait and dismisses in landscape then  it will throw View not attached to window manager error.
Haven't got the View not attached to window manager exception after that.
May be you initialize pDialog globally, Then remove it and intialize your view or dialog locally.I have same issue, I have done this and my issue is resolved.
Firstly,the crash reason is  decorView's index is -1,we can knew it from Android source code ,there is code snippet:
class:android.view.WindowManagerGlobal
so we get follow resolution,just judge decorView's index,if it more than 0 then continue or just return and give up dismiss,code as follow:
In ~/Views/ViewStart.cshtml:
I don't like #2 because to me View() implies you are returning an entire page.
It should be a fully fleshed out and valid HTML page once the view engine is done with it.
PartialView() was created to return arbitrary chunks of HTML.
I don't think it's a big deal to have a view that just calls a partial.
But IMO, if all you are doing is deciding whether to call View() or PartialView() then the branch is not a big deal and is easy to maintain (and test).
Then write the code below in _viewStart file:
You don't have to create an empty view for this.
returning a PartialViewResult will override the layout definition when rendering the respons.
Hmm there no any SWITCH to actually switch views.
By clicking <Link /> component, URL would change but views wouldn't.
One of views was using PureComponent rather than Component (imported from react) and that was the cause.
I've added one Router that will handle all routes, I've used Switch component to switch views.
Only URL changed but not view.
I think it's a lot cleaner to store the component related routes at a view level versus storing all of them in one main router.
[https://docs.djangoproject.com/en/dev/faq/general/#django-appears-to-be-a-mvc-framework-but-you-call-the-controller-the-view-and-the-view-the-template-how-come-you-don-t-use-the-standard-names (hyper-link)]
In our interpretation of MVC, the “view” describes the data that gets presented to the user.
The view describes which data you see, not how you see it.
In Django, a “view” describes which data is presented, but a view normally delegates to a template, which describes how the data is presented.
In Django’s case, it’s probably the framework itself: the machinery that sends a request to the appropriate view, according to the Django URL configuration.
If you’re hungry for acronyms, you might say that Django is a “MTV” framework – that is, “model”, “template”, and “view.” That breakdown makes much more sense.
Bear in mind that “Model View Controller” is just a pattern, i.e.
So a better question might be “How well does Django fit the Model View Controller pattern?”
In mvt, a request to a URL is dispatched to a View.
This View calls into the Model, performs manipulations and prepares data for output.
ideally in web frameworks, the controller is hidden from view.
This is where the difference is from MVC: in mvc, the user interacts with the gui, the controller handles the request and notifies the model and the view queries the model to display the result to the user.
Django has been referred to as an MTV framework because the controller is handled by the framework itself and most of the excitement happens in models, templates and views.
If you’re familiar with other MVC
Web-development frameworks, such as
Ruby on Rails, you may consider Django
views to be the controllers and
Django templates to be the views.
In Django’s interpretation of MVC, the view
describes the data that gets presented
to the user; it’s not necessarily just
how the data looks, but which data is
presented.
In contrast, Ruby on Rails
and similar frameworks suggest that
the controller’s job includes deciding
which data gets presented to the user,
whereas the view is strictly how the
data looks, not which data is
presented.
The view on Django tends to be a set of queries for fetching data, and pass them to the template.
edit:
perhaps ViewGroup.MarginLayoutParams will work for you.
[http://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html (hyper-link)]
This returned the correct margains for my view atleast.
[http://developer.android.com/reference/android/view/ViewGroup.MarginLayoutParams.html (hyper-link)]
As others suggested, layout_margin# is the space between the parent's # edge and your view.
Of course, my View was indeed a ViewGroup and the parent was a ViewGroup as well.
In most cases, you should cast your layout params to the parent's View class LayoutParams (in this case it's ViewGroup and RelativeLayout)
Apart from using @MvcHtmlString.Create(ViewBag.Stuff)
 as suggested by Dommer, I suggest you to also use [AntiXSS (hyper-link)] library as suggested phill [http://haacked.com/archive/2010/04/06/using-antixss-as-the-default-encoder-for-asp-net.aspx (hyper-link)]
You can put your string into viewdata in controller like this :
And then call that viewdata in view like this :
You can use the tool hierarchyviewer.bat.
Edit: I just found the Hierarchy Viewer within Eclipse!
Just open the perspective Windows->Open Perspective-> Hierarchy View
In the list you can see the all the connected devices and emulators and the activity stack.
And in addition in the tree view you can see much more information about the view itself.
Edit:
The Hierarchy Viewer will work only with developer devices.
[https://plugins.jetbrains.com/plugin/12293-activity-stack-view (hyper-link)]
Do you have a _ViewStart.cshtml in this directory?
I had the same problem you're having when I tried using _ViewStart.
Then I renamed it _mydefaultview, moved it to the Views/Shared directory, and switched to specifying no view in cshtml files where I don't want it, and specifying _mydefaultview for the rest.
You (and KMulligan) are misunderstanding _ViewStart pages.
_ViewStart will always execute, before your page starts.
The correct pattern is to make a separate layout page which calls RenderBody, and set the Layout property to point to this page in _ViewStart.
I use the second and it's working, no _Viewstart included.
Just create the view as a partial view so that no layout file is used.
I think it's better work with individual "views", Im trying to move from PHP to MVC4, its really hard but im on the right way...
Answering your question, if you'll work individual pages, just edit the _ViewStart.cshtml
Logic for determining if a View should use a layout or not should NOT be in the _viewStart nor the View.
Setting a default in _viewStart is fine, but adding any layout logic in the view/viewstart prevents that view from being used anywhere else (with or without layout).
By putting this type of logic in the View you breaking the [Single responsibility principle (hyper-link)] rule in M (data), V (visual), C  (logic).
(this is the _ViewStart.cshtml file)
You need to set the ViewBag.Title in the Controller.
to get rid of the layout specified in _ViewStart.
Procedure 1 : Control Layouts rendering by using _ViewStart file in the root directory of the Views folder
We can identify the controller and render the Layouts as par controller, to do this we can write our code in _ViewStart file in the root directory of the Views folder.
Procedure 3 : View - wise Layout (By defining Layout within each view on the top)
ASP.NET MVC provides us such a great feature & faxibility to override the default layout rendering by defining the layout on the view.
To implement this we can write our code in following manner in each View.
Procedure 4 : Placing _ViewStart file in each of the directories
If we want to set default Layout for each directories than we can do this by putting _ViewStart file in each of the directories with the required Layout information as shown below:
@{
 viewbag.title="index"
Layout = null;
}
The model, view and projection matrices are three separate matrices.
Model maps from an object's local coordinate space into world space, view from world space to camera space, projection from camera to screen.
In the fixed functionality pipelines of old, you'd apply model and view together, then work out lighting using another result derived from them (with some fixes so that e.g.
You can see that reflected in OpenGL, which never separates the model and view matrices — keeping them as a single modelview matrix stack.
So: the composed model view projection matrix is often used by shaders to map from the vertices you loaded for each model to the screen.
See [this (hyper-link)] video to understand the concepts of model, view and projection.
If you will add your custom View from xml also like :
you will need the constructor public MyView(Context context, AttributeSet attrs), otherwise you will get an Exception when Android tries to inflate your View.
If you add your View from xml and also specify the android:style attribute like :
The third constructor is usually used when you want all of the Views in your application to have the same style.
For example, this is the constructor for TextView:
If you did not call super(context), you would not have properly set R.attr.textViewStyle as the style attr.
Used when instanciating Views programmatically.
If you're implementing your own views, only the 2 first constructors should be needed and can be called by the framework.
If you want your Views to be extensible, you might implement the 4th constructor for children of your class to be able to use global styling.
We assume to use custom View  SupportedSwitchCompact extends SwitchCompact.
Refer to the following link for reference:
[http://developer.android.com/reference/android/widget/TextView.html#attr_android%3ainputType (hyper-link)]
- set addTextChangedListener for EditText view
Just saw that you assume this is the Model of a View so the above isn't strictly correct, you would have to make an Ajax call to the controller method to get this, the ascx would not then have a model per se, I will leave my code in just in case it is useful to you and you can amend the call
You don't really want to be converting it to JSON in the view, and you don't really want to convert it in the controller, as neither of these locations make sense.
The best thing I've found to do is send the JSON to the view in a ViewModel, like this:
in your view.
The way this is different is that I like my ModelViews to not have overhead data in them.
It seem that ViewData fits the bill for over head data, but of course I'm new at this.
View
What This does for you is it gives you the same data in your JSON as in your ModelView so you can potentially return the JSON back to your controller and it would have all the parts.
I found it to be pretty nice to do it like this (usage in the view):
It is not super-sofisticated, but it solves the problem of where to put it (in Controller or in view?)
And in your view:
@Html.Raw(Json.Encode(object)) can be used to convert the View Modal Object to JSON
You can use 'IF EXISTS' to check if the view exists and drop if it does.
You can use ALTER to update a view, but this is different than the Oracle command since it only works if the view already exists.
I prefer to do my create or replace views or stored procedures as follows.
For reference from SQL Server 2016 SP1+ you could use CREATE OR ALTER VIEW syntax.
[MSDN CREATE VIEW (hyper-link)]:
Conditionally alters the view only if it already exists.
Or, if there are no dependencies on the view, you can just drop it and recreate:
Use [git log (hyper-link)] to view the commit history.
To view the difference between two different commits, use [git diff (hyper-link)] with the first few characters of the revision specifiers of both commits, like so:
If you want to get an overview over all the differences that happened from commit to commit, use git log or [git whatchanged (hyper-link)] with the patch option:
To view history of a file:
I assume you are trying to position views inside of the CollapsingToolbarLayout.
The CollapsingToolbarLayout extends FrameLayout, so the only possibility is to position views is to utilize view margin and gravity.
In your case you could position a ImageView like:
If you are trying to add the new ImageView directly to the CoordinatorLayout you can utilize a [anchor (hyper-link)]:
Generally speaking it's not a good idea to have any reference to UI in your ViewModel.
Finally, general approach that I use to set focus from ViewModel is Attached Properties.
And it can be bound to ViewModel's property "IsFocused" for example.
Here it is:
[code snippet]
Now in your View (in XAML) you can bind this property to your ViewModel:
[code snippet]
in your viewmodel(exampleViewModel.cs):write the following
now in your View.cs(not the XAML the view.xaml.cs) write the following in the constructor
LoginViewModel.cs:
You could use the ViewCommand design pattern.
It describes a method for the MVVM design pattern to control a View from a ViewModel with commands.
The ViewCommandManager class handles invoking commands in connected views.
It's basically the other direction of regular Commands, for these cases when a ViewModel needs to do some action in its View.
[http://dev.unclassified.de/source/viewcommand (hyper-link)] (also published on CodeProject)
This is an old thread, but there doesn't seem to be an answer with code that addresses the issues with Anavanka's accepted answer: it doesn't work if you set the property in the viewmodel to false, or if you set your property to true, the user manually clicks on something else, and then you set it to true again.
ViewModel
The problem I had was that if you first click in your view and focus the control, e.oldValue is no longer null.
After implementing the accepted answer I did run across an issue that when navigating views with Prism the TextBox would still not get focus.
In your view model set up your binding in the usual way and then set the SomeTextIsFocused to true to set the focus on your text box
There are a number of restrictions on indexed views: no subqueries, no unions, no outer joins, etc.
But for your case, you simply need to create the view with schema binding.
Because you are trying to create an Indexed View or Materialized View.
Its mandatory for a view to have "WITH SCHEMABINDING" option if you are creating a Clustered Index on top of it.
A view is nothing but a stored query, if you are going to create an index on it, then the index is going to use that query and execute it on that table, in this case you have to make sure that the table does not change underneath.
you have to create a Bitmap and a Canvas and call view.draw(canvas);
if the view wasn't displayed before the size of it will be zero.
EDIT: according to [this post (hyper-link)], Passing WRAP_CONTENT as value to makeMeasureSpec() doesn't to do any good (although for some view classes it does work), and the recommended method is:
Specifically, I found that if any changes were made to the view after it was inflated that those changes would not get incorporated into the rendered bitmap.
prior to calling getViewBitmap(View) I inflated my view and asked it to layout with known dimensions.
This was needed since my view layout would make it zero height/width until content was placed inside.
Using the above code, you don't have to specify the size of the bitmap (use 0 for width&height) if you want to use the one of the view itself.
Also, if you wish to convert special views (SurfaceView, Surface or Window, for example) to a bitmap, you should consider using [PixelCopy (hyper-link)] class instead.
Layout or view  to bitmap:
There is a great Kotlin extension function in Android KTX: [View.drawToBitmap(Bitmap.Config) (hyper-link)]
Is the proper solution in MySQL, some other SQLs let you define Views more exactly.
Note: Unless the View is very complicated, MySQL will optimize this just fine.
and view:
Then you can call a view with a parameter:
Place columns in that table for parameters for the view.
In the view use a cross join to the parameter table and put WHERE param_table.connection_id = CONNECTION_ID().
That component relies on you being able to capture the view behind the one you're presenting, though, and may have trouble with views that animate behind this content.
The need to take a trip through Core Graphics to rasterize the background view will slow things down, so we probably don't have sufficiently direct access to be able to do this in a performant manner for overlays on animating views.
As an update to the above, I recently reworked the blurs in GPUImage to support variable radii, allowing for the complete replication of the blur size in iOS 7's control center view.
You still have the challenge of how to pull content into this blur from views behind this one in a performant manner.
I am using FXBlurView which works great on iOS5+
[https://github.com/nicklockwood/FXBlurView (hyper-link)]
In you view controller's viewDidLoad:
You can create a class with a UIToolBar that is a subclass of UIView and instantiate it in a separate view controller.
This approach demonstrates a translucent UIToolBar (subclassed by UIView) that provides live feedback (in this case for an AVCaptureSession).
YourUIView.h
YourUIView.m
Once the above UIView has been customized, go ahead and create a class that is a subclass of a ViewController.
Thus you can overlay the tranclucent UIToolBar from the YourUIView class.
YourViewController.h
YourViewController.m
The best new Way to get a blured Overlay is to use the new iOS 8 Feature UIVisualEffectView.
When I do something like this, I save the constraints like this for a view called view1:
The constraints are also removed when you [A removeFromSuperview]
Pick up a view SUBVIEW and create costraints that constraint SUBVIEW to follow its superview resizing (like attched to to superview edges).
To do that you add SUBVIEW as a subview to this CONTAINERVIEW and add as constraints something like that:
V:|-[SUBVIEW]-|
H:|-[SUBVIEW]-|
These constraints should be added to SUBVIEW superview, thus CONTAINERVIEW.
If you remove SUBVIEW by simply checking all the CONTAINERVIEW constraints you could see that two aren't around anymore.
The [documentation (hyper-link)] for the UIView removeFromSuperview method states:
Calling this method removes any constraints that refer to the view you
  are removing, or that refer to any view in the subtree of the view you
  are removing.
Be aware though, that if you have two independent parent views A and B, and a subview C, where C is currently a subview of A, with appropriate constraints, that calling [B addSubview:C] will NOT clear any constraints relating to A and C, and auto layout will start throwing exceptions, because those constraints no longer relate to views in the same hierarchy.
You will need to call [C removeFromSuperview] explicitly to remove the constraints, before adding C to B.
When drag and drop a UIView on the ViewController add constraints then remove the UIView, you can see the blue constraints disappear.
Using straight super wasn't working for me, either was manually specifying the ParentView or inherited class.

If you are sure that the ParentView has the events defined as object and you don't need to define events dynamically in ChildView it is possible to simplify soldier.moth's answer further by getting rid of the function and using _.extend directly:
[http://danhough.com/blog/backbone-view-inheritance/ (hyper-link)]
Wouldn't it be easier to create specialized base constructor from Backbone.View that handles the inheritance of events up the hierarchy.
By creating a specialized view: BaseView that redefines the extend function, we can have subviews(like AppView, SectionView) that want to inherit their parent view's declared events simply do so by extending from BaseView or one of its derivatives.
We avoid the need to programmatically define our event functions in our subviews, which in most cases need to refer to the parent constructor explicitly.
... which - in A_View.js - will result in:
To do this entirely in the parent class and support a function-based events hash in the child class so that children can be agnostic of inheritance (the child will have to call MyView.prototype.initialize if it overrides initialize):
You can use console consumer to view messages produced on some topic:
[http://subjective-objective-c.blogspot.com/2011/08/writing-high-quality-view-controller.html (hyper-link)]
The best thing I have found so far is the WWDC 2011 Session Video [Session 102 - Implementing UIViewController Containment (hyper-link)].
don't know if this is a "good" example, but you can get a free Container ViewController from [https://bitbucket.org/javieralonso/jaacordeonviewcontroller/overview (hyper-link)]
It's a full accordion metaphor container view controller
In addition to the WWDC Session Video [Session 102 - Implementing UIViewController Containment (hyper-link)] that hypercrypt already mentioned, [Apple WWDC 2012 session on "The Evolution of View Controllers on iOS" (hyper-link)] also covers this topic and the example code is part of the sample code package:
There's also an example here:
[https://github.com/toolmanGitHub/stackedViewControllers (hyper-link)]
[http://sandmoose.com/post/35714028270/storyboards-with-custom-container-view-controllers (hyper-link)]
[View Controller Containment (hyper-link)]
[Custom Container View Controller Transitions (hyper-link)]
[Interactive Custom Container View Controller Transitions (hyper-link)]
[Creating Custom Container View Controllers (hyper-link)]
Stack views use intrinsic content size, so use layout constraints to define the dimensions of the views.
UIStackView uses constraints internally to position its arranged subviews.
Exactly what constraints are created depends on how the stack view itself is configured.
By default, a stack view will create constraints that lay out its arranged subviews in a horizontal line, pinning the leading and trailing views to its own leading and trailing edges.
The space that is allocated to each subview is determined by a number of factors including the subview's intrinsic content size and it's compression resistance and content hugging priorities.
By default, UIView instances don't define an intrinsic content size.
Since the content compression resistance and content hugging priorities of two new UIView instances will be the same, and neither view provides an intrinsic content size, the layout engine must make its best guess as to what size should be allocated to each view.
In your case, it is assigning the first view 100% of the available space, and nothing to the second view.
This is the main benefit of using UIStackView - it hides the (often ugly) details of constraint management from the developer.
Just like mentioned before the stack view's dimensions depend one intrinsic content size of the arranged subviews.
Here is my solution in Swift 2.x and following view structure:
view - UIView
customView - CustomView:UIView
stackView - UISTackView
arranged subviews - custom UIView subclasses
For the accepted answer when you try to hide any view inside stack view, the constraint works not correct.
Reason is when hide the view in stackView it will set the height to 0 to animate it.
After that no need to set constraints to my arranged subviews whatsoever, the stackview is taking care of that.
Instead of coding all the constrains you could use a subclass that handles .intrinsicContentSize of UIView class in a simpler way.
This solution improves also Interface Builder a little in a way to support with "intrinsicWidth" and "intrinsicHeight" of views.
While you could extend UIView's and have those properties available on all UIViews in IB its cleaner to subclass.
Which means you can just allocate those IntrinsicView's and the self.frame.size is taken as intrinsicContentSize.
That way it does not disturb the normal layout and you dont need to set constraint relations that don't even apply in full with UIStackViews
now you can go crazy with UIStackView's
[ (hyper-link)]
You need to check all the constraints of the views inside your UIStackView and be sure that there is constraints for bottom, top, leading and trailing.
It's worth noting that View code really isn't a good place to put JavaScript code.
You can add almost any complex data to ViewBag.Ngon and access it in JavaScript
From MVC2 onwards you can use ViewContext.RouteData.DataTokens["area"]
Since RouteData is available on both ControllerContext and ViewContext it can be accessed in your controller and views.
ViewContext.RouteData.Values["area"];
To get area name in the view, in ASP.NET Core MVC 2.1:
Get area name in View (.NET Core 2.2):
See more here: [http://blog.netgloo.com/2015/07/17/lumen-getting-current-url-parameter-within-a-blade-view/ (hyper-link)]
And access url $_GET parameter values using the facade directly inside Blade view/template:
Ex: to get pagination param on blade view:
I use Sublime Text 2 with the [MarkdownPreview plugin (hyper-link)].
You can view [here (hyper-link)] to know differences between GFM and Redcarpet style toc links.
You can also open the Outline view (Window -> Show View -> Outline) but it has no autocomplete search.
It looks like one simply drags a control to the top of the table view.
You can do this easily by dragging your UIView/UIImageView just below the UITableView in the document outline (instead of the layout).
If you try to drag in the layout instead of document outline the UITableViewCell will jump to the top handling which is frustrating!
Dragging and dropping a view on top of the tableview worked for only one screen size, at least in Xcode 11.
I just created a view and left it there behind the tableview in storyboard.
Then in tableview code I did:
you can simply do it by editing the view (link "Edit view" on left side) and check/uncheck checkboxes
[ (hyper-link)]
Click on View that you want to remove from.
Click on "Edit View" in the left toolbar.
Same as above, just in 3. you need to check the job you want to add to your view.
since last Jenkins versions (actually using 1.651.1), there's a [Move] link on the left menu where you can simply choose the destination folder from a drop list, then you have to edit the view to include the job.
However, the checkbox will be only available if one selects "List View" while creating the new view itself.
If you select "My view"  instead, it may not work.
1) Click on the view in which you want to add the newly created Job as shown in pic.
2) Click on Edit View on left side and then select the appropriate job under Job Filter using the check box.
This job will be now shown under the view.
In some cases, like mine, you may not find EditView.
I could resolve it by clicking on the gear icon in the dashboard view and selecting 'Configure' button
You will then get the view edit form to select/unselect jobs
What's particularly good about this solution is you can view the log whether or not the app was launched in debug mode from XCode.
Taken from my blog at [http://pervasivecode.blogspot.co.uk/2012/06/view-log-output-of-any-app-on-iphone-or.html (hyper-link)]
To view your iOS device's console in Safari on your Mac (Mac only apparently):
Its idevicesyslog tool works similarly to deviceconsole (below), and it supports wirelessly viewing your device's syslog (!)
As an alternative, you can use an on-screen logging tool like [ticker-log (hyper-link)] to view logs without having (convenient) access to the console.
There is a new configuration section that is used to reference namespaces for Razor views.
Open the web.config file in your Views folder, and make sure it has the following:
I was getting the same error while trying to use Smo objects in a Razor view.
All objects from MyCore.DBLayer worked perfectly in Controllers and Models but failed in Razor views with an error 'The type or namespace name 'DBLayer' does not exist in the namespace 'MyCore' (are you missing an assembly reference?)'
Adding "using..." statements in Razor views was useless
That is, open the inner Views\Web.Config (NOT the root one), and add the namespace under the Pages tag:
But ultimately it will present the Razor file to you as though everything in that namespaces list was in @using statements at the top of all your Views.
...\Web\Views\Login.cshtml: ASP.net runtime error: [A]System.Web.WebPages.Razor.Configuration.HostSection cannot be cast to [B]System.Web.WebPages.Razor.Configuration.HostSection.
The View web.config referenced v1 but the app was referencing v2.
They are set as Application Projects however I use them as class libraries with RazorGenerator to compile my views.
I edited the view pages and copied the contents and pasted in it,i didn't change any content of the views, but just edited so the visual studio could do it's thing to track the pages, and afterwards every thing started working
In ASP.NET Core MVC the solution is to add a using in _ViewImports.cshtml, instead of putting it web.config in the View folder when working with ASP.NET MVC 5.
_ViewImports.cshtml
View
Now everything will work, except Razor views.
RazorViews cannot find it, because there is some kind of strange dependency on the FOLDERNAME of the project.
In my case, I was using Razor Views outside of a web application.
Currently, no, it doesn't look like it is possible to center a view in the superview using only VFL.
VFL: "|-(>=20)-[view]-(>=20)-|"
I tried many different variations of the above trying to bend it to my will, but this does not appear to apply to the superview even when explicitly having two separate VFL strings for both axes (H:|V:).
They appear to not apply to the superview in the VFL and will only apply to any explicit views that are mentioned in the VFL string (which is disappointing in certain cases).
I hope in the future Apple adds some kind of new option to have the VFL options take into account the superview, even if doing it only when there is only a single explicit view besides the superview in the VFL.
Another solution could be another option passed into the VFL that says something like: NSLayoutFormatOptionIncludeSuperview.
Yes, it is possible to center a view in its superview with Visual Format Language.
In the Main Storyboard, ctrl+click on the view you want to center.
Drag to the superview (while holding ctrl) and select "Center X" or "Center Y".
What it have to be done is that superview should be declared in the dictionary.
Instead of using | you use @{@"super": view.superview};.
(hyper-link)]
Code above centers subview in view by Y obviously.
You can use extra views.
If you want it neat, then centerXView.hidden = centerYView.hidden = YES;.
PS: I am not sure I can call the extra views "placeholders", because English is my second language.
For those who came here for an Interface Builder based solution (Google leads me here), just add const width/height constraints, and select the subview -> control drag to it's superview -> select "center vertically/horizontally in superview".
You can center a view vertically by useing either VFL (which is not quite intuitive) or use constraints manually.
You can use a single XML layout nesting the children views.
Here we return the finded view ID without inflate any other layout.
// Set the ViewPager adapter
I'd like to elaborate on @Nicholas answer, you can get the views by id or if they're dynamically added just get the view directly given its position
Where the XML files are obvious view_screen.xml:
We have build a very simple subclass of the ViewPager that we use sometimes.
This class does not need a adapter as it will load the views from the layout.
In order to use it your projects, just use it instead of the android.support.v4.view.ViewPager.
Given that you don't need to use fragments, you can still create a PagerAdapter which attaches views instead of fragments to the ViewPager.
Now you need to define three classes which will return the views to be inflated in the viewpager.
Similar to CpuView you will have MemoryView and NetworkView classes.
And finally a layout which will be inflated in each of the views
Now in this example all the views have separate classes and separate layouts.
yes...you can use View instead of Fragment in viewpager.
Here you can Find Whole example that will help you to achieve Viewpager without Fragment.
[https://www.bignerdranch.com/blog/viewpager-without-fragments/ (hyper-link)]
If you use ViewPager2, according to the documentation, you can use a standard RecyclerView.Adapter:
If your pages are Views, implement
RecyclerView.Adapter as usual.
[https://developer.android.com/reference/androidx/viewpager2/widget/ViewPager2#setAdapter(androidx.recyclerview.widget.RecyclerView.Adapter) (hyper-link)]
Basically, it sets a multiplier of 0.5 against the height of self.view, acting on upperview.
There i also another possibility in code in case you have 2 views that should both have the same height: just set the height of view2 to the height of view1 (the trick here is not setting the height of view1 explicitely).
If you want it 50% of the super view leave it at 1, since it is aligned per the super's center.
This is also a great way to create views that are other percentages too (like 25% of super view)
Storyboard solution where you can set exact ratio between any views:
Also note that this method works with views on different nesting levels and (obviously) applicable for width
sometimes it might be helpful to "reverse first and second item" of constraint or set reverse multiplier (for example 2 instead of 0.5) (but these methods are not helpful if you don't understand how views relate between each other).
-Hold down the control button and click on the subview.
-Still holding down on the command button, drag cursor to the superview then click on the superview.
-Then change the "Multiplier" to 0.5 for half the screen, or whatever fraction of the superview you desire.
This site allows you to view a packages tree as a node graph in 2D or 3D.
[http://npm.anvaka.com/#/view/2d/waterline (hyper-link)]
Note that you can only view the dependency tree of a dependency that you have installed either globally, or locally to the NPM project.
Unfortunately npm still doesn't have a way to view dependencies of non-installed packages.
Allows one to use its info command to view accurate dependencies:
There is also a nice web app to see the dependencies in a weighted map kind of view.
Go to the "Server" view, then double-click the Tomcat server you're running.
Go to the Servers view in Eclipse then right click on the server and click Open.
Also note you should be seeing the output to the log file in your Console view as you run or debug.
You will get a screen called Overview.
You will get a screen called Overview.
Sadly, this is not possible by default to use section as another user suggested, since a section is only available to the immediate child of a View.
What works however is implementing and redefining the section in every view, meaning:
This way every view can implement a head section, not just the immediate children.
So the only real solution to your problem is using the ViewBag.
For this to work, you need to ensure that the List used is initialized before any of the views are executed.
Then you can can do things like this in the top of every view/partial (without caring if the Scripts or Styles value is null:
******UPDATE****
Since it starts executing the inner views first and working its way out to the layout and CSS styles are cascading, it would probably make sense to reverse the style list via ViewBag.Styles.Reverse().
View or PartialView:
View:
and in the partial(s) and views
I wrote an easy wrapper that allows you to register styles and scrips in every partial view dynamically into the head tag.
Calls to Reference can appear anywhere in a page, layout or partial view.
Finally I used this syntax in any View:
Then you can include your css files in section area in your view except partial view.
The section work in view, but not work in partial view by design.
If you really want to using section area in partial view, you can follow the article to redefine RenderSection method.
What I did was to call setTag() with a name to all Views/ListViews, and just call findViewWithTag(mytag), mytag being the tag.
If you examine carefully, there are at most 3 views saved by ViewPager.
You can easily get the current view by
You can get the current element by accessing your list of itens from your adapter calling myAdapter.yourListItens.get(myViewPager.getCurrentItem());
As you can see, ViewPager can retrieve the current index of element of you adapter (current page).
During my endeavors to find a way to decorate android views I think I defined alternative solution for th OP's problem that I have documented in [my blog (hyper-link)].
keeps the adapter and the view entirely separated
one can easily query for a view with any index form the view pager and he will be returned either null if this view is currently not loaded or the corresponding view.
I had to do it more general, so I decided to use the private 'position' of ViewPager.LayoutParams
[https://developer.android.com/reference/android/support/v4/view/PagerAdapter.html (hyper-link)]
I'm using [ViewPagerUtils (hyper-link)] from [FabulousFilter (hyper-link)]:
id - viewPager ID
You can get view like this:
I use this method with android.support.v4.view.ViewPager
this always returns my currently selected view.
try running SHOW CREATE VIEW my_view_name in the sql portion of phpmyadmin and you will have a better idea of what is inside the view
To expand one what CheeseConQueso is saying, here are the entire steps to update a view using PHPMyAdmin:
Run the following query: SHOW CREATE VIEW your_view_name
Copy entire contents of the Create View column.
Run the query directly (without the CREATE VIEW... syntax) to make sure it runs as you expect it to.
Once you're satisfied, click on your view in the list on the left to browse its data and then scroll all the way to the bottom where you'll see a CREATE VIEW link.
In the VIEW name put the name of the view you are going to update.
In the AS field put the contents of the query that you ran while testing (without the CREATE VIEW... syntax).
Just export you view and you will have all SQL need to make some change on it.
Just need to add your change in SQL query for the view and change :
In your database table list it should show View in Type column.
To edit View:
Click on your View in table list
Click on Edit View under Check All
update: in PHPMyAdmin 4.x, it doesn't show View in Type, but you can still recognize it:
Of course it may be just an empty table, but when you open the structure, you will know whether it's a table or a view.
Problem:
Github.com prevents files from rendering/executing when the source is viewed by setting the content type/MIME to plain text.
There is a new tool called [GitHub HTML Preview (hyper-link)], which does exactly what you want.
Just prepend http://htmlpreview.github.com/?
[http://htmlpreview.github.com/?https://github.com/twbs/bootstrap/blob/gh-pages/2.3.2/index.html (hyper-link)]
For the URL type javascript:top.location="http://htmlpreview.github.com/?
When you're on a github file view page (not raw.github.com) click the bookmark link and you're golden.
i wanted to edit html and js in github and have a preview.
Enter your Github username and repository name to view the application online - stackblitz.com/github/{GITHUB_USERNAME}/{REPO_NAME}
When you don't declare a ViewResolver, Spring registers a default InternalResourceViewResolver which creates instances of JstlView for rendering the View.
The JstlView class extends InternalResourceView which is
A URL for this view is supposed to specify a resource within the web
application, suitable for RequestDispatcher's forward or include
method.
In other words, the view, before rendering, will try to get a RequestDispatcher to which to forward().
where path is the view name, what you returned from the @Controller.
When you declare a ThymeleafViewResolver and a ServletContextTemplateResolver with a specific prefix and suffix, it builds the View differently, giving it a path like
ThymeleafView instances locate the file relative to the ServletContext path by using a
ServletContextResourceResolver
Here's an easy fix if you don't actually care about rendering the view.
Create a subclass of InternalResourceViewResolver which doesn't check for circular view paths:
I use the annotation to configure spring web app, the problem solved by adding a InternalResourceViewResolver bean to the configuration.
Its best in your interest to give a different view name like "preferenceView" or anything you like.
@RestController is a composed annotation that is itself meta-annotated
  with @Controller and @ResponseBody indicating a controller whose every
  method inherits the type-level @ResponseBody annotation and therefore
  writes directly to the response body vs view resolution and rendering
  with an HTML template.
try adding compile("org.springframework.boot:spring-boot-starter-thymeleaf") dependency to your gradle file.Thymeleaf helps mapping views.
In my case, I was trying out Kotlin + Spring boot and I got into the Circular View Path issue.
In my case circular view path in spring boot 2 and jdk 11 was fixed by redirecting to index.html:
The most voted solution did not work for me because my view is a ViewGroup(have been inflated from a LayoutInflater).
I needed to call view.measure to force the view size to be calculated in order to get the correct view size with view.getMeasuredWidth(Height).
All answers using drawing on the canvas won't work with a GLSurfaceView.
To capture the content of a GLSurfaceView into a bitmap you should consider to implement a custom method with [gl.glReadPixels (hyper-link)] inside [Renderer::onDrawFrame() (hyper-link)].
Conversion of Layout or view to bitmap :
use new kotlin extention function [view.drawToBitmap() (hyper-link)]
Animation.RELATIVE_TO_SELF, 1f - This specifies where the shrinking of the view collapses to (referred to as the pivot in the documentation).
If you want move to top use (-view.height/4) and for left (-view.width/4)
I'm not sure I have followed your question- are you trying to attach a child view to the RelativeLayout?
It's helpful to add to this, even though it's an old post, that if the child view that is being inflated from xml is to be added to a viewgroup layout, you need to call inflate with a clue of what type of viewgroup it is going to be added to.
I had a problem where a single view inflated from xml wasn't aligning in the parent properly until I made this type of change.
If you want to add a single view multiple time then you have to use
then it will throw exception of all ready added view.
My situation: I am using a separate view (XML) which holds a WebView, then opens in an AlertDialog when I click a button in my main activity view.
But somehow or another the WebView belonged to the main activity view (probably because I pull the resource from here), so right before I assigned it to my AlertDialog (as a view), I had to get the parent of my WebView, put it into a ViewGroup, then remove all the views on that ViewGroup.
.... later on after I loaded my WebView ....
If you are you trying to attach a child view to the RelativeLayout?
If you want to load the partial view directly inside the main view you could use the Html.Action helper:
in your main view in order to enable Ajax.
If you do it with a @Html.ActionLink() then loading the PartialView is handled as a normal request when clicking a anchor-element, i.e.
load new page with the reponse of the PartialViewResult method.
If you want to load it immedialty, then you use @Html.RenderPartial("_LoadView") or @Html.RenderAction("Load").
Than add in the view the references to jquery and AJAX Unobtrusive:
if you want to populate contents of your partial view inside your view you can use
if you want to make server request and process the data and then return partial view to you main view filled with that data you can use
if you want user to click on the link and then populate the data of partial view you can use:
Try to call view.requestFocus() on the view you want to scroll to.
public void RequestChildFocus (View child, View focused)
child - The child of this ViewParent that wants focus.
This view will contain the focused view.
It is not necessarily the view that actually has focus.
focused - The view that is a descendant of child that actually has focus
insideView.getY() will not work below API Level 11, for API Level below 11 you can replace insideView.getY() with insideView.getTop()
[ScrollView.requestChildRectangleOnScreen (hyper-link)]
It is a good idea to wrap it into postDelayed to make it more reliable, in case the ScrollView is being changed at the moment
Here's a solution that works if the target view is not a direct child of your ScrollView:
The basic idea is to find the target view's containing ScrollView.
Then get the target view's drawing rectangle, adjust its coordinates so they are understood by the ScrollView then ask the ScrollView to scroll to smooth-scroll to that position.
The end effect is that the view you want to scroll to always ends up being fully visible near the top of the screen (you can play around with ViewRect.Top if you want to center the view on the screen instead).
Here rootView is your parent view and childView is a view where you want to scroll your view
You can use method smoothScrollTo to scroll to specific view in scroll view.
It is available from View that you want to scroll.
You don't need access to the ScrollView and you don't need to calculate the childOffset.
Add two extension functions for View:
view.requestOnScreen()
Considering your main parent is ScrollView and child view(s) are/is LinearLayout or RelativeLayout which might have further views in them, there can be 2 ways to go-
Case 1: You want to focus on top of childView.
Case 2: Focus on bottom of your childView.
From API 29 there is an available method on ScrollView
scrollToDescendant(View child) that can replace other custom solutions.
Android docs:
[https://developer.android.com/reference/android/widget/ScrollView#scrollToDescendant(android.view.View) (hyper-link)]
The key is to use a NavigationView and a NavigationLink:
Have to create a DetailView like LandmarkDetail()
and call a NavigationButton with destination as LandmarkDetail().
Now detail view was open.
Here's another way to present a view WITHOUT using NavigationView.
The OP has been answered multiple times here but I just wanted to also demonstrate the cool aspects of SwiftUI by showing if you have view A with data that view B will also be using, you can pass data by creating a @State in view A and declaring the same variable with @Binding declaration in view B
See [Jake's answer (hyper-link)] below for the normal way to do this with NavigationView & NavigationLink.
I made a view modifier for this.
I think Jake's answer is the basic way to NextView.
(should go to 12'00" to 15'00", if you want to go to different views by tapping different buttons.)
(should go to 15'00" to 16'00", if you want to go to second view and go back automatically.)
if don't want to show the navigationView you can hide it in destination.
To programmatically navigate to a link without displaying a visual element, overlay one of your views with a hidden NavigationLink.
Try FrameLayout, it gives you the possibility to put views one above another.
You can create two LinearLayouts: one with the background views, and one with foreground views, and combine them using the FrameLayout.
You can set visibility to false of other views.
And the better way to do this is to make the view invisible when thay are not require.
Also you need to set the position for each and every view,So that they will move according to there corresponding position
You can call bringToFront() on the view you want to get in the front
bringToFront() is the right way, but, NOTE that you must call bringToFront() and invalidate() method on highest-level view (under your root view), for e.g.
Your view's hierarchy is:
So, when you animate back your buttons (1->6), your buttons will under (below) the ImageView.
To bring it over (above) the ImageView you must call bringToFront() and invalidate() method on your LinearLayouts.
Then it will work :)
**NOTE: Remember to set android:clipChildren="false" for your root layout or animate-view's gradparent_layout.
I need it for showing a loadingView over a DialogFragment and this was the only way I succeed.
2nd solution is by using xml adding this attribute to the view xml
If you are using a LinearLayout you should call myView.bringToFront() and after you should call parentView.requestLayout() and parentView.invalidate() to force the parent to redraw with the new child order.
Suppose, you wanna show view 1 on top of view 2.
Then write view 2 code then write view 1 code.
If you cant does this ordering, then call bringToFront() to the root view of the layout you wants to bring in front.
Having review all the answers i decided to perform some experiment like
I would put the code in the viewWillAppear delegate on each view being shown:
When you push a child view in the controller, the Navigation Bar will remain hidden; if you want to display it just in the child, you'll add the code for displaying it(self.navigationController.navigationBarHidden=NO;) in the viewWillAppear callback, and similarly the code for hiding it on viewWillDisappear
The nicest solution I have found is to do the following in the first view controller.
This will cause the navigation bar to animate in from the left (together with the next view) when you push the next UIViewController on the stack, and animate away to the left (together with the old view), when you press the back button on the UINavigationBar.
Please note also that these are not delegate methods, you are overriding UIViewController's implementation of these methods, and according to the documentation you must call the super's implementation somewhere in your implementation.
One slight tweak I had to make on the other answers is to only unhide the bar in viewWillDisappear if the reason it is disappearing is due to a navigation item being pushed on it.
This is because the view can disappear for other reasons.
So I only unhide the bar if this view is no longer the topmost view:
and use setNavigationBarHidden in navigationController:willShowViewController:animated:
Easy way to customize the behavior for each ViewController all in one place.
The simplest implementation may be to just have each view controller specify whether its navigation bar is hidden or not in its viewWillAppear:animated: method.
- I have a view with a image.
I capture that gesture and push it into the new imageViewController, its in the imageViewController, I want to have full screen image.
Step 2 - All these steps below are in the ImageViewController
Step 2.1 - In ViewDidLoad, show the navBar
Step 2.2 - In viewDidAppear, set up a timer task with delay ( I have it set for 1 sec delay).
step 2.3 - Under viewWillAppear, add singleTap gesture to the image and make the navBar translucent.
Step 3 - Finally in viewWillDisappear, make sure to put all the stuff back
The question asks for the navigation bar to be hidden on the root view controller, but visible everywhere else, but the accepted answer hides the navigation bar on a particular view controller.
What happens when another instance of the first view controller is pushed onto the stack?
It will hide the navigation bar even though we are not looking at the root view controller.
Implement the -navigationController:willShowViewController:animated method to show or hide the navigation bar based on whether it is showing the root view controller
Here's the navigationController:willShowViewController:animated implementation:
I manage to fix this by overriding viewDidLayoutSubviews, in addition to viewWillAppear/viewWillDisappear as shown below:
In my case, I notice that it is because the root view controller (where nav is hidden) and the pushed view controller (nav is shown) has different status bar styles (e.g.
The moment you start the backswipe to pop the view controller, there will be additional status bar colour animation.
However, this bug doesn't occur if status bar styles of both view controllers are the same.
By implement this code in your ViewController you can get this effect
 Actually the trick is , hide the navigationBar when that Controller is launched
and unhide the navigation bar when user leave that page  do this is viewWillDisappear
This will hide navigation bar starting from first viewcontroller until its made visible for the required viewcontroller.
Navigation bar can be set back to visible in  ViewController's ViewWillAppear callback.
In the view controller you want to hide the navigation bar from.
Inherit from UINavigationController, so you won't pollute your rootViewController.
use self.viewControllers.first rather than homeViewController, so you won't do this 100 times for your 100 UINavigationControllers in 1 StoryBoard.
In MVC you should provide the View with all data, not let the View collect its own data so what you can do is to set the CSS class in your controller action.
and pick out this value from your ViewData in your View
Use the ViewContext and look at the RouteData collection to extract both the controller and action elements.
But I think setting some data variable that indicates the application context (e.g., "editmode" or "error") rather than controller/action reduces the coupling between your views and controllers.
To get the current Id on a View:
I know this is an older question, but I saw it and I thought you might be interested in an alternative version than letting your view handle retrieving the data it needs to do it's job.
You can retrive both physical name of current view and action that triggered it.
So in View (or master/layout) you can use it like so (Razor syntax):
You can get these data from RouteData of a ViewContext
'CREATE VIEW' must be the first statement in a query batch.
Microsoft SQL Server has a quirky reqirement that CREATE VIEW be the only statement in a batch.
You can apply the .navigationViewStyle(StackNavigationViewStyle()) modifier to the NavigationView!
Why full view is not the default for iPad?
Why this modifier goes outside of NavigationView closure, while the Navigation Title goes inside... Maybe this gives clarification: [https://stackoverflow.com/a/57400873/11432719 (hyper-link)]
It will show you all commits for the file in the current buffer in the standard magit log view.
Type l to get log viewing option
Enter the file path you wish to view history for
Type l to view the log of the current branch
If you're using custom views, you need to handle that kind of things on your own.
wrapper around a view
no view => not very helpful in general but can be used
can keep fragment data on configuration changes but fragment view structure is still destroyed/recreated
So dealing with views directly can be really handy and more helpful for some cases.
Note View has its own life cycle too and can store/recreate saved instance state.
Custom Views have the advantage of simplicity and their primary purpose is to display a piece of data on the screen.
Think of Fragments as a functional unit, a way to display a portion of UI that has a specific purpose, using one or more Views.
Fragments are connected to the Activity lifecycle and they can include and control Loaders to populate the Views with data.
As you can see, Fragments have much more in common with Activities than they have with custom views.
This property will register an OpenEntityManagerInViewInterceptor, which registers an EntityManager to the current thread, so you will have the same EntityManager until the web request is finished.
Instead of letting the business layer decide how it’s best to fetch all the associations that are needed by the View layer, OSIV (Open Session in View) forces the Persistence Context to stay open so that the View layer can trigger the Proxy initialization, as illustrated by the following diagram.
The OpenSessionInViewFilter calls the openSession method of the underlying SessionFactory and obtains a new Session.
The OpenSessionInViewFilter calls the doFilter of the javax.servlet.FilterChain object reference and the request is further processed
The PostService opens a new transaction, and the HibernateTransactionManager reuses the same Session that was opened by the OpenSessionInViewFilter.
The OpenSessionInViewFilter can close the Session, and the underlying database connection is released as well.
At first glance, this might not look like a terrible thing to do, but, once you view it from a database perspective, a series of flaws start to become more obvious.
Unfortunately, [OSIV (Open Session in View) is enabled by default in Spring Boot (hyper-link)], and OSIV is really a bad idea from a performance and scalability perspective.
This is the default behaviour for UIViewController on iOS 7.
The view will be full-screen which means the status bar will cover the top of your view.
If you have a UIViewController within a UINavigationController and the navigationBar is visible, you can have the following code in your viewDidLoad or have a background image for navigationBar do the trick.
If you have navigationBar hidden, then you have to adjust all the UIView elements by shifting 20 points.
In the storyboard, I moved my views 20 pixels down to look right on iOS 7 and in order to make it iOS 6 compatible, I changed Delta y to -20.
Since my storyboard is not using auto-layout, in order to resize the height of views properly on iOS 6 I had to set Delta height as well as Delta Y.
Specifically automaticallyAdjustsScrollViewInsets=YES and set self.edgesForExtendedLayout = UIRectEdgeNone works for me when I don't want to the overlap and I have a tableviewcontroller.
Here is my UIViewController subclass [https://github.com/comonitos/ios7_overlaping (hyper-link)]
1 Subclass from UIViewController
2 Subclass your window.rootViewController from that class.
If you want "Use Autolayout" to be enabled at any cost place the following code in viewdidload.
If using xibs, a very easy implementation is to encapsulate all subviews inside a container view with resizing flags (which you'll already be using for 3.5" and 4" compatibility) so that the view hierarchy looks something like this
and then in viewDidLoad, do something like this:
If you have a background, it can be kept outside containerView and let it cover the whole screen.
Add Key in plist--- View controller-based status bar appearance : NO
check for "View controller based status bar appearance" key and set its value "NO"
My status bar and navigation bar overlap after return from landscape view of YTPlayer.
I called on YTPlayerViewDelegate's playerView:didChangeToState:
The delegate method pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted: will tell you when to update that variable.
Then, you can get the currently presented View Controller by doing
As of iOS 6 I've found that the viewControllers property of UIPageViewController constantly updates so that it will always hold the one view controller that represents the current page, and nothing else.
Thus, you can access the current page by calling viewControllers[0] (Assuming you only show one view controller at a time).
The viewController array only updates once the page "locks" into place, so if a user decides to partially reveal the next page it doesn't become the "current" page unless they complete the transition.
If you want to keep track of the "page numbers" assign your view controllers an index value as you create them through the UIPageViewController datasource methods.
Apple could avoid a lot of hassle by making the native UIPageViewController scroll view pagination more configurable.
I had to resort to overlaying a new UIView and UIPageControl just because the native UIPageViewController pagination won't support a transparent background or repositioning within the view frame.
I've been using view.tag for a while now, trying to keep track of the current page was too complicated.
In this code the index is stored within the tag property of each view and is used to fetch the next or previous VC.
Check out the comment in code to view this solution as well:
and must use this code under the delegate function of UIPageViewController (didFinishAnimating).
I have two view controllers and when I slightly (around 20px) scroll the last view backwards it triggers the delegate:
pageViewController:didFinishAnimating:previousViewControllers:transitionCompleted:
Using delegate inside child viewController something like:
that is triggered inside viewDidAppear like:
This pageController.currentPage is updated from the displayed UIViewController in the viewWillAppear
Using UIPageViewControllerDelegate method.
I have a viewControllers array, that I display in the UIPageViewController.
Important thing to note here is that the setViewControllers method of UIPageViewController does not give any delegate callback.
The delegate callbacks only represent user touch actions in the UIPageViewController.
This requires that you have your own array of UIViewControllers (in this example called allViewControllers)
How about asking for a viewController directly from the UIPageViewController (Swift 4 version):
Or, if you just need the currently presented view controller at some point of time, simply use pageViewController.viewControllers?.first at that time.
In this case i don't care what class of UIViewController are embedded
My function for make multiple links inside TextView
Update 2020: Now this function able to support multiple same texts link inside 1 TextView, but remember to put the link in the correct order
Here is a Kotlin method to make parts of a TextView clickable:
It can be called multiple times to create several links within a TextView:
Define the TextView without any special tag (it is important to NOT use the "android:autoLink" tag, see: [https://stackoverflow.com/a/20647011/1699702 (hyper-link)]):
then use a link with custom scheme and host in the text of the TextView as (in String.xml):
and "activate" the link with setMovementMethod() (in onCreate() for activities or onCreateView() for fragments):
Solution: Simply extract common attributes from both views and add them directly as children of the <resources> node:
I need to share my custom attributes among my custom views so I tried the above solution in Android Studio but had no luck.
For example, as I have done above : 
Parent styleable name MyView and inherited this to my other styleable like MyView1 and MyView2 respectively.
The common styles don't need to be named the same thing as a view.
Here is what I did in a recent project that has two custom views that both share the same attributes.
As long as the custom views still have the names for the attributes and don't include a format, I can still access them as normal from code.
As long as I define them (give them a format) for at least one custom view, I can use them anywhere (without the format).
in my problem I want the text of anchor <a>text</a> inside my view to be based on some value
and that text is retrieved form App string Resources
Drop this code into a Razor view to see that using Json.Encode is safe, and that Newtonsoft can be made safe in the JavaScript context but is not without some extra work.
[Does the output of JsonConvert.SerializeObject need to be encoded in Razor view?
You can create your view directly from the Layout Inflater, you only need to use the name of your layout XML file and the ID of the layout in file.
The view inside the AlertDialog is called android.R.id.custom
AlertDialog.setView(View view) does add the given view to the R.id.custom FrameLayout.
The following is a snippet of Android source code from AlertController.setupView() which finally handles this (mView is the view given to AlertDialog.setView method).
After changing the ID it android.R.id.custom, I needed to add the following to get the View to display:
However, this caused the new View to render in a big parent view with no background, breaking the dialog box in two parts (text and buttons, with the new View in between).
I finally got the effect that I wanted by inserting my View next to the message:
I found this solution by exploring the View tree with View.getParent() and View.getChildAt(int).
The easiest way to do this is by using android.support.v7.app.AlertDialog instead of android.app.AlertDialog where public AlertDialog.Builder setView (int layoutResId) can be used below API 21.
Whatever the type of layout(LinearLayout, FrameLayout, RelativeLayout) will work by setView
and will just differ in the appearance and behavior.
using setView to assign the custom layout to the AlertDialog.Builder
[How can I display a list view in an Android Alert Dialog?
works for any viewGroup.
in your case it is GridView.
[http://developer.android.com/reference/android/view/ViewGroup.html#removeAllViews() (hyper-link)]
You can remove only some types of view in a ViewGroup with this function :
Both the presenting and presented view controller can call dismissViewController:animated: in order to dismiss the presented view controller.
The former option is (arguably) the "correct" one, design-wise: The same "parent" view controller is responsible for both presenting and dismissing the modal ("child") view controller.
However, the latter is more convenient: typically, the "dismiss" button is attached to the presented view controller's view, and it has said view controller  set as its action target.
If you are adopting the former approach, you already know the line of code in your presenting view controller where the dismissal occurs: either run your code just after dismissViewControllerAnimated:completion:, or within the completion block.
If you are adopting the latter approach (presented view controller dismisses itself), keep in mind that calling dismissViewControllerAnimated:completion: from the presented view controller causes UIKit to in turn call that method on the presenting view controller:
The presenting view controller is responsible for
  dismissing the view controller it presented.
If you call this method
  on the presented view controller itself, UIKit asks the presenting
  view controller to handle the dismissal.
([source: UIViewController Class Reference (hyper-link)])
So, in order to intercept such event, you could override that method in the presenting view controller:
So if you override dismissViewControllerAnimated in your VC1 controller I believe it will get called when you hit cancel on VC2.
Rather than rely on the underlying mechanism, instead of calling dismissViewControllerAnimated:completion on VC2 itself, call dismissViewControllerAnimated:completion on self.presentingViewController in VC2.
Set the done handler for VC2 as: VC2.onDoneBlock={[VC2 dismissViewControllerAnimated:YES completion:nil]};
Present the VC2 controller as normal using [self presentViewController:VC2 animated:YES completion:nil];
You can use unwind segue to do this task, no need to use the dismissModalViewController.
Now, you know when the presented view controller is dismissed.
@user523234 - "But the dismissViewControllerAnimated in the VC1 was not getting called."
You can't assume that VC1 actually does the presenting - it could be the root view controller, VC0, say.
There are 3 view controllers involved:
sourceViewController
presentingViewController
presentedViewController
In your example, VC1 = sourceViewController, VC2 = presentedViewController, ??
= presentingViewController - maybe VC1, maybe not.
If you override on the view controller being dimissed:
You can handle uiviewcontroller closed using with Unwind Segues.
I use the following to signal to a coordinator that the view controller is "done".
This is used in a AVPlayerViewController subclass in a tvOS application and will be called after the playerVC dismissal transition has completed:
overrideing [viewDidAppear (hyper-link)] did the trick for me.
= nil) {
        super.dismiss(animated: flag, completion: completion)
        topViewController?.dismiss(animated: flag, completion: completion)
    }
}
As it turns out, the [popoverPresentationController (hyper-link)] property of an [UIActionController (hyper-link)] (or, rather, any UIViewController to that effect), has a [delegate (hyper-link)] you can set anytime in your code, which is of type [UIPopoverPresentationControllerDelegate (hyper-link)], and has the following methods:
Assign the delegate from your action controller, implement your method(s) of choice in the delegate class (view, view controller or whatever), and voila!
Using the willMove(toParent: UIViewController?)
There is a special Boolean property inside UIViewController called isBeingDismissed that you can use for this purpose:
If you want to handle view controller dismissing, you should use code below.
Unfortunately we can't call completion in overridden method - (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^ _Nullable)(void))completion; because this method is been called only if you call dismiss method of this view controller.
I have used deinit for the ViewController
and then when the view is about to dismiss :
and finally just add protocol to any viewController that you wish to listen!
You can use UIAdaptivePresentationControllerDelegate on the parent view controller that you want to observe the dismissal of another presented view controller:
try [sendSubviewToBack (hyper-link)]
Besides addSubview, there are other methods you can rely on to add your view:
You can control the index (actually z-index, or layer order) of the view using these methods.
Insert a view below another view in the view hierarchy:
Insert a view above another view in the view hierarchy:
Insert a subview at the specified index:
Move the specified subview so that it appears behind its siblings:
Move the specified subview so that it appears on top of its siblings:
Exchange the subviews at the specified indices:
Another nice idea is to give the Subviews a tag.
Insert a view below another view in the view hierarchy:
Insert a view above another view in the view hierarchy:
Insert a subview at the specified index:
Move the specified subview so that it appears behind its siblings:
Move the specified subview so that it appears on top of its siblings:
Exchange the subviews at the specified indices:
It has a nice method called [findViewByPosition (hyper-link)] that
Finds the view which represents the given adapter position.
edit: as noted by Paul Woitaschek in the comments, findViewByPosition is a method of LayoutManager so it would work with all LayoutManagers (i.e.
But there IS an easy way to get the ViewHolder from a specific position (something you'll probably do a lot in the Adapter).
myRecyclerView.findViewHolderForAdapterPosition(pos);
NOTE:  If the View has been recycled, this will return null.
If you want the View, make sure to access the itemView property of the ViewHolder like so: myRecyclerView.findViewHolderForAdapterPosition(pos).itemView;
recyclerViewInstance.findViewHolderForAdapterPosition(adapterPosition)  and
recyclerViewInstance.findViewHolderForLayoutPosition(layoutPosition).
Be sure that RecyclerView view uses two type of positions
You should use getAdapterPosition() for findViewHolderForAdapterPosition(adapterPosition) and getLayoutPosition() for findViewHolderForLayoutPosition(layoutPosition).
Take a member variable to hold previously selected item position in recyclerview adapter and other member variable to check whether user is clicking for first time or not.
You can make ArrayList of ViewHolder :
and, all store ViewHolder(s) in the list like :
and add/remove other ViewHolder in the ArrayList as per your requirement.
You can as well do this, this will help when you want to modify a view after clicking a recyclerview position item
You can get a view for a particular position on a recyclerview using the following
Keep in mind that you have to wait until adapter will added to list, then you can try to getting view by position
You can simply use "findViewHolderForAdapterPosition" method of recycler view and you will get a viewHolder object from that then typecast that viewholder into your adapter viewholder so you can directly access your viewholder's views
To get specific view from recycler view list OR show error at edittext of recycler view.
To get a View from a specific position of recyclerView you need to call findViewHolderForAdapterPosition(position) on recyclerView object that will return RecyclerView.ViewHolder
from the returned RecyclerView.ViewHolder object with itemView you can access all Views at that particular position
If you guys are having null with every attempt to get a view with any int position, try to add a new constructor parameter to your adapter like this for example:
I added indicesGanadores to color my cardview background if my game is won.
RecyclerView - Get view at particular position.
Here's how to pop the current view controller and flip to a new view controller using a navigation controller:
You can use Apple's new viewController containment system.
For more in-depth information check out the WWDC 2011 session video "Implementing UIViewController Containment".
New to iOS5, UIViewController Containment allows you to have a parent viewController and a number of child viewControllers that are contained within it.
This is how the UISplitViewController works.
Doing this you can stack view controllers in a parent, but for your particular application you are just using the parent to manage the transition from one visible viewController to another.
This is the Apple approved way of doing things and animating from one child viewController is painless.
Plus you get to use all the various different UIViewAnimationOption transitions!
Also, with UIViewContainment, you do not have to worry, unless you want to, about the messiness of managing the child viewControllers during orientation events.
You can simply use the following to make sure your parentViewController forwards rotation events to the child viewControllers.
You can do the following or similar in your parent's viewDidLoad method to setup the first childViewController:
then when you need to change the child viewController, you call something along the lines of the following within the parent viewController:
I posted a full example project here:  [https://github.com/toolmanGitHub/stackedViewControllers (hyper-link)].
This [other project (hyper-link)] shows how to use UIViewController Containment on some various input viewController types that do not take up the whole screen.
This is where we'll do all the dirty work--other classes will be able to "cleanly" call instance methods like pushViewController: and such.
The child view controllers array will serve as a store for all the view controllers in our stack.
We would automatically forward all rotation and resizing code from the NavigationController's view to the currentController.
Now you can implement your own custom pushViewController:, popViewController and such, using these method calls.
This is b/c view transition animations that replace a view w/ a different view must occur with views at least a level below the first view added to the window (e.g.
window.rootViewController.view.anotherView).
To transition to a new view controller from any view controller
You have a view controller assigned as the rootViewController of your window
When you switch to a new view you want to replace the current viewController with the viewController owning the new view.
At any time, only the current viewController is alive (e.g.
The code can be easily modified to work differently, the key point is the animated transition and the single view controller.
Make sure you don't retain a view controller anywhere outside of assigning it to window.rootViewController.
Example use in a view controller
They are also super easy to hook up in Interface Builder, they keep relationships in IB visible, and they don't require much support by the segue's source/destination view controllers.
The post linked above provides iOS 4 code to replace the current top view controller on the navigationController stack with a new one using a slide-in-from-top animation.
This code gives Transition from a view controller to another view controller which having a navigation controller.
A static UITableView must be in a UITableViewController.
So you will have place the table in UITableViewController and then add it as childView to the MainViewController.
You can refer
[https://iphoneidoit.blogspot.in/2013/10/static-uitableview-in-uiviewcontroller.html (hyper-link)]
The only way to get a static UITableView along with other controls on the same screen is to use a Container View.
Drag a ViewController onto your storyboard.
Drag a TableViewController onto your storyboard.
Next Drag a Container view to your ViewController and size it about the size you want (smaller than the view) -> when you drag the container view it will create a segue and another view.
Remove that segue and view.
Then finally ctrl click in your container and drag to your new TableViewContoller.
Style your TableView the way you want -> including static cells.
This answer was already found and given here: G.Huebner -> [http://web.archive.org/web/20140928102504/http://iphonedevsdk.com/forum/iphone-sdk-development/111800-static-table-view-cells-only-work-in-a-uitableviewcontroller.html (hyper-link)]
I think what you are doing is you are first dragging the ViewController on the storyboard and then dragging the tableView on the ViewController.
Instead of this what you should have done is Drag the TableViewController on the main storyboard instead of a ViewController and then select the static cells.
Well, if you are really using a static tableView, you should consider copy/past everything to a ScrollView or StackView.
To change the text-related attributes on a TextView (or its subclasses like Button) there is a special method:
If you are working with fragments, then in onCreateView you inflate that button, like:
where container is the ViewGroup container associated with the onCreateView method you override when creating your fragment.
Then you add your customized, stylized buttons to the layout container you also inflated in the onCreateView method:
for TextViews and Buttons.
There are similar classes for the rest of Views :-)
This option can give a better overview when viewing the
  evolution of a particular topic branch, because merges
             into a topic branch tend to be only about adjusting to updated upstream from time to time, and this option allows you to
  ignore the individual commits brought in to your
             history by such a merge.
This lengthy log call will give you a nice view filtered by committer sans merge.
Add an EditText on top of your listview in its .xml layout file.
The basic here is to add an OnTextChangeListener to your edit text and inside its callback method apply filter to your listview's adapter.
And afterwards, the only thing you need to do is to create the filter as a member class (possibly within the View's "onCreate") passing your adapter reference, your list, and the method to be called for filtering:
Use ViewContext.ViewData.ModelState.
The subview becomes as large as possible while maintaining its aspect ratio and fitting entirely inside its parent.
Let's start with some views:
The light green view has an aspect ratio of 4:1.
The dark green view has an aspect ratio of 1:4.
I'm going to set up constraints so that the blue view fills the top half of the screen, the pink view fills the bottom half of the screen, and each green view expands as much as possible while maintaining its aspect ratio and fitting in its container.
First, I'll create constraints on all four sides of the blue view.
I find it easier to leave room between the views when setting up constraints, and just set the constants to 0 (or whatever) by hand.
Next, I pin the left, bottom, and right edges of the pink view to its nearest neighbor.
I don't need to set up a top edge constraint because its top edge is already constrained to the bottom edge of the blue view.
I also need an equal-heights constraint between the pink and blue views.
I undo that and start work on the light green view.
Aspect-fitting the light green view requires five constraints:
A required-priority aspect ratio constraint on the light green view.
A required-priority constraint limiting the width of the light green view to be less than or equal to the width of its container.
A high-priority constraint setting the width of the light green view to be equal to the width of its container.
A required-priority constraint limiting the height of the light green view to be less than or equal to the height of its container.
A high-priority constraint setting the height of the light green view to be equal to the height of its container.
The less-than-or-equal constraint, by itself, is not sufficient to determine the width of the light green view; many widths will fit the constraint.
And since the aspect-ratio constraint is also required, it can only maximize the size of the subview along one axis (unless the container happens to have the same aspect ratio as the subview).
Finally, you asked for the subview to be centered in its container, so I'll set up those constraints:
Now, to test, I'll select the view controller and ask Xcode to update all the frames.
The subview has expanded to completely fill its container.
The problem is that on a less-than-or-equal constraint, it matters which view is at each end of the constraint, and Xcode has set up the constraint opposite from my expectation.
Instead, I'll just select the subview and change the constraints to be greater-than-or-equal:
Now I do all the same things to the dark green view on the bottom.
You set up the top and bottom views (blue and pink) just like Rob showed.
Then you create a custom AspectFitView:
AspectFitView.h:
AspectFitView.m:
Next, you change the class of the blue and pink views in the storyboard to be AspectFitViews.
Finally you set two outlets to your viewcontroller topAspectFitView and bottomAspectFitView and set their childViews in viewDidLoad:
So it's not hard to do this in code and it is still very adaptable and works with variably-sized views and different aspect ratios.
Update July 2015: Find a demo app here: [https://github.com/jfahrenkrug/SPWKAspectFitView (hyper-link)]
I found myself wanting aspect-fill behavior so that a UIImageView would maintain its own aspect ratio and entirely fill the container view.
Confusingly, my UIImageView was breaking BOTH high-priority equal-width and equal-height constraints (described in Rob's answer) and rendering at full resolution.
The solution was simply to set the UIImageView's Content Compression Resistance Priority lower than the priority of the equal-width and equal-height constraints:
I couldn't find any ready-to-go fully programatical solution, so here is my take in swift 5 for the aspect fill extension to a view:
The androidmanifest.xml file and the resources will be extracted and can be viewed whereas the source code is not in the package - just the compiled .dex file ("Dalvik Executable")
Apk Viewer
Unzip it, you can view all resources correctly but all java files are not correctly decompiled.
All files including the manifest of an app can be viewed and also shared using email, cloud etc., no rooting required.
First you create a UIImage from your image file, then create a UIImageView from that:
Finally you'll need to give imageView a frame and add it your view for it to be visible:
First create UIImageView then add image in UIImageView .
This is how you can add an image view programmatically where you can control the constraints.
First create an outlet for your UIImageView
Then use the image property in UIImageView
Your image view will not show if you don't put that, don't ask me why.
As you don't have the user detail view it can't do this.
Would not just registering the UserViewSet with the router solve your issue?
The reason is I forgot giving "**-detail" (view_name, e.g.
So, Django Rest Framework could not find that view.
If using namespacing with hyperlinked serializers you'll also need to ensure that any view_name parameters on the serializers correctly reflect the namespace.
you'd need to include a parameter such as view_name='api:user-detail' for serializer fields hyperlinked to the user detail view.
However, you probably didn't just arbitrarily add the base_name, you might have done it because you defined a custom def get_queryset() for the View and so Django mandates that you add the base_name.
Notice we are defining this HyperlinkedIdentityField ON THE SERIALIZER of the view that is throwing the error.
If my error were "Could not resolve URL for hyperlinked relationship using view name "study-detail".
My ModelViewSet (the custom get_queryset is why I had to add the base_name to the router.register() in the first place):
My router registration for this ModelViewSet in urls.py:
And you need to make sure that the view_name defined on the HyperlinkedIdentityField is the same as you defined on the base_name in urls.py with a '-detail' added after it.
read_only allows you to represent the field without having to link it to another view of the model.
This is my view function:
Since I didn't give queryset directly in UserViewSet, I have to set base_name when I register this viewset.
If you're extending the GenericViewSet and ListModelMixin classes, and have the same error when adding the url field in the list view, it's because you're not defining the detail view.
I ran into this same issue and resolved it by adding generics.RetrieveAPIView as a base class to my viewset.
ImproperlyConfigured at /api_users/users/1/
Could not resolve URL for hyperlinked relationship using view name "users-detail".
For the original poster, the issue was resolved simply by registering the UserViewSet, as suggested in the top answer.
However, if anyone else has this issue even with all ViewSets registered, I think I've figured out what's going wrong, and I've found a solution that's cleaner than a lot of the others here.
In my case, I encountered this issue after trying to create a ViewSet with a custom get_queryset() function.
When I replaced the ViewSet's queryset field with a custom get_queryset() function, I was then hit with this error:
AssertionError: `basename` argument not specified, and could not automatically determine the name from the viewset, as it does not have a `.queryset` attribute.
Could not resolve URL for hyperlinked relationship using view name "message-detail".
My final serializer and ViewSet implementations were as simple as this!
ViewGroup has quite convenient method for retrieving focused child:
Well, after reviewing all available solutions I wrote plugin which can freeze any row (not only th) at the top of page or container.
This necessarily needs to be accompanied by top, which specifies to the browser that the head will stick to the top of the page or viewport.
But you can apply the rest to give for a better view.
I choose to not have a ViewModel.
I have setup my project with a RootView and some child views.
I setup my RootView with a App object as the EnvironmentObject.
Instead of the ViewModel accessing Models, all my views access classes on App.
Instead of the ViewModel determining the layout, the view hierarchy determine the layout.
From doing this in practice for a few apps, I've found my views are staying small and specific.
In my previews, I initialize a MockApp which is a subclass of App.
The problem originated from the way EnvironmentObject is injected in view, general schema
ie, at first - created view, at second created environment object, at third environment object injected into view
Thus if I need to create/setup view model in view constructor the environment object is not present there yet.
There is no any trade-off here, because ViewModel and EnvironmentObject are, by design, reference-types (actually, ObservableObject), so I pass here and there only references (aka pointers).
ViewModel is a model in MVVM.
Now, MVVM requires you to set up a model in such way that whenever it changes, it updates the view in some pre-determined way.
; refactoring out model and associated states and keeping them separate from view.
Some would just ignore binding, and think calling an object ViewModel automagically solves everything; some would introduce KVO-based Rx, and complicate everything when MVVM is supposed to make things simpler.
Model with state is just too dangerous because MVVM put too much emphasis on ViewModel, too little on state management and general disciplines in managing control; most of the developers end up thinking a model with state that is used to update view is reusable and testable.
Now to your question: you ask if your ViewModel can have access to EnvironmentObject (EO)?
Because in SwiftUI a model that conforms to View automatically has reference to EO.
There's no need for a separate ViewModel object that manually binds to view which requires an EO reference passed to it.
; a model with binding to view.
But because model is value type, so instead of refactoring out model and state as view model, you refactor out control (in protocol extension, for example).
This can also be used to resolve dependencies for Views:
An alternative for Views is to use @EnvironmentObject in the SwiftUI view hierarchy, but this gets a little bit cumbersome because you'll have two dependency-injection containers, Resolver/@Injected for everything that's app-wide/service-like and SwiftUI/@EnvironmentObject in the view hierarchy for everything that relates to views/for view models.
For the ViewModel:
This is the simplest way I have found to access and update an @EnvironmentObject property within a viewModel:
This approach also allows you to mock the store via dependency injection when unit testing ChildViewModel or within the canvas previews.
There's no optionals unlike other hacky approaches that use onAppear, can run code before the onAppear is triggered and the view model is scoped only to the view that it serves.
You can also directly mutate the store within the viewModel, that works just fine too.
The presenter, which contains all logic in the view, should respond to the button being clicked as @JochemKempe [says (hyper-link)].
If it decides that the user must select a file, it calls back into the view (via a view interface) and let the view, which contains all UI technicalities, display the OpenFileDialog.
The primary reason for using an MVP pattern, imo is to separate the UI technology from the view logic.
Thus the presenter orchestrates all logic while the view keeps it separated from UI logic.
Update: since the presenter is the embodiment of the logic found in one specific view, the view-presenter relationship is IMO a one-to-one relationship.
And for all practical purposes, one view instance (say a Form) interacts with one presenter instance, and one presenter instance interacts with only one view instance.
That said, in my implementation of MVP with WinForms the presenter always interacts with the view through an interface representing the UI abilities of the view.
There is no limitation on what view implements this interface, thus different "widgets" may implement the same view interface and reuse the presenter class.
First, anything that a user can interact with, or just be shown, is a view.
The laws, behavior and characteristics of such a view is described by an interface.
That interface can be implemented using a WinForms UI, a console UI, a web UI or even no UI at all (usually when testing a presenter) - the concrete implementation just doesn't matter as long as it obeys the laws of its view interface.
Second, a view is always controlled by a presenter.
That interface has no interest in the concrete view implementation as long as it obeys the laws of its view interface.
Third, since a presenter controls its view, to minimize dependencies there's really no gain in having the view knowing anything at all about its presenter.
There's an agreed contract between the presenter and the view and that's stated by the view interface.
The presenter doesn't have any methods that the view can call, but the view has events that the presenter can subscribe to.
The presenter knows its view.
The view has no idea what presenter is controlling it; it'll just never be provided any presenter.
In addition to the above, I usually have a base IView interface where I stash the Show() and any owner view or view title that my views usually benefit from.
When the winform loads, it has to obtain a treeview.
Am I correct in thinking that the view should therefore call a method such as: presenter.gettree(), this in turn will delegate to the model, which will obtain the data for the treeview, create it and configure it, return it to the presenter, which in turn will pass to the view which will then simply assign it to, say, a panel?
I would call IConfigurationView.SetTreeData(...) from IConfigurationPresenter.ShowView(), right before the call to IConfigurationView.Show()
Would this be the same for any data control on the Winform, as I also have a datagridview?
Yes, I would call IConfigurationView.SetTableData(...) for that.
It's up to the view to format the data given to it.
The presenter simply obeys the view's contract that it wants tabular data.
Would the view simply call a presenter method, which in turn would call a method that loads the plugins and display the information in the view?
Would the view hold references to them or the presenter?
If the plugins are view-related, then the views should know about them, but not the presenter.
If they are all about data and model, then the view shouldn't have anything to do with them.
Am I correct in thinking that the view should handle every single thing about presentation, from treeview node colour, to datagrid size, etc?
Think about it as the presenter providing XML that describes data and the view that takes the data and applies a CSS stylesheet to it.
In concrete terms, the presenter might call IRoadMapView.SetRoadCondition(RoadCondition.Slippery) and the view then renders the road in red color.
If when I click on the treenodes, should I pass through the specific node to the presenter and then from that the presenter would work out what data it needs and then asks the model for that data, before presenting it back to the view?
If possible, I would pass all data needed to present the tree in a view in one shot.
But if some data is too large to be passed from the beginning or if it's dynamic in its nature and needs the "latest snapshot" from the model (via the presenter), then I would add something like event LoadNodeDetailsEventHandler LoadNodeDetails to the view interface, so that the presenter can subscribe to it, fetch the details of the node in LoadNodeDetailsEventArgs.Node (possibly via its ID of some kind) from the model, so that the view can update its shown node details when the event handler delegate returns.
If you create a new view every time, all old views will still be bound to all of the events.
One thing you can do is create a function on your view called detatch:
Then, before you create the new view, make sure to call detatch on the old view.
Of course, as you mentioned, you can always create one "detail" view and never change it.
You can bind to the "change" event on the model (from the view) to re-render yourself.
Of course, doing this requires a common model that the item View has reference to as well as the higher level list view and the details view.
I always destroy and create views because as my single page app gets bigger and bigger, keeping unused live views in memory just so that I can re-use them would become difficult to maintain.
Here's a simplified version of a technique that I use to clean-up my Views to avoid memory leaks.
I first create a BaseView that all of my views inherit from.
The basic idea is that my View will keep a reference to all of the events to which it's subscribed to, so that when it's time to dispose the View, all of those bindings will automatically be unbound.
Here's an example implementation of my BaseView:
Whenever a View needs to bind to an event on a model or collection, I would use the bindTo method.
Whenever I remove a view, I just call the dispose method which will clean everything up automatically:
Also, View.remove calls stopListening automatically, so binding and unbinding is as easy as this now:
I think most people start with Backbone will create the view as in your code:
This code creates zombie view, because we might constantly create new view without cleanup existing view.
However it's not convenient to call view.dispose() for all Backbone Views in your app (especially if we create views in for loop)
I think the best timing to put cleanup code is before creating new view.
Using VM to create your view will help cleanup any existing view without having to call view.dispose().
So it is up to you if you want to reuse view instead of constantly creating it, as long as the view is clean, you don't need to worry.
Just change createView to reuseView:
Detailed code and attribution is posted at [https://github.com/thomasdao/Backbone-View-Manager (hyper-link)]
One alternative is to bind, as opposed to creating a series of new views and then unbinding those views.
You'd set the model of myView to myViewModel, which would be set to a User model.
This way, if you set myViewModel to another user (i.e., changing its attributes) then it could trigger a render function in the view with the new attributes.
You could get around this by either using a collection object, or by setting the user model as an attribute of the viewmodel.
Then, this would be accessible in the view as myview.model.get("model").
Using the above line before instantiating the new Views from route, solved the issue I had with zombie views.
Use this method for clearing the child views and current views from memory.
You can view dependency graphs on the Feed Details page.
In fact there are two ways to theme a view : the "field" way and the "node" way.
In "edit View", you can choose "Row style: Node", or "Row style: Fields".
with the "Node" way, you can create a node-contentname.tpl.php wich will be called for each node in the view.
with the "Field" way, you add a views-view-field--viewname--field-name-value.tpl.php for each field you want to theme individually.
[View 2 documentation (hyper-link)], especially the ["Using Theme" (hyper-link)] page.
A quick way to find the template files you can create and modify for a view in Views 2.0 is to:
Edit the view
Go to theme.inc file in YOUR_MODULE_DIR/views/theme/ folder.
In the _views_theme_functions function print the $themes variable or put a breakpoint on the last line of the function to see the content of the variable.
Just convert views_view to views-view and __ to -- and add your template extension to get desired file name.
For example if an element of the $themes array is views_view__test_view__block  (where test_view is the name of your view) then the name of the template file would be views-view--test_view--block.tpl.php.
for me block-views-myViewName-myBlockId.tpl.php works
In my opinion the simplest way to decide which template file to use for theming the views is :
1) Click on admin/build/views/edit/ViewName -> Basic Settings -> Theme
Highlighted (File names in Bold) files indicate which template file is being used to do theme what part of the view.
After incorporating the required changes in the relevant view template file RESCAN .. now you should be able to see the changed template file highlighted .
You should also check out [Semantic Views (hyper-link)].
For simple Views theming, it is really handy.
You'll likely have a number of views which require similar formatting.
Creating templates for each of these views and copying them creates a nightmare of code branching - if you're asked to change the whole look and feel of the site (implying changing the display of each of these views formatted in this particular way), you have to go back and edit each of these separately.
Instead of using the views interface to select new templates for views, I sometimes simply insert some code branching into a single views file.
for one site in views-view-fields.tpl.php I have:
This then modifies the fields in the way I want only for this family of Views = articleList, frontList and archiveList - and for other views using this template runs the code one normally finds in this template.
Go to edit view.
Add the html you want to theme and print the variables of the view wherever needed
Custom classes to each of the view's elements can be added too.
Full integration with Views and Panels
Set the left position of this view relative to its parent:
Set the right position of this view relative to its parent:
Set the top position of this view relative to its parent:
Set the bottom position of this view relative to its parent:
The above methods are used to set the position the view related to its parent.
Parameter x is the visual x position of this view.
Parameter y is the visual y position of this view.
Use RelativeLayout, place your view in it, get RelativeLayout.LayoutParams object from your view and set margins as you need.
Then call requestLayout() on your view.
Yes, you can dynamically set the position of the view in Android.
Likewise, you have an ImageView in LinearLayout of your XML file.
I'm only just getting started on this myself, but these seem to be the safest and preferred way of moving a view.
You just use the static methods from the ViewHelper class, pass the view and which ever value you want to set it to.
NB: Note that you can use also imageView.setLeft(int dim), BUT THIS WON'T set the position of the component, it will set only the position of the left border of the component, the rest will remain at the same position.
If you can wait for a layout cycle and the parent view group supports MarginLayoutParams (or a subclass), set marginLeft / marginTop accordingly.
Layout is called implicitly and asynchronously by the Android view layout system.
when using a View to render a cursor, and it's supposed to be re-positioned and serve as a PopupMenu anchor at the same time.
Calling them alone is not sufficient -- you also need to call setRight() and setBottom() to avoid stretching or shrinking the view.
The implementation of these methods looks relatively complex (= doing some work to account for the view size changes caused by each of them)
setX() and setY() work outside of the layout system, and the corresponding values are treated as an additional offset to the left / top / bottom / right values determined by the layout system, shifting the view accordingly.
If you want to set a position temporarily (e.g for doing animation, not affected a hierachy) when the view was added and shown, just use setX()/ setY() instead.
It means if your view is added, setX(), setY() will work perfectly; otherwise, when you try to add a view into view group layout (e.g FrameLayout, LinearLayout, RelativeLayout), you must set its LayoutParams with marginLeft, marginTop instead (setX(), setY() in this case won't work sometimes).
Set position of the view by marginLeft and marginTop is an unsynchronized process.
If you use the view straight away after set margin for it, you might get a wrong value.
One thing to keep in mind with positioning is that each view has an index relative to its parent view.
So if you have a linear layout with three subviews, the subviews will each have an index: 0, 1, 2 in the above case.
This allows you to add a view to the last position (or the end) in a parent view by doing something like this:
Alternatively you could replace a view using something like the following:
Instead of adding a toolbar in the layout, you can set your custom view as shown below.
You can just use relative layout inside toolbar view group in your xml file and adjust the positions of widgets as you require them for your use case.No need to create custom layout & inflate it and attach to toolbar.
Add a right margin adjusting in the activity like this: (the view is the customized actionbar or a right button in it)
Use ViewStub and specify the layout of the view you want to toggle.
To view:
hi if are you new in android use this way
Apply your view to make it gone 
GONE is one way, else, get hold of the parent view, and remove the 
child from there..... 
else get the parent layout and use this method an remove all child
parentView.remove(child)
To add view to a layout, you can use addView method of the ViewGroup class.
Check the documentation of [ViewGroup (hyper-link)].
One simple way to remove view from a layout can be like,
However, when you remove a view, in my option, you want to remove a view with certain id.
1, give the view an id when you create it:
2, remove the view with the id:
I am removing view using start and count Method, i have added 3 view in linear Layout.
view.removeViews(0, 3);
you can use addView or removeView
For best results give landscape orientation in the cameraview activity.
In this case, the camera software should populate the [Exif (hyper-link)] data with the orientation that the photo should be viewed in.
Just simply add after yourImageView.setBitmap(bitmap); this yourImageView.setRotation(90);
If you just want to load into an ImageView instead of saving to a file:
The ViewExpiredException will be thrown whenever the javax.faces.STATE_SAVING_METHOD is set to server (default) and the enduser sends a HTTP POST request on a view via <h:form> with <h:commandLink>, <h:commandButton> or <f:ajax>, while the associated view state isn't available in the session anymore.
The view state is identified as value of a hidden input field javax.faces.ViewState of the <h:form>.
With the state saving method set to server, this contains only the view state ID which references a serialized view state in the session.
... then the serialized view state is not available anymore in the session and the enduser will get this exception.
There is also a limit on the amount of views JSF will store in the session.
When the limit is hit, then the least recently used view will be expired.
See also [com.sun.faces.numberOfViewsInSession vs com.sun.faces.numberOfLogicalViews (hyper-link)].
With the state saving method set to client, the javax.faces.ViewState hidden input field contains instead the whole serialized view state, so the enduser won't get a ViewExpiredException when the session expires.
It can however still happen on a cluster environment ("ERROR: MAC did not verify" is symptomatic) and/or when there's a implementation-specific timeout on the client side state configured and/or when server re-generates the AES key during restart, see also [Getting ViewExpiredException in clustered environment while state saving method is set to client and user session is valid (hyper-link)] how to solve it.
Regardless of the solution, make sure you do not use enableRestoreView11Compatibility.
it does not at all restore the original view state.
It basically recreates the view and all associated view scoped beans from scratch and hereby thus losing all of original data (state).
Better use stateless views or <o:enableRestorableView> instead so you can manage it on a specific view only instead of on all views.
As to the why JSF needs to save view state, head to this answer: [Why JSF saves the state of UI components on server?
In order to avoid ViewExpiredException when e.g.
The javax.faces.ViewState hidden field of the cached page may contain a view state ID value which is not valid anymore in the current session.
If you're (ab)using POST (command links/buttons) instead of GET (regular links/buttons) for page-to-page navigation, and click such a command link/button on the cached page, then this will in turn fail with a ViewExpiredException.
In order to avoid ViewExpiredException when refreshing the current page when the state saving is set to server, you not only need to make sure you are performing page-to-page navigation exclusively by GET (regular links/buttons), but you also need to make sure that you are exclusively using ajax to submit the forms.
If you're submitting the form synchronously (non-ajax) anyway, then you'd best either make the view stateless (see later section), or to send a redirect after POST (see previous section).
Having a ViewExpiredException on page refresh is in default configuration a very rare case.
It can only happen when the limit on the amount of views JSF will store in the session is hit.
So, it will only happen when you've manually set that limit way too low, or that you're continuously creating new views in the "background" (e.g.
See also [com.sun.faces.numberOfViewsInSession vs com.sun.faces.numberOfLogicalViews (hyper-link)] for detail on that limit.
When you want to handle an unavoidable ViewExpiredException after a POST action on an arbitrary page which was already opened in some browser tab/window while you're logged out in another tab/window, then you'd like to specify an error-page for that in web.xml which goes to a "Your session is timed out" page.
See also [Session timeout and ViewExpiredException handling on JSF/PrimeFaces ajax request (hyper-link)].
java.lang.Exception or java.lang.Throwable, otherwise all exceptions wrapped in ServletException such as ViewExpiredException would still end up in the general error page.
See also [ViewExpiredException shown in java.lang.Throwable error-page in web.xml (hyper-link)].
A completely different alternative is to run JSF views in stateless mode.
This way nothing of JSF state will be saved and the views will never expire, but just be rebuilt from scratch on every request.
You can turn on stateless views by setting the transient attribute of <f:view> to true:
This way the javax.faces.ViewState hidden field will get a fixed value of "stateless" in Mojarra (have not checked MyFaces at this point).
The consequence is that you cannot use view scoped beans anymore.
Note that the <f:view> does not necessarily need to be unique throughout the view and/or reside in the master template only.
It basically "extends" the parent <f:view> then.
You can even wrap the <f:view> in a <c:if> to make it conditional.
Note that it would apply on the entire view, not only on the nested contents, such as the <h:form> in above example.
[ViewExpiredException shown in java.lang.Throwable error-page in web.xml (hyper-link)]
[Session timeout and ViewExpiredException handling on JSF/PrimeFaces ajax request (hyper-link)]
I was getting this error : javax.faces.application.ViewExpiredException.When I using different requests, I found those having same JsessionId, even after restarting the server.
When our page is idle for x amount of time the view will expire and throw javax.faces.application.ViewExpiredException to prevent this from happening
one solution is to create CustomViewHandler that extends ViewHandler
and override restoreView method all the other methods are being delegated to the Parent
If you are using Richfaces, i have found that ajax requests inside of multipart forms return a new View ID on each request.
On each ajax request a View ID is returned, that is fine as long as the View ID is always the same.
If you get a new View ID on each request, then there is a problem and must be fixed.
It offers possibility for view sql history through phpmyadmin.pma_history table.
To view the past queries simply run this query in phpMyAdmin.
why dont you use export, then click 'Custom - display all possible options' radio button, then choose your database, then go to Output and choose 'View output as text' just scroll down and Go.
For Select queries (only), you can create Views, especially where you find yourself running the same select queries over and over e.g.
The main advantages of creating Views are:
You can create a view easily by simply clicking the "Create view" link at the bottom of the results table display.
Your View cannot be found in default locations.
Views should be in the same folder named as the Controller or in the Shared folder.
Either move your View to the MyAccount folder or create a HomeController.
If you don't want to move your View or create a new Controller you can check at this [link (hyper-link)].
This function may return a View() which would be by Convention named LoginRegister.cshtml and would be stored in the /Views/MyAccount/ folder.
/Views/MyAccount/LoginRegister.cshtml:  Your view file.
Be careful if your model type is String because the second parameter of View(string, string) is masterName, not model.
Check whether the View (.ASPX File) that you have created is having the same name as mentioned in the Controller.
In this case, the aspx file should be having the name MyView.aspx instead of GetView.aspx
In your LoginRegister action when returning the view, do below, i know this can be done in mvc 5, im not sure if in mvc 4 also.
If you've checked all the things from the above answers (which are common mistakes) and you're sure that your view is at the location in the exceptions, then you may need to restart Visual Studio.
I got this error because I renamed my View (and POST action).
Solution : Rename both GET and POST actions to match the View name.
In this case, the action method may throw a null reference exception resulting from a null model or view object.
Check the build action of your view (.cshtml file) It should be set to content.
In some cases, I have seen that the build action was set to None (by mistake) and this particular view was not deploy on the target machine even though you see that view present in visual studio project file under valid folder
I had copied a view "Movie" and renamed it "Customer" accordingly.
The resolution was this...I rename the Customer View to Customer1 and
  just created a new view and called it Customer....I then just copied
  the Customer1 code into Customer.
So within my View I was using a grid control that obtained data for the grid via an http request.
Turns out my return statement was 'return View(dataset);' instead of 'return Json(dataset);
In  Index.cshtml view file.I didn't close the statement at the end of the program.
I was sure there isn't a need of checking Controller ActionMethod code because I have returned the Controller method properly to the View.
So It has to be the view that's not responding and met with similar Error.
The last child view will overlay everything else.
FrameLayout is some kind of view stack.
You can define rules like View A has to align parent layout bottom, View B has to align A bottom to top, etc
Usually you set the content with setContentView(R.layout.your_layout) in onCreate (it will inflate the layout for you).
You can do that manually and call setContentView(inflatedView), there's no difference.
The view itself might be a single view (like TextView) or a complex layout hierarchy (nested layouts, since all layouts are views themselves).
After calling setContentView your activity knows what its content looks like and you can use (FrameLayout) findViewById(R.id.root_view) to retrieve any view int this hierarchy (General pattern (ClassOfTheViewWithThisId) findViewById(R.id.declared_id_of_view)).
Now any view you add under LinearLayout with android:id = "@+id/overlay" will appear as overlay with gravity = right on Linear Layout with  android:id="@+id/Everything"
The best way is [ViewOverlay (hyper-link)] , You can add any drawable as overlay to any view as its overlay since Android JellyBeanMR2(Api 18).
Add mMyDrawable to mMyView as its overlay:
Now I jsut used a LinearLayout instead of a TextureView, now it is working without any problem.
Gif preview -
If you end up needing to programmatically adjust view overlays, and those views happen to be buttons, make sure to set stateListAnimator to null in your xml layout file.
I believe their terminology is correct...although in real applications I find it can be very easy to blur the lines between model, view, and controller depending on your level of abstraction: one level's view may be a higher level's model.
To make their view classes interface with the model, they had to create a generic abstract interface to the model.
When talking about an MVC application you should not think about QAbstractItemModel or QListView.
If you want an MVC architecture for your whole program, Qt hasn't such a "huge" model/view framework.
But for each list / tree of data in your program you can use the Qt MVC approach which indeed has a controller within its view.
To put your models and views together, use own classes which then implement the business logic.
Qt's model/view approach and terminology:
Qt provides simple views for their models.
In Qt, it's up to you whether or not you include some of your business logic inside your model or put it outside, being a "view" on its own.
But if your data is more complex than strings, it's up to you how you want to represent the data via the Qt model/view interface.
I think Qt's model/view framework is only useful when you want to display simple data structures.
Especially if you want to model one single entry having different attributes (one instance of one class), Qt's model/view framework isn't the right way to separate logic from user interface.
To sum things up, I think Qt's model/view framework is useful if and only if your data is being viewed by one of Qt's viewer widgets.
It's totally useless if you're about to write your own viewer for a model holding only one entry, e.g.
How did I use Qt model/view within a (bigger) application?
We also created an outer view class called View holding the windows (widgets) which are connected to the models within Model.
Both Model and View classes themselves don't have anything to do with the Qt MVC.
From Qt's point of view, this logic classes would be views, since they "connect" to models (not "view" for the user, but a "view" for the business logic part of the application).
Since the Qt views already interpret user input like renaming and moving items, this wasn't needed.
But what we needed was an interpretation of user interaction which goes beyond the Qt views.
When someone comes up with such a framework, and finds a good way to keep "things" separated, they always feel obliged to have modules that they call "Model" and others that they call "View".
If you compare how the terms "Model" and "View" are used in these frameworks, and what responsibilities the classes in the "View", the "Model", and the "Controller" (if there is one) have, you will find that there are very big differences.
A good read is Martin Fowler's [overview (hyper-link)].
The view manages the graphical and/or textual output to the portion of the bitmapped display that is allocated to its application.
The controller interprets the mouse and keyboard inputs from the user, commanding the model and/or the view to change as appropriate.
Finally, the model manages the behavior and data of the application domain, responds to requests for information about its state (usually from the view), and responds to instructions to change state (usually from the controller).
In fact a Qt component "manages the graphical [...] output", and "interprets the mouse and keyboard inputs", so it could indeed be called merged View and Controller with respect to the definition above.
In my opinion, it is best to figure out what Qt really means when the terms "Model" and "View" are used and use the terms in their manner while we are programming with Qt.
The controller is the part of user visible controls that modify the model (and therefore indirectly modify the view).
Since MVC was invented, its distinction between controller and view has become increasingly tense.
Think about a text box: it both shows you some text and lets you edit it, so is it view or controller?
For example, items in it can have a background colour (a brush technically), which is a decidedly view-ish attribute!
So there's an argument that QAbstractItemModel is more like a view and your data is the model.
The truth is it's somewhere in between the classic meanings of view and model.
You can't call something on the entire viewModel, but on an individual observable you can call myObservable.valueHasMutated() to notify subscribers that they should re-evaluate.
Or you can just view the file directly:
I believe the best way to view revisions is to use a program/app that makes it easy for you.
Using the latest versions of [Subclipse (hyper-link)], you can actually view them without using the cmd prompt.
then you can view the newly created file_r666 with any viewer or comparison program, e.g.
Correct, when you drag a view controller object onto your storyboard in order to create a new scene, it doesn't automatically make the new class for you, too.
Having added a new view controller scene to your storyboard, you then have to:
Create a UIViewController subclass.
Choose a "Cocoa Touch Class":
[image]
And then select a unique name for the new view controller subclass:
[image]
Now hook up any IBOutlet and IBAction references for this new scene with the new view controller subclass.
To add new ViewController once you have have an existing ViewController, follow below step:
Search and select ViewController from object library at the
utility window.
Drag and drop it in background to create a new ViewController.
While entering the identifier u have not selected proper view controller, just check once if done repeat the procedure once more.
Not only the identifier in the segue must be set, in my case DrivingDetails, but also the identifier in my tableViewController must be set as DrivingDetails...check my picture:
I also removed the navigation view controller so now the 2 table view controllers are connected directly with a "push" animation.
you have to set the storyboardId(in this case the viewController is embedded in a Navigation controller:
class:your class name(ViewController)
In the Identity section
storyboard ID:your storyboard ID(viewController Name)
I found it ...
click on the view controller in storyboard, 
click the third icon from left on the vc attributes inspectors - the one where you set the call name
on that scereen it says 'identity' - mine was hidden , i had to click on the word identity
it then shows storyboardID - add the identifier from the code, done
Here the object of the storyboard created is not the main storyboard which contains our ViewControllers.
A few of my view controllers were missing the storyboardIdentifier attribute.
it is very simple select the respective view controller in the main story board and check the storyboardID if its present use it in the identidier of give a name and use it.
here my firstone is the storyboardID
let vc = self.storyboard?.instantiateViewController(withIdentifier: "firstone") as!
tabBarViewController
Sometimes people believe that the first one is the Storyboard ID and the second one the View Controller class name, so note the difference.
I had to delete the viewController and create a new one with new identifier.
Then open your project folder in any third party code editor like [VSCode (hyper-link)] and do a global search for the ViewController name throwing the error.
You have to register a listener to your ViewPager :
I found this by looking at the ViewPager.java source code in the [compatibility library (hyper-link)].
It is possible to save the currently active object (View, Fragment, ...) by overriding [PagerAdapter.setPrimaryItem (hyper-link)] method.
To get focused view I use this way:
When I inflate my view before add it on ViewPager I set tag to it.
You can add a tag to the created view in the instantiateItem method:
Later you can access the current selected view by:
My solution is based on reflection, which accesses the array list of all objects within the ViewPager and returns the current selected object in the ViewPager.
If you examine carefully, there are at most 3 views saved by ViewPager.
You can easily get the current view by
There's only ever 3 children inside the ViewGroup, so it boils down to:
Use a scripts section in the view and master layout.
Put all your scripts defined in your view inside a Scripts section of the view.
Views/Foo/MyView.cshtml:
Views/Shared/_Layout.cshtml
Go into Views\Shared_Layout.html and add the following
Assuming that you want to have the TextView always below the ImageView I'd use following layout.
If you want to have the TextView on top of the ImageView then simply leave out the android:layout_alignParentTop or set it to false and on the TextView leave out the android:layout_below="@id/imageview" attribute.
We can align a view in center of the FrameLayout by setting the layout_gravity of the child view.
To center a view in Framelayout, there are some available tricks.
The simplest one I used for my Webview and Progressbar(very similar to your two object layout), I just added android:layout_gravity="center"
adding android:layout_gravity="center"in the child views.
I centered a CustomView and a TextView on a FrameLayout like this
Go to "View" then select "Property Manager"
This will create a new table A with the contents of your view.
If you only need your CSS to be applied to one specific view, I'm using this handy snippet inside my controller:
It's not common to need this in the view itself, but you can access it like so:
Is model state available in the view?
And here's what it looks like in preview:
[ (hyper-link)]
I have written a detailed explanation about using GeometryReader, view preferences and anchor preferences.
For further information on how they work, check this article I posted: [https://swiftui-lab.com/communicating-with-the-view-tree-part-1/ (hyper-link)]
In fact, the WWDC2019 session 237 (Building Custom Views with SwiftUI), explains that views communicate their sizing continuously.
The width, however, I'm not so proud of... ;-) It requires DispatchQueue to avoid updating the view while being displayed.
My first solution works, but I was not too proud of the way the width is passed to the underline view.
It is much more than a modifier that can let you decorate the background of a view.
TextGeometry is a custom view that has a parent with the same size as the text view.
In my implementation of TextGeometry I use GeometryReader, to get the geometry of the parent, which means, I get the geometry of the Text view, which means I now have the width.
There's zero documentation about them, but after a little experimentation, I think preferences are something like "view attributes" if you like.
I created my custom PreferenceKey, called WidthPreferenceKey and I use it in TextGeometry to "attach" the width to the view, so it can be read higher in the hierarchy.
First, to answer the question in the title, if you want to make a shape (view) fit to the size of another view, you can use an .overlay().
The .overlay() gets offered its size from the view it is modifying.
The underline view is is a 2 point high Rectangle, put in an .overlay() on top of the HStack.
The underline view is aligned to .bottomLeading, so that we can programmatically set its .padding(.leading, _) using a @State value.
The underline view's .frame(width:) is also set using a @State value.
The MoveUnderlineButton uses a GeometryReader to find its own width and minX in order to set the respective values for the underline view
The MoveUnderlineButton is set as the .overlay() for the Text view containing the text of that button so that its GeometryReader inherits its size from that Text view.
You can use the  prepareForSeguemethod in Vc1 as an  embed segue occurs when the ContainerViewController is made a child.
So first off, name the segue(link) in the storyboard that connects the container view to its first view controller.
Then in the view controller containing the container view add this method
This worked for me, your method would be slightly different inside the prepareForSegue if your first viewconroller wasn't a navigation controller.
To access parent view controller from within your child view controller you must override didMoveToParentViewController:
The parent argument in
    both of these methods is nil when a child is being removed from its parent; otherwise it is equal to the new
    parent view controller.
addChildViewController: will call [child willMoveToParentViewController:self] before adding the
    child.
However, it will not call didMoveToParentViewController:.
It is expected that a container view
    controller subclass will make this call after a transition to the new child has completed or, in the
    case of no transition, immediately after the call to addChildViewController:.
Similarly
    removeFromParentViewController: does not call [self willMoveToParentViewController:nil] before removing the
    child.
Container subclasses will typically define
    a method that transitions to a new child by first calling addChildViewController:, then executing a
    transition which will add the new child's view into the view hierarchy of its parent, and finally will call
    didMoveToParentViewController:.
Similarly, subclasses will typically define a method that removes a child in
    the reverse manner by first calling [child willMoveToParentViewController:nil].
In your containerViews ViewController:
In your parent ViewController:
Use property parentViewController as self.parentViewController
Swift - An alternative is to create a reference in parent UIViewController (vc1) to child/subview UIViewController (vc2) and in vc2 to vc1.
Assign the references in parent(vc1) viewDidLoad() example below.
Parent UIViewController vc1:
Child UIViewController vc2:
In the Storyboard remember to set in Identity Inspector the parent UIViewContoller class to vc1 and child UIViewContoller class to vc2.
Ctrl+drag from Container View in vc1 UIViewController  to vc2 UIViewController and select Embed.
And now you can decide whether to add a middleware (interceptor) or just parse HTTP_X_FORWARDED_FOR in certain views.
The UIViewController docs are pretty clear on when and when not to call willMove/didMove methods.
Check out the ["Implementing a Container View Controller" (hyper-link)] documentation.
The docs say, that if you do not override addChildViewController, you do not have to call  willMoveToParentViewController: method.
However you do need to call the didMoveToParentViewController: method after the transition is complete.
"Likewise, it is is the responsibility of the container view controller to call the willMoveToParentViewController: method before calling the removeFromParentViewController method.
The removeFromParentViewController method calls the didMoveToParentViewController: method of the child view controller."
When your custom container calls the addChildViewController: method, it automatically calls the willMoveToParentViewController: method of the view controller to be added as a child before adding it.
So you don't need the [vc willMoveToParentViewController:self] call.
It is done automatically when you call [self addChildViewController:vc].
[For removing view controllers: (hyper-link)]
The removeFromParentViewController method automatically calls the didMoveToParentViewController: method of the child view controller after it removes the child.
Presumably this call is [oldVC didMoveToParentViewController:nil].
onView(withId(R.id.recycler_view)).perform(RecyclerViewActions.scrollToPosition(5));
Then select the view based on contentDescription.
onView(withContentDescription("delivery button row 5")).perform(click());
Content Description is a great way to use Espresso's onView and make your app more accessible.
You can do it with customize view action.
You can click on 3rd item of recyclerView Like this:
Do not forget to provide the ViewHolder type so that inference does not fail.
All of the answers above didn't work for me so I have built a new method that searches all of the views inside a cell to return the view with the ID requested.
Then final you can use this on Recycler View by doing the following:
You could use a callback to return the view if you want to do something else with it, or just build out 3-4 different versions of this to do any other tasks.
I kept trying out various methods to find why @blade's answer was not working for me, to only realize that I have an OnTouchListener(), I modified the ViewAction accordingly:
You should use UITableViewScrollPositionBottom instead.
The solution that worked for me was implement the following code in viewWillAppear:
The BOOL ivar initialLoad is set to TRUE in viewDidLoad.
I have a custom subclass of UIViewController and added an instance variable _tableView as a subview of its view.
I positioned _tableView using Auto Layout.
I tried calling this method at the end of viewDidLoad and even in viewWillAppear:.
So, I added the following method to my custom subclass of UIViewController.
Calling [self tableViewScrollToBottomAnimated:NO] at the end of viewDidLoad works.
Unfortunately, it also causes tableView:heightForRowAtIndexPath: to get called three times for every cell.
It needs to be called from viewDidLayoutSubviews
[self.tableViewInfo scrollRectToVisible:CGRectMake(0, self.tableViewInfo.contentSize.height-self.tableViewInfo.height, self.tableViewInfo.width, self.tableViewInfo.height) animated:YES];
My understanding of this is, calling the scroll method in the current thread guarantees that the scroll offset is set immediately, before the view is displayed.
When I was dispatching to the main thread, the view was getting displayed for an instant before the scroll took effect.
(Also NB you need the viewHasAppeared flag because you don't want to goToBottom every time viewDidLayoutSubviews is called.
These functions should be called after the tableview has been loaded:
Use this simple code to scroll tableView bottom
If you are setting up frame for tableview programmatically, make sure you are setting frame correctly.
In swift 3.0 
If you want to go any particular Cell of tableview Change cell index Value like change "self.yourArr.count" value .
The safest way to scroll at the bottom of tableView is to use "tableView.scrollRectToVisible".
Use after calling tableView.reloadData().
Steps:->
1- When ViewDidLoad(), Then it will scroll
2- customTableView is IBoutlet's tableView
var data: [String] = ["Hello", "This","is","Your","World"]
An indexer that gets on a single-dtyped object is almost always a view (depending on the memory layout it may not be that's why this is not reliable).
It lets you monitor and view network requests within the app from a custom debug screen.
You partial looks much like an editor template so you could include it as such (assuming of course that your partial is placed in the ~/views/controllername/EditorTemplates subfolder):
If you don't want to duplicate code, and like me you just want to show stats, in your view model, you could just pass in the models you want to get data from like so:
Then, in your controller just run your queries on the respective models, pass them to the view model and return it, example:
isBeingPresented is true when the view controller is being presented and false when being pushed.
This will let you know if viewController is presented or pushed
DEViewController.h file:
Also, in DEViewController we could add a fallback to "checking" if the aforementioned property equals to SSViewControllerPresentationMethodUnspecified:
In order to handle the case that the current view controller is pushed while the navigation controller is presented modally, I have added some lines of code to check if the current view controller is the root controller in the navigation stack .
Assuming that all viewControllers that you present modally are wrapped inside a new navigationController (which you should always do anyway), you can add this property to your VC.
For some one who's wondering, How to tell ViewController that it is being presented
Now in A view controller, tell B if it is being presented/pushed by assigning presentationStyle
[code snippet]
Usage in B View Controller
[code snippet]
Swift 5
Here is solution that addresses the issue mentioned with previous answers, when isModal() returns true if pushed UIViewController is in a presented UINavigationController stack.
These cases are VC(view controller) is the root VC of app window, VC is added as child to parent VC.
It tries to return true only if the viewcontroller is modally presented.
I believe your question is to change only width of view dynamically, whereas above methods will change layout properties completely to new one, so I suggest to getLayoutParams() from view first, then set width on layoutParams, and finally set layoutParams to the view, so following below steps to do the same.
open your IIS (type inetmgr in run) and change your Application pool setting,To view large this Image Right Click Image and open image in new tab [image]
Use CTL+F7 to cycle through the Eclipse Views, select one that is on the hidden detached view group, then press ALT+<space>, M and use the keyboard arrows to position this window onto your active screen.
If you're just missing a view, you can use the menu item: Window->Show View->Console.
I could try to open files but not see them anywhere (the file would be successfully parsed by the "Outline" view).
I managed to return my gone view without resetting the perspective!
I opened workspace/.metadata/.plugins/org.eclipse.e4.workbench/workbench.xmi, searched for "outline" there (the view was Outline) and found it (precisely org.eclipse.ui.views.ContentOutline) inside a children tag which had an attribute visible="false".
I removed that attribute and also <tags>Minimized</tags> inside the children tag, saved the file, started Eclipse, and that was it, my view returned!
Tested under Windows 7 with "Console"-view
Select in menu Window -> Show View -> Console
Now just drag the view with mouse  to the main eclipse window.
I did Window->Perspective->Reset Perspective on all of my Perspectives within Eclipse Mars, and it did the trick in restoring all of my views.
Open Window -> Show View -> Console (activates the console window, but it's still hidden).
You can use the RedirectToAction() method, then the action you redirect to can return a View.
Then in your Index method, return the view you want.
I think it was because I needed "id" for my view by in the model it was called "ObjectID".
The simplest way is use return View.
Remember, the physical name of the "ViewName" should be something like ViewName.cshtml in your project, if your are using MVC C# / .NET.
My suggestion is try to use convertView = vi.inflate(R.layout.activity_friend_list_row, null); insted of convertView = vi.inflate(R.layout.activity_friend_list_row, parent, false); this may help you.
:- 
okey.. insted of accessing like this TextView friendsname  = (TextView) convertView.findViewById(R.id.friendsName); // title
    ImageView thumb_image = (ImageView) convertView.findViewById(R.id.list_image); // thumb image
 you have to use viewholder class in your adapter
you should init the convert view only if it is null
the goal is to recycle the already existing view in that list, not to init it each time you display it when scrolling the list for example.
Unconditional layout inflation from view adapter: Should use View Holder pattern (use recycled view passed into this method as the second parameter) for smoother scrolling.
It means that you need to use View Holder pattern in your Adapter.
The point of using View Holder is to reusing the views because inflating and using findViewById are slow.
you're not reusing the views but instead you always create new views.
Model must emit signals to notify views when its data changed.
dataChanged signal forces view to update specific cells, but not to create or remove cells.
layoutAboutToBeChanged and layoutChanged signals forces view to update everything.
signals about adding or removing rows and columns forces view to update accordingly.
Now, add this curve_shap.XML in your main view Layout.
the next code xml is just an example, the design or view is implemented here:
Dialog Fragment is the simplest way of creating a custom Alert Dialog.Follow the above code to create a custom view for your dialog and then implement it using Dialog Fragment.
Following is the code for creating custom view dialog with kotlin.
creating dialog and updating the text in the text view
HeaderView depends on the LayoutManager.
HeaderView in ListView creates a lot of complexity without any significant benefit.
There isn't an easy way like listview.addHeaderView() but you can achieve this by adding a type to your adapter for header.
Based on [this post (hyper-link)], I created a subclass of RecyclerView.Adapter that supports an arbitrary number of headers and footers.
It let's you create header View for any RecyclerView that uses LinearLayoutManager or GridLayoutManager with just a simple method call.
After - Override the method getItemViewTpe
***More Important
method onCreateViewHolder
method onBindViewHolder
in finish implements the ViewHolders class static
The decoration is also reusable since there is no need to modify the adapter or the RecyclerView at all.
The sample code provided below will require a view to add to the top which can just be inflated like everything else.
If you just have to display text and images this solution is for you—there is no possibility for user interaction like buttons or view pagers, since it will just be drawn to top of your list.
If there is no view to decorate, the decoration will not be drawn.
Please be sure to set a correct layout_height for your view.
The view gets measured and laid out, then it is drawn to the top of the first item.
You can achieve it using the library [SectionedRecyclerViewAdapter (hyper-link)], it has the concept of "Sections", where which Section has a Header, Footer and Content (list of items).
Probably [http://alexzh.com/tutorials/multiple-row-layouts-using-recyclerview/ (hyper-link)] will help.
It uses only RecyclerView and CardView.
here some itemdecoration for recyclerview
You can just place your header and your RecyclerView in a NestedScrollView:
In order for scrolling to work correctly, you need to disable nested scrolling on your RecyclerView:
Going to show you to make header with items in a Recycler view.
Cardview is used for decoration purpose.
you can create addHeaderView and use
adapter.addHeaderView(View).
This code build the addHeaderView for more then one header.
I hide the implementation details mechanisms (like add 1 to itemCount, subtract 1 from position) in an abstract super class HeadingableRecycleAdapter, by
implementing required methods from Adapter like onBindViewHolder, getItemViewType and getItemCount, making that methods final, and providing new methods with hidden logic to client:
onAddViewHolder(RecyclerView.ViewHolder holder, int position),
onCreateViewHolder(ViewGroup parent),
Maybe wrap header and recyclerview into a coordinatorlayout:
Using the above code, only the header layout is displayed as viewType is always 0.
I have implemented the same approach proposed by EC84B4 answer, but I abstracted RecycleViewAdapter and make it easily resuable by means of interfaces.
3) Factory for viewHolders (header/items):
1) IRecycleViewListHolder implementation:
2) IViewHolderBinderFactory implementation:
3) IViewHolderFactory  implementation:
: AssetItemViewHolder, AssetBasedListItemBinding, etc.
If you want the header to be easily reused across multiple lists, take a look at the version [1.2.0 (hyper-link)] of recyclerview library.
All you have to do is to define your header view layout and create a dummy Adapter with a single item
In Kotlin it takes literally a few lines
A standard persistence API is very convenient from a client point of view, making it relatively easy to switch one implementation with the other (although in practice it's not that simple because on large projects you'll have to use specific non-standard features anyway).
Depending how you want to implement it (if there was a specific location you wanted the scripts) you could implement a @section within your _Layout which would enable you to add additional scripts from the view itself, while still retaining structure.
If you don't mind it being "inline" with the view that was output, you can place the <script> declaration within the view.
If you are using Razor view engine then edit the _Layout.cshtml file.
You can achieve this by providing your menu item with an actionViewClass property in xml and then you will be able to get the pivot view u wanted.
Old question, but I ran into some issues with the actionViewClass attribute.
Calling findViewById(R.id.mnu_item) in onOptionsItemSelected will return a View anchor.
An update for anyone that want to find the menu view item for other reasons (like I wanted).
It's not the most efficient way, but it's the easiest way I've found to access the menu item's view.
Inorder to get reference Views of menu items we need to do this,
Don't use match_parent for height for your item view.
when you are creating row.xml for recyclerview should follow these things:
1) if your recyclerview is vertical then set height of recyclerview match_parent and row_item.xml height also match_parent
2) if your recyclerview is horizontal then set Width of recyclerview match_parent and row_item.xml Width also match_parent
for ex:-
Horizontal RecyclerView
Try changing the layout used in your item view to FrameLayout.
Can you associate child view controllers to a custom container view
  controller in Storyboard?
I think what you're asking here is how to connect a view controller in one scene to an outlet of a view controller in a different scene.
You're probably asking this because you want to pass some information from one view controller to another as you segue from one scene to the next.
The way to do this when you're working with storyboards is to override -prepareForSegue:sender: in one or both view controllers affected by the segue.
The UIStoryboardSegue object provided in the segue parameter has sourceViewController and destinationViewController properties, and also an identifier property.
You can use these properties to identify the segue that's about to transfer data between the view controllers.
iOS 5 allows multiple view controllers to be active in the same scene (although one should still be in charge), so a single scene in your storyboard might have several controllers.
The key to using multiple controllers in one scene (what I believe you are after here) is using the mysterious Object from the Objects list in IB to represent the other view controller and hooking up its outlets.
This answer [How to create custom view controller container using storyboard in iOS 5 (hyper-link)] should help I hope.
The storyboard deals with built-in container view controllers very nicely, displaying segues to child/root view controllers so that relationships are clearly shown.
It is also nice how the children and parent view controllers are separated into different scenes.
In my example, suppose I have a container view controller that acts like a tab bar controller with only two tabs, 'left' and 'right'.
I want to have a scene represent the parent view controller, and two separate scenes represent both the 'left' child view controller and the 'right' child view controller.
Even though it is impossible, it would be nice if I could create IBOutlets from the container view controller to its children in different scenes, and then when my container view controller is displayed set up the parent/child relationships according to the rules described the [UIViewController documentation (hyper-link)].
If we had references to our 'left' and 'right' child view controllers, then we could set up the relationships no problem.
The standard solution to this referencing problem is to create references to child view controllers by dragging in Object outlets into the container view controller's scene, and then specifying their class type as being instances of the child view controller classes.
First, suppose we have the following properties declared in our container class, ContainerViewController:
In our storyboard, select the scene representing the 'left' view controller.
In the attributes inspector, set the view controller's identifier property to "cvc_leftViewController" ("cvc_" refers to ContainerViewController, but really the identifier can be anything you want).
Do the same for the right view controller's scene, setting it's identifier to "cvc_rightViewController".
Now insert the following code into ContainerViewController's viewDidLoad method:
When ContainerViewController is loaded from the storyboard, it will go grab the 'left' and 'right' view controllers from their respective scenes and set references to them via its properties.
Now that you have control of the child view controller instances, you can set up the parent/child relationships however you like.
To learn how to do that properly refer to the [UIViewController documentation (hyper-link)].
Edit: Although this is completely unnecessary and doesn't mean anything, if you really really want to have the storyboard display connections from your container to your child view controllers just like Apple's built-in containers, just use my method above and then set up segues directly between the container scene to the child scenes, and simply never perform those segues.
Beyond that, it would required that every subsequent VC is customized to save the nesting view controller in prepareForSegue.
For me, the simplest and most general solution is to lazily descend the view controller hierarchy
In my simple test project, I added the following lines to viewDidLoad:
and childViewControllerWithId is defined as:
If you did not have repeated instances of the same view controller, then using type would be easier.
I have just copied it from there, but I hope it will help someone as much as it helped me when implementing horizontal RecyclerView and wrap_content height (should work also for vertical one and wrap_content width)
An alternative to extend LayoutManager can be just set the size of the view manually.
other than that, it will make the recyclerview non scrollable and only will show subset of the data.
Specifically, we shouldn't use View.MeasureSpec.UNSPECIFIED for both the width and height when calling measureScrapChild as that won't properly account for wrapped text in the child.
With the release of Support Library version 23.2, RecyclerView now supports that!
This allows a RecyclerView to size itself based on the size of its contents.
This means that previously unavailable scenarios, such as using WRAP_CONTENT for a dimension of the RecyclerView, are now possible.
This allows a RecyclerView to size itself based on the size of its contents.
This means that previously unavailable scenarios, such as using WRAP_CONTENT for a dimension of the RecyclerView, are now possible.
Simply wrap the content using RecyclerView with the Grid Layout
Image:
[Recycler as GridView layout (hyper-link)]
Other idea is to override onInterceptTouchEvent method on the root view for your Activity.
The touch event goes from the front most view on the screen (where the touch event occurred) down the stack of views calling the onTouch method until any of the views return true, indicating that the touch event was consumed.
As many of the view consumes the touch event by default (that is the case of EditText or TextView, for instance), the event does not get to the Activity's root View onTouch method.
But, before do this traversal, the touch event travels another path, going from the root view down the view tree until it gets to the front most view.
What you need to know is that you can override this method on the root view for your Activity, and put there the code to hide the keyboard when necessary.
EDIT: The getFields() method is just a method that returns an array with the textfields in the view.
It is not perfect, The drag event time is only based on heuristics so sometimes it doesnt hide when performing long clics, and I also finished by creating a method to get all the editTexts per view; else the keyboard would hide and show when clicking other EditText.
You can write a method that iterates through every View in your activity, and check if it is an instanceof EditText if it is not register a setOnTouchListener to that component and everything will fall in place.
That is all, just call this method after you setContentView in your activity.
and call setupUI(findViewById(R.id.parent)), that is all.
Then extend a class from Activity and define setupUI(findViewById(R.id.main_parent)) Within its OnResume() and extend this class instead of ``Activity in your program
But instead of register an OnTouchListener for every view, that give a poor performance, I registered the OnTouchListener for just the root view.
Since the event bubbles until it's consumed (EditText is one of the views that consumes it by default), if it arrives to the root view, it's because it wasn't consumed, so I close the soft keyboard.
In my onCreate method I attach a single onTouchListener to the root view but send the view rather than activity as an argument.
I don't like to register/unregister all EditTexts with every view-change (could be quite a lot of viewchanges and edittexts in complex hierarchies)
Side note: Additionally I assign these attributes to the root view making it possible to clear focus on every input field and preventing input fields gaining focus on activity startup (making the content view the "focus catcher"):
This way you don't have to iterate over all views.
Make the parent view(content view of your activity) clickable and focusable by adding the following attributes
[code snippet]
As pointed out in one of the comments below, this might not work if the parent view is a ScrollView.
For such case, the clickable and focusableInTouchMode may be added on the view directly under the ScrollView.
my solution is same as i implemented in ios setontouch listener to Main view
On the down action, we make note of the currently focused view (if any) and whether the touch was inside it, saving both those bits of info for later.
On the up action, we first dispatch, to allow another view to potentially take focus.
If after that, the currently focused view is the originally focused view, and the down touch was inside that view, then we leave the keyboard open.
If the currently focused view is different than the originally focused view and it's an EditText, then we also leave the keyboard open.
when the focused EditText is at the bottom of the screen and you long-click on some text to select it, the EditText keeps focus and therefore the keyboard opens like you want, because we do the "touch is within view bounds" check on the down action, not the up action.
First add  to root view of layout xml:
    android:clickable="true"
    android:focusableInTouchMode="true"
context.getCurrentFocus()   doesn't need specifying specific EditText view..
This way can be applied for Activity or Fragment and it's also compatible with ScrollView.
We put ScrollView as a top-level layout, declare id parentView for the LinearLayout inside and add two attributes like below:
Then register an OnFocusChangeListener for the root view (write in onCreate method) to make all EditText in Activity affected:
findViewById(android.R.id.content)
This gives us the root view of the current group(you mustn't have set the id on root view).
I managed to hide the keyboard from inside onItemClick AutoCompleteTextView
A more Kotlin  & Material Design way using [TextInputEditText (hyper-link)] (this approach is also compatible with [EditTextView (hyper-link)])...
1.Make the parent view(content view of your activity/fragment) clickable and focusable by adding the following attributes
2.Create an extension for all View (inside a ViewExtension.kt file for example) :
Implement the method onFocusChanged to hide keyboard when the view is not focused :
4.Just call your brand new custom view in your XML :
now set onclick attribute of the parent layout of the activity to above method hideKeyboard either from the Design view of your XML file or writing below code in Text view of your XML file.
No need to iterate all the views.
you can implement View.onClickListener and override onClick method and set this onclicklistener to the Layout
Instead of iterating through all the views or overriding dispatchTouchEvent.
Will work even when EditText is inside the scrollView.
You can try using a custom view and a Transition.
I reused the Transition.moveAndFade from the [Animation Views and Transition (hyper-link)] tutorial.
You can test it - in the simulator, not in the preview - like this:
There is now a way to programmatically pop in a NavigationView, if you would like.
You could programmatically trigger the showSelf property in the DetailView any way you like.
That could be an EmptyView(), thereby creating an invisible segue.
This exact same concept works to dismiss Modal views presented with the .sheet modifier.
First, declare the @Environment which has a dismiss method which you can use anywhere to dismiss the view.
Alternatively, if you don't want to do it programatically from a button, you can emit from the view model whenever you need to pop.
I recently created an open source project called swiftui-navigation-stack ([https://github.com/biobeats/swiftui-navigation-stack (hyper-link)]) that contains the NavigationStackView, an alternative navigation stack for SwiftUI.
For example, you can easily push and pop views programmatically.
NavigationStackView gives your hierarchy access to a useful environment object called NavigationStack.
You can use it to, for instance, pop views programmatically as asked in the question above:
In this example I use the PushView to trigger the push navigation with a tap.
Then, in the View2 I use the environment object to programmatically come back.
FirstView
SecondView
Here "LoginViewController" is the storyboardID specified in storyboard.
Don't forget to set the name of your ViewController in the transition method.
Your need to have one view per viewController.
Connect each ViewController to each view in storyBoard.
If you want to navigate to Controller on StoryBoard with Identifier "newViewController", then do this:
Present an exist UIViewController
Push an exist UIViewController
Remember that you can put the UIViewController Identifier following the next steps:
Select your UIViewController
Put the Identifier for your UIViewController
If you are building UI without drag and drop (without using storyboard)
and want to navigate default page or ViewController.swift to another page?
after creating second page come back to first page (ViewController.swift)
Here make a button in viewDidLoad method
now define buttonAction method outside of viewDidLoad() in same class
now drag and drop a navigationcontroller and delete tableview which comes with navaigation controller.
select navigationcontroller press control on keyboard and drag it in to another scene on storyboard that is ViewController.
This mean that your viewcontroller become root viewcontroller 
hope this help you
Thanks
in main.storyboard , drag and drop navigationcontroller,
You can do navigation between view controllers using code with the help of storyboard and storyboardId of the view controller.
In addition to the good answers above to set the navigation view controller on top of your screen on your app, you can add it to your AppDelegate.swift file inside the block as follows
ViewController to NextViewcontroller without Segue Connection
Change our Controller Name RegisterNewUserViewController
If we add Progress below the Button view it show the view which is in the bottom at the top of the other view.
You can simply define the view which you want on top after the one which should appear below it.
So if you want to show a view on top of a Button, it should have an elevation of at least 2dp.
In the updated Layout Editor it's now much easier to choose which View will be in front as demonstrated in the Android Studio release notes
Even easier, 
If you drag the View up (copy paste or from the Component Tree in the layout editor)  it will get lower priority (so it will be behind the other views)
higher than view that you want to below .
2 - make button TranslateZ to 0 so the views Appear above each other in order in your Constraint Layout , you can achieve this by Setting Style to button
If for some reason you can't do that, make sure the view you want on top is mentioned after other views.
For example, if I want progressBar on top of ImageView:
Using elevation is working but it has some limitations like it requires api level 21+
and also if elevation is less(in my case it was 2dp) then view become invisible while doing long click therefore you can use a trick simply replace button with "View" or "TextView" you can do everything with these views which can be done with buttonView
Try setting clickable property to false using setClickable(false) after setVisibility(View.GONE)
What I expect is happening is that you make a view invisible, but that views children still respond to clicks (ie your view is a ViewGroup).
Do you maybe use animations to show/hide the views?
If you set setVisibility(View.GONE) after some animation (fade out, for example), then try clearing the animation with clearAnimation().
Yes,mview.clearAnimation() have some issuses but amination.setFillAfter(false);and mview.setClickable(false); WORKS perfect .
if have a animation at the view, you should call view.clearAnimation.
For those that did the answers above and still didn't solve their problems, I recommend removing the view from the parent view.
If you need display the view again, just make a copy and add it to the parent view.
This might seem overkill but I was hiding / showing whole view groups in your case it might be a button, textview or image, this solution will still work.
(void)viewWillAppear:(BOOL)animated;
(void)viewDidDisappear:(BOOL)animated;
(void)viewDidLoad;
And when you want to pop the view and push another one:
There's a nice example of switching views in Chapter 6 of Beginning iPhone Development.
SwitchViewController has the code to change views programatically.
You can begin from the simplest removeFromSuperview/insertSubview and add code to it little by little.
I wanted to switch between two complementary view controllers, but I wanted the switch to be animated (built in animations work fine), and I wanted it to be compatible with storyboards if possible.
For taking advantage of built-in transition, UIView's [+transitionFromView:toView:duration:options:completion: (hyper-link)] method works beautifully.
But, it only transitions between views, not view controllers.
For the transition to be between whole view controllers, not just views, creating a custom UIStoryboardSegue is the way to go.
Whether or not you use storyboards, this approach lets you encapsulate the whole transition and manage the passing of relevant information from one view controller to the next.
As a bonus, it also replaces the old view controller with the new if it is in a UINavigationController stack.
You can pass data to the view using the with method.
You can also pass an array as the second argument after the view template name, instead of stringing together a bunch of ->with() methods.
For instance if you have a bunch of variables that every controller needs to pass to the view, and you want to combine this with an array of variables that is unique to each particular controller (using array_merge, for instance), you might compute $variables (which contains an array!
It's probably worth mentioning that as of Laravel 5, passing data to the view is now done like this:
If you want to pass just one variable to view, you may use
In view
If you want to pass multiple variables to view, you may use
In view
You can pass data to the view using the with method.
pass the object to the view
Here is an example:
You can also write for passing multiple data from your controller to a view
You can use the following to pass data to view in Laravel:
Here data is a folder in view and index is the file with extension index.blade.php
In view you can call the arrays like this
For any one thinking it is really tedious in the case where you have tons of variables to pass to a view or you want the variables to be accessible to many views at the same, here is another way
And now in the view, at the top, simply do
Then you can now call your variable from any where in the view for example
And you access this variable to view as $var1,$var2,$var3
You can pass your table data to view using compact.
This will revert the view to the full solution.
The best way to view and manage your Android app database is to use the library [DatabaseManager_For_Android (hyper-link)].
You can view the tables in your app database, update, delete, insert rows to you table.
You can view the 5 minute demo, [Database Manager for Android SQLite Database  (hyper-link)].
Click it and you will see a Questoid Sqlite Manager tab open up to view your data.
Although this doesn't view the database on your device directly, I've published a simple shell script for dumping databases to your local machine:
And you can view you database in Chrome from chrome://inspect
Then you simply can view the DB with [aSQLiteManager (hyper-link)] for instance.
Try [AndroidDBvieweR (hyper-link)]!
You always start with tables first, and then your usage pattern dictates whether you need views or materialized views.
A view is like a stored query for future use, if you're frequently joining or filtering the same tables the same way in multiple places.
A materialized view is like a combination of both: it's a table that is automatically populated and refreshed via a view.
You'd use this if you were using views, and want to pre-join or pre-aggregate the rows to speed up queries.
On the other
  hand, when you query a VIEW, you are basically querying another query
  that is stored in the VIEW's definition.
Between the two there is MATERIALIZED VIEW - it's a VIEW that has a
  query in its definition and uses this query to fetch the data directly
  from the storage, but it also has it's own storage that basically acts
  as a cache in between the underlying TABLE(s) and the queries
  operating on the MATERIALIZED VIEW.
Add this to the UIWebView delegate:
One quick comment to user306253's answer: caution with this, when you try to load something in the UIWebView yourself (i.e.
You might also want to handle the UIWebViewNavigationTypeFormSubmitted and UIWebViewNavigationTypeFormResubmitted types.
The other answers have one problem: they rely on the action you do and not on the link itself to decide whether to load it in Safari or in webview.
In my case I want to make sure that absolutely everything in the web view opens Safari except the initial load and so I use...
If your page loads URLs via Javascript, the navigationType will be UIWebViewNavigationTypeOther.
Finally UIWbView is dead and Apple will not longer accept it.
Apple started sending email to all the App owner who are still using UIWebView:
Deprecated API Usage - Apple will stop accepting submissions of apps that use UIWebView APIs.
Apple takes User Privacy very seriously and it is obvious that they won’t allow insecure webview.
So do remove UIWebView from your app as soon as possible.
don't use try to use UIWebView in new created app and I  Prefer to using WKWebView if possible
ITMS-90809: Deprecated API Usage - Apple will stop accepting
  submissions of apps that use UIWebView APIs .
See
  [https://developer.apple.com/documentation/uikit/uiwebview (hyper-link)] for more
  information.
UIWebView and UIWebViewDelegate are deprecated.
Use [WKWebView (hyper-link)] and [WKNavigationDelegate (hyper-link)]
Check View=>Editor Layout
The menu entry with the shortcut given above is View=>Editor Layout=>Flip Layout
It will split the view automatically, either horizontally, vertically, or even into three rows.
There are a predefined set of editor layouts in the new View > Editor Layout menu:
Search View: Move editor into Next Group
This means the layout you usually set via setContentView() is a child of this layout.
addContentView() adds just another child, therefore it behaves like a FrameLayout (which means it adds new UI elements above existing ones).
You can check this by using a tool called [hierachyviewer (hyper-link)] from your ANDROID_SDK\tools folder.
This is the layout before calling addContentView(), my activity consists of the default FrameLayout, holding a LinearLayout with a Button (my layout here).
After adding a TextView via addContentView() it looks like this.
It sounds like perhaps the class is not the UITableViewDelegate for that table view, though UITableViewController is supposed to set that automatically.
You may have forgot to implement UITableViewDelegate protocol, or there's no delegation outlet between your class and your table view.
You might have a UIView inside your row that is a first responder and takes your clicks away.
I know is old and the problem was resolved, but a had similar problem, I thought that the problem was with my custom UITableViewCell, but the solution was completely different - I restart XCode :) and then works ok !
I had built the bones of the view in IB (just a View and a TableView) and the delegate wasn't set.
It must be return indexPath, else -tableView:didSelectRowAtIndexPath: is not being called.
I looked in IB and saw that my delegate WAS set, but it was set incorrectly to VIEW instead of File's Owner (right click on table view to see where delegate is pointing to).
I have a tableViewController that is my "base" controller and then I create subclasses of this controller.
I was writing all my code in the tableView:didSelectRowAtIndexPath routine in the "base" class.
In case you have the same problem as me: 
Apparently, this method won't be called if your tableView is in edit mode.
Via this question: [When editing, `UITableView` does not call didSelectRowAtIndexPath ??
If you have automatic reference counting (ARC) turned on, you may find that even after assigning your controller as a delegate of the view, the view's messages to the controller are not being received because ARC is deleting the controller.
Apparently the UITableView's delegate pointer does not count as a reference for the ARC, so if that is the only reference to it, the controller will be dealloc'd.
(Particularly when creating a UITableView programmatically)
Make sure the tableView can respond to selection by setting [tableView setAllowsSelection:YES]; or removing any line that sets it to NO.
I had a Custom UITableViewCell and there was a button covering the whole cell, so when the touch happened, the button was selected and not the cell.
Remember to set the datasource and delegate in the viewDidLoad method as follows:
problem was in view.
I  removed tab gesture from view.
You should set your segues at the view controller instead.
Another possible cause seems to be that the UITableView is embed in a UIScrollView.
I had this problem today because I inadvertently had a scroll view instead of a normal view as the root view of my controller.
I have a table view inside a cell of another table view.
I decided to make an enclosing view that contains the inner table view, among other things.
I called this view contentView and hooked it up in the xib.
Turns out that UITableViewCell already has a contentView and does weird things with it.
The issue resolved itself when I renamed the property to mainContentView and reconnected the view to this renamed property.
I had put a UITapGestureRecognizer on my table view to dismiss the keyboard which prevented didSelectRowAtIndexPath: from being called.
Take care about the UITableView properties in the storyboard, what happened in my case was that I had the combox in the storyboard selected as "Selection: Single Selection", that does not allow the method didSelectRowAtIndexPath run.
Moreover you can check in the function of UITapGestureRecognizer selector if the tapped is UITableViewCell or not.
I just had this and as has happened to me in the past it didn't work because I didn't pay attention to the autocomplete when trying to add the method and I actually end up implementing tableView:didDeselectRowAtIndexPath: instead of tableView:didSelectRowAtIndexPath:.
In my case, I dynamically calculate the height of the TableView's SuperView at load time.
Due to a miscalculation, the TableView was positioned outside of the SuperView.
The TableView was drawn fine, however all interaction was disabled (and didSelectRowAtIndexPath was never called).
Very hard to detect, since there is no visual indication that the TableView is not "accessible".
I set delegate and dataSource for tableView and this solved my case.
The cell included UITextView outlet in readonly mode.
I realised that the problem was the collection view had allowsMultipleSelection set to TRUE.
Make sure you implemented tableView:didSelectRowAtIndexPath and not tableView:didDeSelectRowAtIndexPath
When the table view is first displayed, you may find some of the cells
  are not sized properly.
But when you scroll the table view, the new
  cells are displayed with correct row height.
To workaround this issue,
  you can force a reload after the view appears:
Even though the table view was rendering correctly, touch handling (specifically hitTest of UITableView) seemed to be subject to the above-mentioned bug.
I had a UIImageView covering the whole cell (as a background).
By default a UIImageView has user interaction disabled.
By enabling the imageviews user interaction delegate method -didSelectRowAtIndexPath:  was called again.
Setting it to "Single Selection" made my table view cells selectable again.
In my case the problem was I had a UITableViewCell subclass and I'd implemented these two methods:
touchesBegan:withEvent: & touchesEnded:withEvent to handle a fancy animation on touch.
If you added a gestureRecognizer on top of the UITableView, didSelectRowAtIndexPath will not get called.
So you need to use gestureRecognizer delegate method to avoid touch in particular view.
Turns out my issue was that, in code, a superclass was adding a full-screen "error view" that was not hidden, but transparent.
However, because it was over the tableview and "user action" was set to YES, it was intercepting my touches on the tableview.
I diagnosed this using Xcode's cool "Debug View Hierarchy" button.
If your table view is in editing mode (eg.
[tableView setEditing:YES animated:NO];), you need to set tableView.allowsSelectionDuringEditing = YES;
but if you want to make UITableViewnot highlighted on clicking then you should make changes in UITableViewCell properties.
Add @interface ExampleViewController () <UITableViewDelegate, UITableViewDataSource>
If you are calling that method from some kind of asynchronous method (eg: a network request of some sort), the table view may or may not respond properly (in some cases the app can even crash).
Check if your viewController has following method:
@nonobjc func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
In my case, didSelctRowAtIndexPath not calling is due to that I have selected none in the Selection property of tableView, set to single selection solved my problem
I had new segue for my detailViewController linked directly to my tableCell in StoryBoard which caused this.
So I had to remove that segue from my cell and linked it with the UITableViewController itself.
you must check this 
selection must be single selection and editing must be no seleciton during edition
and you change setting in uttableviewcell properties also
you edit in table view cell 
style must be custom and identifier must be Rid 
and section is none
In my case tapgesture was added for the view where tableview got placed, which is eating the user interaction of UITableview like  didselect.
After disabling  tapgesture for the view, didselect delegate was triggered.
I had this issue, when the class name of my TableViewController had been set incorrectly in the Interface Builder.
Add the following fields to ImageView:
To display original image size in Imageview write down following.
android:layout_height="wrap_content" and android:adjustViewBounds="true" do the job.
Check the WebView tutorial [here (hyper-link)].
I was facing the same problem and I found the solution 
[Android's official Documentation about WebView (hyper-link)]
Here is my onCreateView() method and here i used two methods to open the urls 

Method 1 is opening url in Browser and 

Method 2 is opening url in your desired WebView.
If you're using webChromeClient I'll suggest you to use webChromeClient and webViewClient together.
[https://example.com/example/ (hyper-link)] (with / at the end) gets opened in the webView
See my answer [Dismissing a Presented View Controller (hyper-link)]
in which I recommend this method is more clearly written:
You should use a delegate to send the correct message back to MainViewController from ViewController1, so that mainVC can dismiss VC1 and then present VC2.
In Apple's View Controller Programming Guide they have [this to say (hyper-link)]:
Dismissing a Presented View Controller
When it comes time to dismiss a presented view controller, the preferred approach is to let the presenting view controller dismiss it.
In other words, whenever possible, the same view controller that presented the view controller should also take responsibility for dismissing it.
Although there are several techniques for notifying the presenting view controller that its presented view controller should be dismissed, the preferred technique is delegation.
If you really think through what you want to achieve, and how you are going about it, you will realise that messaging your MainViewController to do all of the work is the only logical way out given that you don't want to use a NavigationController.
In practice Apple's advice is a little extreme... in normal cases, you don't need to make a dedicated delegate and method, you can rely on [self presentingViewController] dismissViewControllerAnimated: - it's when in cases like yours that you want your dismissing to have other effects on remote objects that you need to take care.
After asking the presenting controller to dismiss us, we have a completion block which calls a method in the presentingViewController to invoke VC2.
Does self.presentingViewController mean anything any more?
Tight coupling
You are hard-wiring your viewController structure together.
For example, if you were to insert a new viewController before mainVC, your required behaviour would break (you would navigate to the prior one).
mainVC's presentedViewController property
VC2's presentingViewController property
I think you misunderstood some core concepts about iOS modal view controllers.
When you dismiss VC1, any presented view controllers by VC1 are dismissed as well.
Apple intended for modal view controllers to flow in a stacked manner - in your case VC2 is presented by VC1.
Note that self.presentingViewController is stored in some other variable, because after vc1 dismisses itself, you shouldn't make any references to it.
Basing on the [Apple's documentation (hyper-link)] and the foundry's
explanation above (correcting some errors), presentViewController
version using delegate design pattern:
ViewController.swift
ViewController1.swift
ViewController2.swift
Basing on the foundry's explanation above (correcting some errors),
pushViewController version using delegate design pattern:
ViewController.swift
ViewController1.swift
ViewController2.swift
When I press a button in PopupVC, it returns to MapVC, and then I want to execute viewDidAppear.
And in VC2, when close the view controller, as usual we can use:
Once you have returned a ViewResult then you can get the string content by
var strResult = ViewResult.Content
Create Service in file viewToString.cs as below code:
Call and return the view with model as below:
[Where are the ControllerContext and ViewEngines properties in MVC 6 Controller?
Also you will need to explicitly set
the layout in the view to get a layout rendered.
error checking when finding a view
ability to render views as partials or pages
Or this for a PartialView:
To solve it, I assign the Html.ViewData.Model to a new object.
Red's answer got me 99% of the way there, but it doesn't work if your views are in an unexpected location.
I'm probably late to the party, but I've managed to find a solution which works without instantiating a new viewengine (RazorViewEngine), but to actually reuse the view engine already available in each of the Controllers.
Also, with this approach, we also get a help from the IntelliSense, when typing the view name, which is really helpful when trying to determine the exact view path.
This is pulled from the source code of asp.net core on GitHub I usually use it to render HTML emails with Razor as well as returning HTML of partial views via Ajax or SignalR.
Complete Working Guidance: [https://medium.com/@soundaranbu/render-razor-view-cshtml-to-string-in-net-core-7d125f32c79 (hyper-link)]
Set the first view's left and top constraints to "parent".
set the txt_body textview width to "0dp"
set the left constraint to the first view's right side
set the right constraint to the tail view's left side.
So, whenever you set the first view's visibility to "gone", the body view will be stretched like how you want it.
A key is having additional Views for aligning.
Here I have 2 hiding labels ("Nice work" and "Opinions"), and I have to add 2 views (spaces).
To simplify hiding several views, I joined them into groups.
I align them on tops and bottoms of the most big views (barrier_2 is similar):
Hide Groups, not views inside, because strangely inside a Group views are always visible.
This example shows 2 TextViews either of which can be gone.
The Views are on stacked from top to bottom, so barrierDirection is set to bottom.
Setting any of the 2 TextViews to gone, will result in the Barrier shifting to the bottom of the other, and if we set both to gone, it'll just shift up to the element that textView1's top constraint was referencing, in this case, the parent.
Note: If your textView1's top constraint is something else, i.e.
it's below another element, the barrier will end up there if both views are set to gone.
Instead of performing a segue to the same controller, you can instantiate a view controller (the same one) from storyboard, and then push that onto the navigation controller.
If you are using a navigation controller you need to push the ViewController into the nav stack.
In this example, i named my ViewController "VDI" in my Storyboard ID setting.
You can still define the segue from the table cell to the view controller, and look at the sender to cancel the automatically triggered segue:
Than you can link every cell (in the Storyboard) to a different View.
Here's how you can push another instance of the current view controller without defining a segue or hardcoding its own identifier:
Interface Builder approach: Just segue to a storyboard reference which refers back to the presenting view controller.
The correct answer is to use a Storyboard Reference that is referencing the UIViewController you want to segue to itself and then point the segue at it.
When you design a WPF/Silverlight try to design UI and ViewModel totally separate so that at any point of time we can change the Layout and UI controls (Based on theme and Styles)
Refer this post also - [https://stackoverflow.com/questions/275098/what-applications-could-i-study-to-understand-datamodel-view-viewmodel (hyper-link)] .
The link has a lot of reference to Model-View-ViewModel pattern, which is very relevant to this discussion.
Is it really a good idea to give the ViewModel dependencies to WPF?
You just write plain-old .NET code in your View Model, and it gets updated when your Data Model changes.
However, your ViewModel is better off using INotifyPropertyChanged.
I recommend checking out Josh Smith's version of a base class for a ViewModel that already implements INotifyPropertyChanged:
I think this is an excellent example of how to do a ViewModel.
Kent wrote an interesting blog about this topic: [View Models: POCOs versus DependencyObjects (hyper-link)].
A base class for PresentationModel (aka ViewModel) which implements INotifyPropertyChanged interface can be found here: [http://compositeextensions.codeplex.com (hyper-link)]
From a pure point of view you shouldn't use DP on a ViewModels.
All dependency objects cannot be serialised (This could hamper the use of ViewModels and DTO (POCO)'s.
In VS2017/2019, there's Cloud Explorer to view files in Azure, but each time open folder to view files will invoke connection to cloud, so you have to wait, that's a bit slow.
To open Cloud Explore, Right click on project > Publish > Manage in Cloud Explore, or Top Menu > View > Cloud Explorer.
For a long time, I've looked for a linux-style terminal to view my deployed files and environment variables.
With this you can view the files, check and set environment variables, make db migrations directly, and a lot more.
By hitting App Service Editor(Preview) option,
But, if you want to keep its state, for example, if you want to build a viewpager and make a certain button appear and disappear based on the page, you can do it this way
But to answer your initial question, what you're doing wrong is that you're calling dismissModalViewControllerAnimated: on the wrong controller!
presentModalViewController:
dismissModalViewController:
Just create a Segue from the FirstViewController (not the Navigation Controller) of your TabBarController to a LoginViewController with the login UI and name it "showLogin".
On your FirstViewController.m override the method viewDidAppear as follows:
Then if the user logged in successfully, just dismiss or pop-out the LoginViewController to show your tabs.
The easiest way i tired in xcode 4.52 was to create an additional view and connect them by using segue modal(control drag the button from view one to the second view, chose Modal).
Then drag in a button to second view or the modal view that you created.
self.dismissViewControllerAnimated(true, completion: nil)
Create two View Controllers with a button on each.
For the second view controller, set the class name to SecondViewController and the storyboard ID to secondVC.
ViewController.swift
SecondViewController.swift
Consumer uses @rpath word to point on this list
[code snippet]

Review Build Phases -> Embed Frameworks -> Destination, Subpath to be sure where exactly the embed framework is located
When your view loads, so does its associated controller.
By knowing, that an event $on binded on $rootScope will not be undinded when the controller loses its reference in the view or getting destroyed we need to destroy a $rootScope.$on listener manually.
The topLayout value can be used by the container view controller to layout its view's subviews.
To use a top layout guide without using constraints, obtain the guide’s position relative to the top bound of the containing view.
In the parent, relative to the containing view, the value will be 64.
In the child, relative to the containing view (the parent), the value will be 0.
In  the container View Controller you could use the property this way:
The Child view controller does not need to know that there are a Navigation and a Status bar : its parent will have already laid out its subviews taking that into account.
If I create a new page based project, embed it in a navigation controller, and add this code to the parent view controllers it seems to be working fine:
A top-level view controller, covering the whole window.
A nested view controller inside the top view covering the bottom 95 pixels, eg.
This view should have a topLayoutGuide of 15, since its top 15 pixels are covered by the status bar.
That would make sense: it means that the nested view controller can set constraints to prevent unwanted overlap, just like a top-level one.
It doesn't have to care that it's nested, or where on the screen its parent is displaying it, and the parent view controller doesn't need to know how the child wants to interact with the status bar.
The top layout guide indicates the distance, in points, between the top of a view controller’s view and the bottom of the bottommost bar that overlays the view
That doesn't say anything about only working for top-level view controllers.
I've definitely seen child view controllers with nonzero topLayoutGuides, but I'm still figuring out the quirks.
(In my case the top guide should be zero, since the view isn't at the top of the screen, which is what I'm banging my head against at the moment...)
While [this answer (hyper-link)] might be correct, I still found myself having to travel the containment tree up to find the right parent view controller and get what you describe as the "real topLayoutGuide".
This way I can manually implement automaticallyAdjustsScrollViewInsets.
In my table view controller (a subclass of UIViewController actually), I have this:
Notice the category methods in UIViewController, this is how I implemented them:
The documentation says to use topLayoutGuide in viewDidLayoutSubviews if you are using a UIViewController subclass, or layoutSubviews if you are using a UIView subclass.
Documentation link:
[https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instp/UIViewController/topLayoutGuide (hyper-link)]
you can add a constraint in the storyboard and change it in viewWillLayoutSubviews
[How to set topLayoutGuide position for child view controller (hyper-link)]
Essentially, the container view controller should constrain the child view controller's (top|bottom|left|right)LayoutGuide as it would any other view.
In case if you have UIPageViewController like OP does and you have for example collection view controllers as children.
Create constrains not to guides, but to view's top with fixed constants assuming guide distance will be.
My problem is [like this (hyper-link)] (source gif from [https://knuspermagier.de/2014-fixing-uipageviewcontrollers-top-layout-guide-problems.html (hyper-link)]).
For short, my pageViewController has 3 child viewcontrollers.
First viewcontroller is fine, but when I slide to the next one, the whole view is incorrectly offset to the top (~20 pixel, I guess), but will return to normal after my finger is off the screen.
My listViewControllers has 3 child viewcontrollers.
The one at index 0 has problem, so I firstly set it as root of pageviewcontroller, and right after that set it back to the first view controller (as I expected).
That said, you will always get the correct value off the root view controller.
The second issue is that when you're adding a fragment this way, you must pass a reference to the fragment's containing view, and that view must have a custom id.
basically you don't need to add a frameLayout as container of your fragment instead you can add straight the fragment into the android  root View container
For API level 17 or higher, [View.generateViewId() (hyper-link)] will solve this problem.
create xml file for fragment view fragment_abc.xml
Doing so will make sure that the view/frame itself will trap all clicking events, and will not pass it through the view behind it.
Note this method works for all layout/view/controls, but many controls (such as buttons) already have this function on by default.
@gordon1hd1 answer is correct but for those who are still confused, I am adding my layout which contains a FrameLayout as parent and a LinearLayout and twoImageViews as childs.
Previously, the Linearlayout was also intercepting touch events when either of ImageViews were pressed.
Adding android:clickable="true" to both ImageViews resolved the issue.
If you are also facing this type of issue, add android:clickable="true" to the view you want to trap the clicking event.
Simply, Set android:clickable="true" in xml to your foreground view.
If you don´t set click events to these layouts (nor via XML neither programatically), no events will be triggered on background views.
just add this to each of your framelayout view containers so that absorb the click:
For layout, we have to make them explicitly clickable so that it will grab the events of clicks or touches and will not let it pass to background views.
Add these lines to all your layouts, so that it will grab/absorb events and will not let it pass to background views.
In Laravel 5 custom pagination is based on presenters (classes) instead of views.
In L4 you used to do something like this in your views:
With my custom presenter my views look like this:
Now in the included view, $object will have the pagination methods available, such as currentPage(), lastPage(), perPage(), etc.
You can view all methods available at [http://laravel.com/docs/5.0/pagination (hyper-link)]
views/pagination/default.blade.php
views/pagination/limit_links.blade.php
Views/pagination/default.blade.php
Assuming using Laravel 5.2 and the following included view:
For Laravel 5.3 (and may be in other 5.X versions) put custom pagination code in you view folder.
resources/views/pagination/default.blade.php
then call this pagination view file from the main view file as
Following commands will generate Pagination template in resources/views/vendor/pagination
In any view file (blade files) you can use those template like following ex:
The easiest way I found, by exporting them to your resources/views/vendor directory using the vendor:publish command
and than go to resources\views\vendor\pagination\default.blade.php
Assuming using Laravel 5.2 and the following included view:
It cannot be accomplished by editing /resources/views/vendor/pagination/blade-name-here.blade.php template (it could be generated by 
php artisan vendor:publish --tag=laravel-pagination command).
Add pagination links in your view (/resources/views/your-controller/your-blade-file.blade.php), like next:
[code snippet]
Get it from any View object.
In your case this might work for you:
holder.pub_image.getContext()
As pub_image is a ImageView.
You can use like this view.getContext()
Passing Context to the adapter is completely unnecessary, since RecyclerView you can access it from inside the class
Obtaining Context at ViewHolder level means that you do it every time you bind or create a ViewHolder.
Note: Parent is a ViewGroup.
An even better and less hard working solution is to use a CardView and set app:cardPreventCornerOverlap="false" to prevent views to overlap the borders:
[CardView (hyper-link)] gives you true shadow in android 5+ and it has a support library.
Just wrap your view with it and you're done.
to assign it to a view, in the xml layout file set the background of it
Consider this view, defined with a background drawable:
view_incoming.xml
The one significant difference is it will occupy the inner space from the view so your actual content area can be smaller than >= lollipop devices.
This question may be old, but for anybody in future that wants a simple way to achieve complex shadow effects check out my library here 
[https://github.com/BluRe-CN/ComplexView (hyper-link)]
Because sending possibly uninitialised Proxies, especially collections, in the view layer and triggering hibernate loading from there can be troubling from both a performance and understanding point of view.
Using OSIV 'pollutes' the view layer with concerns related to the data access layer.
The view layer is not prepare to handle a HibernateException which may happen when lazy loading, but presumably the data access layer is.
Update: see [The OpenSessionInView antipattern (hyper-link)] for a larger discussion regarding this subject.
I wouldn't say that Open Session In View is considered a bad practice; what gives you that impression?
Open-Session-In-View is a simple approach to handling sessions with Hibernate.
If you need fine-grained control over your transactions, such as having multiple transactions in a request, Open-Session-In-View is not always a good approach.
At the same time, it means you don't need to change your service layer to adapt to minor changes in your view.
I just did a post on some guidelines as to when to use open session in view in my blog.
[http://heapdump.wordpress.com/2010/04/04/should-i-use-open-session-in-view/ (hyper-link)]
The only arrangement I made is using two different transactions:
- the first, opened in "service layer", where I have the "business logic"
- the second opened just before the view rendering
This won't help too much but you can check my topic here:
* [Hibernate Cache1 OutOfMemory with OpenSessionInView (hyper-link)]
I have some OutOfMemory issues because of OpenSessionInView and a lot of entities loaded, because they stay in Hibernate cache level1 and are not garbage collected (i load a lot of entities with 500 items per page, but all entities stay in cache)
Open Session In View takes a bad approach to fetching data.
Instead of letting the business layer decide how it’s best to fetch all the associations that are needed by the View layer, it forces the Persistence Context to stay open so that the View layer can trigger the Proxy initialization.
The OpenSessionInViewFilter calls the openSession method of the underlying SessionFactory and obtains a new Session.
The OpenSessionInViewFilter calls the doFilter of the javax.servlet.FilterChain object reference and the request is further processed
The PostService opens a new transaction, and the HibernateTransactionManager reuses the same Session that was opened by the OpenSessionInViewFilter.
The OpenSessionInViewFilter can close the Session, and the underlying database connection is released as well.
At a first glance, this might not look like a terrible thing to do, but, once you view it from a database perspective, a series of flaws start to become more obvious.
Unfortunately, [Open Session in View is enabled by default in Spring Boot (hyper-link)].
To use, open console and hover on an element to view the ruler.
[ (hyper-link)]
The rulers are to the left of and above your viewport.
Especially, if it's you're coming with Cordova/PhoneGap app combined with any HTML5/JavaScript framework/game (Ionic/Phaser) which wants to run on iOS as web wrapper (my personal experience related to this issue) by using WebView.
For iOS 6.x and earlier, UIViewAnimation is used for sliding the UIDatePicker up on-screen and down off-screen.
For iOS 7.x, the UIDatePicker is added in-line to the table view.
You can use the answer I had previously given below or use this new class in Swift I made to make this task a lot simpler and cleaner: [https://github.com/AaronBratcher/TableViewHelper (hyper-link)]
You can't have a static tableView because they are using the tableView:cellForRowAtIndexPath method
I have made my own custom view controller to simplify the process of adding an inline picker inline in a tableview.
You can find it here along with an example project that demonstrates how to use it:
[https://github.com/ale84/ALEInlineDatePickerViewController (hyper-link)]
Basically here I use static table view cells and implement some additional methods.
You have to active Clip Subviews.
I tried both @datinc and @Aaron Bratcher solutions, both worked great but the animation was not so clean in a grouped static tableView.
All the cells can be used in static and dynamic table views.
Create a UITableViewCell subclass:
All your table view cells have to be inherited from this class and you must set the cell height manually for every row.
Create a CPDatePickerTableViewCell class from our CPTableViewCell
In your view controller implement these two delegate methods
Additionally I have written custom cell classes for UITextField and UITextView where tableView:didSelectRowAtIndexPath: is called when cell is selected!
CPTextFieldTableViewCell
CBTextViewTableViewCell
Remove the date picker from storyboard and have an empty cell, which you set the height as in previous answers, and then call an initialise on viewDidLoad:
Drag "DateCellTableViewController.swift" class to your project.
Open "Main.storyboard" and Copy "DateCell" ViewController Object and past it in your storyboard.
Is your green drawable bigger or smaller than your view?
If the background image has a size that is bigger than the view's size, the view's size will change to match the image's size.
Put the view inside a Relative Layout.
Add an ImageView before the View inside the Relative Layout
Set the src of the ImageView to your background image
[code snippet]
FILL_PARENT
Special value for the height or width requested by a View.
FILL_PARENT means that the View wants to be as big as its parent, minus the parent's padding if any.
MATCH_PARENT
Special value for the height or width requested by a View.
MATCH_PARENT means that the view wants to be as big as its parent, minus the parent's padding if any.
WRAP_CONTENT
Special value for the height or width requested by a View.
WRAP_CONTENT means that the View wants to be just large enough to fit its own internal content, taking its own padding into account.
Now, when you are setting the View's height/width to WRAP_CONTENT, you are allowing the view to take that much size that is sufficient to show to view's content.
The background image is also the View's content, hence you view will be shown of as much size as the image.
Okay, but in your situation that's an issue for you because you have a background to show and view should not be stretched for that.
Specify the size of view not using [constants (hyper-link)], but in [DP (hyper-link)].
You gotta see the View::getSuggestedMinimumWidth/Height method.
Seeing that, you may know why the background makes a view bigger, especially why assign a BitmapDrawable to it.
One good solution that is working perfectly in my case is extending the View and overriding onMeasure().
Create an own class and extend the View you want to use, here for
example I will use Button.
Example code for a custom view which extends Button (change Button to the View you would like to extend)
The only thing to change here is the type of view you want to extend and in the onMeasure() method the background resource you want to use for the view.
After that, just use this view in your layout xml or add it programatically.
if we want background picture be stretched as view picture:
[code snippet]
if we want background picture not to be stretched, but to be cutted to fit view picture:
[code snippet]
First:Try putting this line on your NestedScrollView
as your parent view
Like this
In Java code, after initializing your recyclerView and setting the adapter, add this line:
You can also try to wrap the layout withing a relativeLayout so that the views stay at the same position but recyclerView (which scroll) is first in xml hierarchy.
I had the same issue and sovled by extending NestedScrollView and disabling focusing children.
For some reason, RecyclerView always requested focus even when I just opened and closed the drawer.
to my view above RecyclerView (which was hidden after unwanted scroll).
Try to set this property to your LinearLayout above RecyclerView or to LinearLayout which is container of RecyclerView (helped me in another case).
As I see in NestedScrollView source it tries to focus the first possible child in onRequestFocusInDescendants and if only RecyclerView is focusable it wins.
Edit (thanks to Waran): and for smooth scroll don't forget to set yourRecyclerView.setNestedScrollingEnabled(false);
In your LinearLayout immediate after NestedScrollView, use android:descendantFocusability in the following way
As for focusInTouchMode, both AbsListView and RecyclerView calls the method setFocusableInTouchMode(true); in their constructor by default, so it is not required to use that attribute in your XML layouts.
And for NestedScrollView following method is used:
MapView, if used in fullscreen as in Google Maps, is another good example of where you can use focusable in touch mode correctly.
to scroll to the top, just call this in setcontentview:
My layout contains a parent layout as NestedScrollView which has a child LinearLayout.
The LinearLayout has orientation "vertical" and childs RecyclerView and EditText.
This problem arrives due to recycle view Focus.
Automatically all focus gone to recycle view if its size extended the size of screen.
adding android:focusableInTouchMode="true" to first ChildView like TextView, Button and so on(Not on ViewGroup like Linear, Relative and So on) make sense to solve the problem but API Level 25 and above solution doesn't work.
Just add these 2 line in your ChildView like TextView, Button and So on (Not on ViewGroup like Linear, Relative and So on)
For Smooth Scrolling On RecycleView add this line
Just add android:descendantFocusability="blocksDescendants" on the ViewGroup inside the NestedScrollView.
because the ViewGroup will block its descendants from receiving focus.
If you want to avoid the nestedscrollview to receive focus, you can add a dummy layout which is focusable above the nestedscrollview.
In My case It was scrolling and focusing to recyclerview due to, I had added  android:layout_gravity="center" in parent linearlayout.
This leaves many open questions, such as: a Host view is referring to
the element that Component resides in, and an Embedded view is
referring to the component’s template itself?
###Component view
Each component in Angular is represented as a view with nodes.
Most nodes in the view resemble component template structure and represent DOM nodes.
The compiler generates the following view nodes:
###Host view
The host view is a view that contains data for the a-comp component element and the data for the component class A. Angular compiler generates host views for each component defined in bootstrap or entryComponents of a module.
And each host view is responsible for creating a component view when you call factory.createComponent.
The factories that are returned by the componentFactoryResolver are the host view factories.
###Embedded view
The embedded view is a view that is created for the view nodes specified in the ng-template.
It's like a component view but it doesn't have a wrapper component element and component data like injector etc.
Basically, it lacks the data that is contained in the host view.
But it's still a valid view and is checked during detection as any other view.
If a component is specified in the other component template, then the host view is not used.
The parent component view contains the nodes that are usually defined in the host view and this parent view is responsible for creating a child component view.
Is that the case for Directives as well which don’t have a template
(thus no view)?
Right, directives don't have a view so no views are created for directives.
The renderer is defined by the compiler based on the viewEncapsulation parameter of the component decorator descriptor.
[Exploring Angular DOM manipulation techniques using ViewContainerRef (hyper-link)]
Alternatively, wrap the footer view in a wrap_content height FrameLayout and hide/show the inner view, leaving the FrameLayout visible; the height should wrap properly then.
It seems that you are allowed to call addHeaderView() / addFooterView() after setAdapter() as long as you call one of those methods at least once before.
Combine this with removeFooterView() and you have my solution.
I also found that is possible call onContentChanged() (if you use ListActivity) to force recreate ListView if I need add HeaderView to them after setAdapter() call, but it is very ugly hack.
When you want to remove the footer in ListView just call
It will add a dummy empty view which will not reserve any space
I have created a ListView that handles this.
It also has an option to use the EndlessScrollListener I've created to handle endless listviews, that loads data until there's no more data to load.
[https://github.com/CyberEagle/OpenProjects/blob/master/android-projects/widgets/src/main/java/br/com/cybereagle/androidwidgets/helper/ListViewWithLoadingIndicatorHelper.java (hyper-link)]
- Helper to make it possible to use the features without extending from SimpleListViewWithLoadingIndicator.
[https://github.com/CyberEagle/OpenProjects/blob/master/android-projects/widgets/src/main/java/br/com/cybereagle/androidwidgets/listener/EndlessScrollListener.java (hyper-link)]
- Listener that starts loading data when the user is about to reach the bottom of the ListView.
[https://github.com/CyberEagle/OpenProjects/blob/master/android-projects/widgets/src/main/java/br/com/cybereagle/androidwidgets/view/SimpleListViewWithLoadingIndicator.java (hyper-link)]
- The EndlessListView.
in my case addFooterView / removeFooterView() cause some artefacts.
I used FrameLayout as FooterView.
And when I want to add Footer I called mFrameFooter.addView(myFooter); and mFrameFooter.removeAllViews(); for remove.
in the ViewGroup that contains the "Load More" button.
Perform listView initialization as usual
load_more_footer_view.xml
You don't need to remove or add footer view dynamically.
You just need to create an unspecified height parent Layout (either inflate it from an xml file or create it programatically) and then add your view which you want to hide or show into it.
And you can set the view, but NOT the parent Layout, to VISIBLE or GONE or something else now.
Put listview and footer view (just sub layout) in parent layout like LinnearLayout, remember that footerview below listview.
Controller this footer view gone and visibility like nomal view.
1.Add footer view first
mListView.addFooterView(mFooterView);
mListView.setAdapter(mAdapter);
mFooterView.setVisibility(View.GONE);
mFooterView.setPadding(0, 0, 0, 0);
mFooterView.setVisibility(View.GONE);
mFooterView.setPadding(0, -1*mFooterView.getHeight(), 0, 0);
first I am adding my footer to the listview,like this
Then on button click , I remove the view,
Window -> Show View -> Other -> Debug -> Expressions -> Right Click on Window -> Add Watch Expression... -> Enter the name of the variable you want to see
In the Debug Variables view their is a arrow button in the right of the view.
You can view static variable and also edit during runtime.
View:
[How to: View the Contents of the Global Assembly Cache (hyper-link)]
To view the files just browse them from the command prompt (cmd), eg.
You view the content of the GAC using:
If you want to view the folder structure of the GAC in Windows Explorer, you can do this by [using the registry (hyper-link)]:
Add a DWORD called DisableCacheViewer and set the value to 1.
For a temporary view, you can substitute a drive for the folder path, which strips away the special directory properties.
Rails have the concepts of view, partial and layout.
That said, the view is the only one you should keep using only once.
If you feel that more than one extra view could be rendered inside your current view, you are most likely looking for a layout
If you feel that one of your views should be rendered in many pages, you are looking for a partial
If this view should render only one extra view inside it, and that view should only be rendered inside the current view, you can pick any of the above or none of it - that's it, go with a single file
Rendering a non-partial view inside another view isn't exactly the Rails Way™.
However if your view can be shared, as it seems like it could in this case, you could just make it a layout.
Like others have mentioned, rendering another non-partial view in another view is "Not the rails way", if however you still insist on doing it, one method is:
Create a subclass of UICollectionReusableView and for example add an UIImageView to it:
Then in your controller in viewDidLoad register this subclass with the following code (replace code with your custom layout)
There seems to be no documentation for it, but the following document got me on the right track: [Collection View Programming Guide for iOS (hyper-link)]
UPDATE: It is probably better to subclass UICollectionReusableView for a decoration view instead of UICollectionViewCell
Here's a collection view layout decoration view tutorial in Swift (this is Swift 3, Xcode 8 seed 6).
Decoration views are not a UICollectionView feature; they essentially belong to the UICollectionViewLayout.
No UICollectionView methods (or delegate or data source methods) mention decoration views.
The UICollectionView knows nothing about them; it simply does what it is told.
To supply any decoration views, you will need a UICollectionViewLayout subclass; this subclass is free to define its own properties and delegate protocol methods that customize how its decoration views are configured, but that's entirely up to you.
To illustrate, I'll subclass UICollectionViewFlowLayout to impose a title label at the top of the collection view's content rectangle.
This is probably a silly use of a decoration view, but it illustrates the basic principles perfectly.
For simplicity, I'll start by hard-coding the whole thing, giving the client no ability to customize any aspect of this view.
There are four steps to implementing a decoration view in a layout subclass:
Define a UICollectionReusableView subclass.
Register the UICollectionReusableView subclass with the layout (not the collection view), by calling register(_:forDecorationViewOfKind:).
Implement layoutAttributesForDecorationView(ofKind:at:) to return layout attributes that position the UICollectionReusableView.
To construct the layout attributes, call init(forDecorationViewOfKind:with:) and configure the attributes.
Override layoutAttributesForElements(in:) so that the result of layoutAttributesForDecorationView(ofKind:at:) is included in the returned array.
The last step is what causes the decoration view to appear in the collection view.
When the collection view calls layoutAttributesForElements(in:), it finds that the resulting array includes layout attributes for a decoration view of a specified kind.
The collection view knows nothing about decoration views, so it comes back to the layout, asking for an actual instance of this kind of decoration view.
You've registered this kind of decoration view to correspond to your UICollectionReusableView subclass, so your UICollectionReusableView subclass is instantiated and that instance is returned, and the collection view positions it in accordance with the layout attributes.
Define the UICollectionReusableView subclass:
Now we turn to our UICollectionViewLayout subclass, which I'll call MyFlowLayout.
We register MyTitleView in the layout's initializer; I've also defined some private properties that I'll need for the remaining steps:
Implement layoutAttributesForDecorationView(ofKind:at:):
A title label reading ``Testing'' appears at the top of the collection view.
For example, suppose this collection view is displaying the 50 U.S. states:
Our layout has a title property, the value of which needs to be communicated somehow to our MyTitleView instance.
We are not in charge of instantiating MyTitleView; it happens automatically, when the collection view asks for the instance behind the scenes.
There is no moment when the MyFlowLayout instance and the MyTitleView instance meet.
MyFlowLayout never meets MyTitleView, but it does create the layout attributes object that gets passed to the collection view to configure MyFlowLayout.
By subclassing UICollectionViewLayoutAttributes, we can include in that envelope any information we like — such as a title:
Now we rewrite our implementation of layoutAttributesForDecorationView.
Finally, in MyTitleView, we implement the apply(_:) method.
This will be called when the collection view configures the decoration view — with the layout attributes object as its parameter!
Since we are subclassing UICollectionViewFlowLayout, some further modifications might also be needed to make room for the decoration view by pushing down the other elements.
Also, technically, we should override isEqual(_:) in MyTitleView to differentiate between different titles.
In my case : 
I wanted to upgrade from UITableView to UICollectionView.
uitableview sections >>> supplementary views
uitableview headerView >>> decoration  view
In my case I felt subclassing layout and do other stuff, it's "too much" 
for just simple "headerView" (decoration)
So my solution was just to create the headerview (not section) as first cell
and section 1 as the first section ( section 0 was size of zero)
It will let you view the entire contents of arrays and much more, including modifying array entries and stepping through code.
Firebug also has a debugger, as well as screens for helping you view and debug your HTML and CSS.
Purpose of view is displaying model.
You should use controller to redirect request before creating model and passing it to view.
You do not redirect from views.
[Here is a sample project (hyper-link)] demonstrating a custom View accessing its contents.
Possibly, you are calling findViewById before calling setContentView?
If that's the case, try calling findViewById AFTER calling setContentView
A answer for those using ExpandableListView and run into this question based on it's title.
I had this error attempting to work with TextViews in my child and group views as part of an ExpandableListView implementation.
You can use something like the following in your implementations of the getChildView() and getGroupView() methods.
In my case, I was using ExpandableListView and I had set android:transcriptMode="normal".
From the beginning, main2 was a copy of main, and everything worked well, until I added new TextView to main2, so the R.id.textview1 became available for the rest of app.
In my experience, it seems that this can also happen when your code is called after OnDestroyView (when the fragment is on the back stack.)
ie.,setContentView(R.layout.basicXml);
I was using a third-party library that allows you to override their adapter for a GridView and to specify your own layout for each GridView cell.
Eclipse was still using the library's layout xml file for each cell in the GridView, even though it gave no indication of this.
Make sure you've called setContentView() before findViewById()
Make sure that the id you want is in the view or layout you've given to setContentView()
There is one I have found for custom views in standard layouts, which goes against the documentation:
In theory you can create a custom view and add it to a layout ([see here (hyper-link)]).
However, I have found that in such situations, sometimes the id attribute works for all the views in the layout except the custom ones.
Replace each custom view with a FrameLayout with the same layout properties as you would like the custom view to have.
Give it an appropriate id, say frame_for_custom_view.
In onCreate:
[code snippet]
which puts the custom view in the frame.
In my case I had inflated the layout but the child views were returning null.
The key was to specifically reference the already inflated layout in order to get the child views.
That is, to add footerView:
footerView.findViewById...
In my particular case, I was trying to add a footer to a ListView.
Changing this to inflate the footer view instead of finding it by ID solved this issue.
FindViewById can be null if you call the wrong super constructor in a custom view.
If you have to findViewById in custom layout, for example:
you cannot get the view in constructor.
You should call findViewById after view has inflated.
In my case findViewById() returned null, because the layout in which the element was written, was not inflated...
findViewById(R.id.listview) returned null, because I had not done 
inflater.inflate(R.layout.fragment_layout, ..., ...); 
before it.
Parent view:
Child view (retry_button):
.findViewById(R.id.retry) would always return null.
But, if I moved the ID from the child view into the include tag, it started working.
No complaints at compile time, but I was getting a null view at runtime, and calling things in the proper order.
That is, 
    findViewById() 
after 
    setContentView().
The problem turned out that my view is defined in content_main.xml, but in my activity_main.xml, I lacked this one statement:
findViewById also can return null if you're inside a Fragment.
As described here: [findViewById in Fragment (hyper-link)]
You should call getView() to return the top level View inside a Fragment.
Then you can find the layout items (buttons, textviews, etc)
I've tried all of the above nothing was working.. so I had to make my ImageView static public static ImageView texture; and then texture = (ImageView) findViewById(R.id.texture_back); , I don't think it's a good approach though but this really worked for my case :)
I assume my view was too deep into layout hierarchy.
In my case, findViewById returned null when I moved the call from a parent object into an adapter object instantiated by the parent.
After trying tricks listed here without success, I moved the findViewById back into the parent object and passed the result as a parameter during instantiation of the adapter object.
I was facing a similar problem when I was trying to do a custom view for a ListView.
Comment out all findViewById in your activity.
Comment out everything except onCreate and setContentView
I have put this in my partial view:
in the same kind of situation you describe, and it shows the controller described in the URL (Category for you, Product for me), instead of the actual location of the partial view.
You are still in the context of your CategoryController even though you're loading a PartialView from your Views/News folder.
Other way to get current Controller name in View
In view
You need to create a view model.
Here is another way to do it if you want to use ViewData:
./ourView.cshtml
in the partialview rendered,
I had a similar issue that the screen flickered between views in the pager.
It turned out to be the mapView inflating when swapping between pages the first time.
To solve this I found that setting the number of off screen pages to 2 (this worked in the case above) that when my fragment started it loaded all the views at once.
See [http://developer.android.com/reference/android/support/v4/view/ViewPager.html#setOffscreenPageLimit (hyper-link)] (int)
I was able to stop the black surface being left behind after transition by placing another view with a transparent background on top of the ViewPager inside a FrameLayout:
Had the same problem with SlidingMenu and ViewPager.
I solved the problem by overriding the onCreateView() method of MapFragment (SupportMapFragment)
The solution is to use frameLayout.setVisibility(View.Visible) and frameLayout.setVisibility(View.Gone) on open and close events of sliding menu.
It dosent require an extra view to be added.
I had same issue of black screen on scrolling of list view, i was using map fragment with list view in same screen i have resolved this issue with use of the magical property in xml where i am talking list view just we have to put android:scrollingCache="false".my issue is fixed try this property to stop lagging and flickering in your maps.
I listen on page changes via the ViewPager's onPageChangeListener, and hide the map when its page starts scrolling, and likewise show it again when it stops scrolling.
I also have added a white View to be displayed when scrolling.
Where "mapFragment" is my SupportedMapFragment and "iv" is an ImageView (make it match_parent).
And if you have black lines with ScrollView on top and bottom set to your ScrollView  android:fadingEdge="none"
SQL View without pure SQL?
You can create a class or function to implement a defined view.
Creating a (read-only non-materialized) view is not supported out of the box as far as I know.
You just have to write a [compiler extension (hyper-link)] CreateView.
These days there's a PyPI package for that: [SQLAlchemy Views (hyper-link)].
Luckily, the text() in the example above makes it clear that the definition parameter to CreateView is such a query object.
Note that I am utilizing the sqlalchemy_views package, just to simplify things.
Defining a view (e.g.
Mapping the views (enable ORM functionality):
Creating the views:
How to query a view:
This would return exactly what you expect (a list of objects that each has a SomeModel object and a SampleView object).
Dropping a view:
I don't need extra functionality of View (if any), so I simply treat a view as an ordinary table as other table definitions.
So basically I have a.py where defines all tables and views, sql related stuff, and main.py where I import those class from a.py and use them.
Notably, you need to add the primary_key property even though there's no primary key in the view.
It has views, materialized views, and it integrates with the ORM.
It is not documented yet, but I am successfully using the views + ORM.
You can [use their test as an example (hyper-link)] for both regular and materialized views using the ORM.
To create a view, once you install the package, use the following code from the test above as a base for your view:
Where Base is the declarative_base, sa is the SQLAlchemy package, and create_view is a function from sqlalchemy_utils.view.
More recently, the doclet now supports a "search" feature, which provides a more versatile way of finding items to view.
Currently the Realm Browser doesn't support accessing databases directly on the device, so you need to copy the database from the emulator/phone to view it.
Now you can view Realm DB on Chrome browser using [Stetho (hyper-link)], developed by Facebook.
By default, Stetho allows to view Sqlite, network, sharedpreferences but with additional [plugin here (hyper-link)] allows to view Realm as well.
You have few options to view your android realm files:
App will show you all realm files on your device, and you can view all your realm files real time while testing your app.
Use [Realm Browser (hyper-link)] or any of [these (hyper-link)] to view *.realm files:
View filepath
[Result view in Realm studio (hyper-link)]
You have to set ViewController StoryBoardId property as below image.
open viewController using coding as below in swift
For setting rootViewController inside AppDelegate Class
I'd say creating UIWindow each time you want to change rootViewController is bad idea.
Get new rootVC: let rootVC = UIStoryboard(name: "StoryboardName", bundle: nil).instantiateViewControllerWithIdentifier("newRootVCIdentifier") as UIViewController
Set frame for new rootVC from UIScreen's bounds: rootVC.view.frame = UIScreen.mainScreen().bounds
Set new root controller for current window (here with animation): UIView.transitionWithView(self.window!, duration: 0.5, options: .TransitionCrossDissolve, animations: {
                 self.window!.rootViewController = rootVC
            }, completion: nil)
This is my preferred approach when presenting a new viewController from the current viewController through the AppDelegate.
This way you don't have to completely tear down your view hierarchy when handling a push notification or universal link
To present the view together with the navigation controller:
Swift 3 SWRevealViewController
Alternatively you can put the partial view in views/shared then just return :
You can share views between controllers by putting them into the Views/Shared folder.
Each controller can then render that view by name.
You can render a partial view (which can be shared between controllers as in (1)) within the current view using Html.Partial().
You can use Html.Action() to invoke an action on a different controller and render the results within the current view.
You can use AJAX to load a partial view from a different controller after the page has been rendered.
Just a side note as i found this thread searching for the same question but the answers weren't working: in Orchard CMS modules you cannot use the [neat solution (hyper-link)] posted by Pittfall, you have to use relative paths to return partial views.
and you want to return the partial view
That doesn't matter much on its own (it's only 16K), but the retain cycle and leak of the view controller are bad.
If you add the addScriptMessageHandler at viewDidAppear, its a good idea to remove it in viewDidDisappear.
Since this is still a problem with Swift 4.2 and iOS 11 I want to suggest a solution which is using a handler which is separate from the view controller that holds the UIWebView.
This way the view controller can deinit normally and tell the handler to clean up as well.
UIViewController:
I've also noted that you also need to remove the message handler(s) during teardown, otherwise the handler(s) will still live on (even if everything else about the webview is deallocated):
@matt perfectly described the reason of view controller leak, I would propose to use weak pointer to self and use it as function parameter.
That solves the issue of releasing view controller, but if you take a look at Instruments->Leaks ;), webView object exits and has retain count=1.
I would advise to do that in the viewWillDisappear() method.
View doesn't provide onPress prop.
You can wrap the view with a TouchableWithoutFeedback and then use onPress and friends like usual.
Also you can still block pointerEvents by setting the attribute on on the child view, it even blocks pointer events on the parent TouchableWithoutFeedback, its interesting, this was my need on Android, I didn't test on iOS:
View component doesn't provide onPress as props.
Alternatively you can also provide onStartShouldSetResponder to your view, like so:
View doesn't provide onPress prop.
onPress doesn't work on <View> tag use <TouchableOpacity> instead of View
well we can make the View have a onPress props onStartShouldSetResponder and onResponderGrant
you should wrap toolbar in view like this:
Wrap those component which you want to scroll inside scrollview as:
And provide flex to root view as:
Top <View> must has style flex:1, and also <ScrollView> has too
If you are using <Form> from native base and you want to scroll
then use KeyboardAwareScrollView
Use react fragments instead of a View to wrap your scroll view it worked for me
For me, Scroll View wrapped with TouchableWithoutFeedback was causing scroll view to not function at times.
This was driving me crazy because I added <view> and <ScrollView> like everyone suggested but nothing worked.
If you're doing the check inside the View, put the value in the ViewBag.
This score value decides if the HTML page can be "page viewed" in Firefox.
EDIT:
Images in <div> or <figure> tags (HTML5) within the <p> element appear to be retained in the Reader View when the page text content is valid.
You need at least one <p> tag around the text, that you want to see in Reader View, and at least 516 characters in 7 words inside the text.
for example this will trigger the ReaderView:
In order for these Reader View algorithms to work for your website, you want them to correctly identify the content-heavy sections of your page.
While it may look similar, many
content-related algorithms (not only Reader View ones) rely heavily
on them.
Even though they're not the only criterion (as you noted in the question), these are very useful to computers reading your
page (not just Reader View) to distinguish different sections of
your content.
A common pattern for this style of problem is [Mediator (hyper-link)] (a class that both view models reference and can be used to pass messages between the two).
In this pattern different view models subscribe to events from the aggregator and others publish events.
Implement that interface on MainviewModel.
Pass that interface as member variable to SettingsViewModel.
So whenever settings view model has to notify something to main, it will use that interface.
And additionally, other view models can use same strategy.
To set Landscape orientation to all view of your app & allow only one view to All orientations (to be able to add camera roll for example):
Then in the view that segue to the one you want to be able to have All orientations:
Things can get quite messy when you have a complicated view hierarchy, like having multiple navigation controllers and/or tab view controllers.
This implementation puts it on the individual view controllers to set when they would like to lock orientations, instead of relying on the App Delegate to find them by iterating through subviews.
Then in the desired ViewController you want to lock orientations:
I have a tabbed app with navigation controllers in each tab, and one view needed to rotate, while the others needed to be locked in portrait.
The navigation controller wasn't resizing it's subviews properly, for some reason.
Extend your View Controller
If you want others behaviors from view controllers, create other protocols and follow the same structure.
This example solves the problem with orientations changes after push
view controllers
View Controller:
As of iOS 10 and 11, iPad supports Slide Over and Split View.
To enable an app in Slide Over and Split View, Requires full screen must be unchecked.
That means the accepted answer cannot be used if the app wants to support Slide Over and Split View.
I have a solution that allows (1) unchecking Requires full screen, (2) just one function to be implemented in appDelegate (especially if you don't want to / can't modify the target view controllers), and (3) avoid recursive calls.
I unchecked Requires full screen because I want to enable Slide Over and Slide View on iPad.
When viewing image in full screen, allows users to rotate landscape for better view.
On iPad, users can rotate to any orientation in any view controllers.
The app will lose Slide Over + Split View ability.
But you can lock or unlock the orientation for any view controller, in just one place and no need to modify ViewController class.
Finally, this function get called on view controller's life cycle, when view is displayed/removed.
Your ViewController
Add Following line if you need only portrait orientation.
you have to apply this to all ViewController need to display portrait mode.
and
that will make screen orientation for others Viewcontroller according to device physical orientation.
Then write down this code before your landscape orientation viewcontroller will be presented/push.
Then write down this code in actual viewcontroller(For landscape view)
Set the supportedInterfaceOrientations property of specific UIViewControllers like this:
This solution only works when your viewController is not embedded in UINavigationController, because the orientation inherits from parent viewController.
For this case, you can create a subclass of UINavigationViewController and set these properties on it.
Here is a simple way that works for me with Swift 4.2 (iOS 12.2), put this in a UIViewController for which you want to disable shouldAutorotate:
The approach is based on the view tagging via view->tag
In the target ViewController just assign the tag to the root view like in the following code example:
And finally in the AppDelegate.swift check if the currently shown view is the one we tagged:
Note: the marked view will be also found if current MVC is overlapped with some child ViewController in navigation stack.
// 1- in second viewcontroller we set landscapeleft and in first viewcontroller we set portrat:
On the iPhone this causes the MKMapView to zoom out.
To get flat view of the map
An alternative quick and hacky solution if you want to get an overview of all the produres there are, or run into the issue of only getting the procedure header shown by SHOW CREATE PROCEDURE:
Yes, NOLOCK will propagate to the tables used by the view definition (at least in SQL Server 2005).
In SQL Server 2005, all lock hints are propagated to all the tables and views that are referenced in a view.
If you're using indexed views you might want to read a bit more as there are some special cases there too.
Also see [View Resolution (hyper-link)] for more info.
He writes "Yes, NOLOCK will propagate to the tables used by the view definition (at least in SQL Server 2005)."
You need to add the .cshtml extension to the view name:
@Html.Partial("~/Views/Partials/Components/_AdvancedComponentRenderer.cshtml", Model.Content);
I had inserted one blank space accidentally after my filename, and this disrupted the automatic behavior of PartialView() for me.
I got this error message because the partial view was added to the project file (.csproj) but was not actually present on disk.
Model View Presenter and Model View Controller both try to solve the same "seperation of concerns" problem.
The primary difference you'll find is that Model View Controller (MVC) is often implemented with some coupling between the view and some model of some sort - thereby a given view is specifically purposed to provide a visualization of a given object (model).
In the Model View Presenter pattern you generally find that the Presenter takes care of working with the model, and deciding what information from it will be needed to form some sort of visualization.
Fowler separates MVP into 2 patterns: Supervising Presenter and Passive View.
Aviad Ezra has a good article on this topic [http://aviadezra.blogspot.com/2008/10/model-view-presenter-design-pattern.html (hyper-link)].
