YUFENG GUO: The
TensorFlow graph is
a source of pride, performance,
and frustration among users.
How can we keep the pride
and the performance,
but without the frustration?
Stay tuned to find out.
Welcome to "AI
Adventures," where
we explore the art, science,
and tools of machine learning.
My name is Yufeng Guo,
and on this episode,
we're going to check
out how to smooth over
some of those pain points that
exist in using the TensorFlow
graph.
TensorFlow has been
long associated
with the computational graph.
After all, the library
is all about tensors
that flow through a graph.
Yet this can be a source of
great frustration for folks
who are just starting out.
This is mostly
because everything
is part of the graph,
and I mean everything,
from the numbers that are
used to represent your models
to the operations themselves.
Everything is part of the graph.
This can lead to
various difficulties
when it comes time to,
say, debug your TensorFlow
code since the development model
can feel like write everything
perfectly and then run it.
You wrote it all
perfectly, right?
And of course programming
should not operate like this.
It would be great to be
able to iterate on things,
see partial results,
and peer into the graph
to be able to print out
more meaningful outputs
than just tensor MatMul0
shape 2, 2 dtype float 32.
What does that mean?
But how can you ignore
the deferred execution
process of the graph?
This is the goal of Eager mode.
TensorFlow will eagerly
execute your operations,
thus allowing you to see
the results right as you're
working, rather than
waiting until everything
is coded up and
connected before you can
see if anything is done right.
Let's take a look at
this basic example
where I'm multiplying
some numbers together.
When we haven't yet
enabled Eager mode,
things work the
way we are used to.
Printing out a
TensorFlow variable
gives some informational
text about the operation
and the expected dimensions.
But to actually
execute that node,
we'll need to do a bit more
boilerplate code by wrapping it
in a session and then
running that session
to pull out the values.
This is just way too
much code to just try
to look at some numbers.
Now let's try that same code,
but we'll enable Eager mode
by adding
tf.enable_eager_execution
as the very first thing that
is run after import tensorflow.
And we'll look at what happens.
The printed results, they
show exactly the value
of the matrix multiplication.
That's what's great
about Eager mode.
It enables you to use
TensorFlow more efficiently
without losing prior
functionality or the features
that you're used to.
So much of software development
lives in the trial and error
process in running some code,
seeing what errors you get
back, and changing that code.
So the sooner you can test
the code and see the errors,
the more efficient and
effective you can be.
Thanks for watching this episode
of "Cloud AI Adventures."
And if you enjoyed
it, please like it
and subscribe to get all
the latest episodes right
when they come out.
For now, try out Eager mode.
See if it's right for you.