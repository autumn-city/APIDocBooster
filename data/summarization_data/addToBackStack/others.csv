fragmentTransaction.addToBackStack(null) won't work if you are extending AppCompatActivity.  It works well in Activity.
"The parameter for addToBackStack() is an optional name for the back state, you do not use the tag in the replace() method which is just an optional tag for the fragment."
" But now I want to hit the back button, it doesn't take me to the input form, it just exits the app.  And when I return from that activity, that exits the app.  So with-- but I-- what I really want to do is I want to be able to hit that back button and go back to my input form.  So I want to be able to type 120 and 10 and calculate.  And if I hit this back button, I want to return to the input form even though it's the same activity. "
" So you'll notice that I have this addToBackStack before I replace the content with the output fragments.  And you might think that if I move this here, now when I hit the return it would return to the output fragment.  That change isn't actually made until here when I do the commit.  So addToBackStack Input Form should do the same exact thing whether I have it before or after this replace. "
the reason why the popBackStack() and popBackStackImmediatly() is due to the fact that you didnt add that fragment (that you want to pop) to the backStack.  In order to do this you have to make a call to addToBackStack() at the moment of making the transaction to add/replace your fragment.
