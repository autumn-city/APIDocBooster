hello world it's Suraj and life is
pretty unpredictable isn't it
probabilistic programming is a technique
that helps us build AI that account for
real-world uncertainty and we'll use
uber z' newly-released tool pyro to help
us understand how it works
back when the glorious Soviet Union was
still around
programmers wrote everything in the
assembly programming language they used
three-letter commands to control which
data got stored on which register which
mathematical operations the CPU executed
and which memory locations got copied to
where as you can imagine this was really
tedious work but it did allow
programmers to create never before
possible algorithms after a while though
they wanted more they didn't want to
have to worry about manually adding
register values or copying numbers from
one place to another they wanted to
focus on high-level ideas like functions
and data flow so Along Came compiled
languages like C and scripted languages
like Python these higher-level languages
let programmers do the same task with
much less code fast forward a couple
decades later and deep learning
coupled with big data is now the cool
kid on the block processor speeds and
storage capacity have skyrocketed in
capabilities so computers can process
data like never before
which means programmers can build tools
like never before like one of the many
possible deep learning models the term
model can be used to describe a
decision-making tool or a way of
representing an idea using math we use
models every day to make our lives
easier a map is a model of locations
sheet music is a model of sounds even
our brain is a model of every decision
we make models can be deterministic that
means that a given input will always
produce the same output there's no
randomness involved like blink-182 but
most models
are going to be probabilistic that means
they take into account uncertainty which
the real world is full of applying the
same input to this kind of model twice
could lead to two different outputs
there are no guarantees modeling this
kind of uncertainty isn't easy so lots
of machine learning models that have
been built thus far have been
deterministic but consider that pretty
much all real-world data is incomplete
or imperfect in some way so having some
kind of prior knowledge of probabilities
helps us make predictions this is what
Bayesian inference helps us do we make
prior assumptions about how the world is
before making predictions we represent
these assumptions as numbers and can
update our model based on our
observations when programmers started to
implement this kind of model
programmatically they started to realize
that hey this is actually pretty complex
to do it's not about keeping just a few
probabilities in your head you have to
keep track of the whole probability
distribution so ideally we need the
probability distributions to be at the
heart of the program since they are what
is being manipulated all other elements
should revolve around these
probabilities but with traditional
programming languages they're only used
in obscure subroutines at their most
basic level probabilistic programming
languages differ from deterministic ones
by allowing language primitives to be
stochastic the point of running the
program is not to find out what happens
at the end it's to figure out the
correct values for the variables that
define our probability distributions
what do we think the world is like what
kind of distributions with which kinds
of parameters have the expressive power
to mimic the real world most
probabilistic languages are built on top
of existing languages but they're
distinct enough in the way they work
that they can be viewed as a language
instead of a
library one of the most popular
ride-sharing apps in the world
uber has to match riders and drivers to
get them to where they need to go as
fast as possible
this simple task requires optimization
at every single step optimal routing
sensible pool combinations deciding
optimal timings avoiding harassment
lawsuits so in order to help solve these
problems and specifically model the
uncertainty of the real world they've
developed a probabilistic programming
language called pyro that lets engineers
and build models that use Bayesian deep
learning it's written in Python and
built on top of the popular PI torch
programming library PI torch offers very
fast tensor math operations and
automatic differentiation aka gradient
descent a popular optimization strategy
both of which help make computation
faster and easier to create pi torch
also offers dynamic graph definitions
instead of static graph definitions in
tantra flow for example you define a
graph before you run it in pi torch you
define change and execute nodes in the
computation graph as you go at runtime
and this approach feels more native to
Python the basic unit of pi Rho programs
is the stochastic function which helps
us explicitly compute the probability of
the outputs given the inputs for example
if we want to draw a sample X from this
unit normal distribution then we could
just do the following define a mean and
unit variance using variables from PI
torch love you fast sensor math and we
can compute its log probability
according to a normal distribution we
can also return a sample using a named
stochastic sample using the pyro sample
primitive naming allows Pyro's back-end
to uniquely identify sample statements
and change their behavior at runtime
depending on how the enclosing
stochastic function is being used if we
had a bunch of data of daily mean
temperatures and cloud cover and want to
reason about how temperature interacts
with whether it was sunny
or cloudy we can write out a simple
stochastic function that says use pyro
to define a binary random variable
cloudy drawn from a distribution with
the given parameters then convert the
value to a string so that it returns
values of weather that are easier to
parse according to this model it's
cloudy 30% of the time and sunny 70% of
the time we define parameters we use the
sample that temperature that depend on
the particular value of cloudy we sample
in line three then we return the two
values of cloudy and temp at the end
weather specifies a joint probability
distribution over two named random
variables cloudy and temp so this model
helps us reason about how likely it is
to be cloudy or sunny given a
temperature and because pyro is embedded
in Python stochastic 80 can affect the
control flow for example we can
construct recursive functions that
terminate the recursion randomly 3
summary points probabilistic programming
is a technique that models the
uncertainty of the natural world by
embedding randomness into the models
that we built Bayesian inference is a
probabilistic methodology that lets us
use prior knowledge to make predictions
and pyro is a probabilistic language
built using Python and PI torch that
lets us build Bayesian deep learning
models that are scalable and efficient
last week's coding challenge winner is
Shannon code who successfully built a
demo that uses a blockchain and AI
together he used open a eyes world of
bits environment to train a
reinforcement learning agent and the AI
stores the training results on an
immutable public blockchain great first
steps to getting a fully autonomous
training agent fork and star his repo
wizard of the week this week's coding
challenge is to use pyro
to create a simple Bayesian regression
model on a data set of your choice
details are in the readme github links
go in the comment section and the top
two submissions get a shout-out for me
next week please
for more programming videos and for now
I've got to go update my priors so
thanks for watching