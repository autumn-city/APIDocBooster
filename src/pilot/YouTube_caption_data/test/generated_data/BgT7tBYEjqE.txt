hello everyone uh today we are going to
look at
touch.nn.com
transpose 2d
which is like a boolean block of
generative adversarial neural networks
con
transpose
2d
which takes some argument so we we are
going to look at a very very simple
example
and
this argument
i'm going to write them here see in
your
input
channel size
so how many input how many channels does
your
input have
so for gp it has three
it also takes
output
channels
c out which i'm going to use cn to
represent input channels
and um c outer pairs and output channels
it
it also takes
the kernel
size
okay
pardon
p
output
padding
i'm going to use opaque represent so we
are going to see what all of this
mean in the competition
bias
b
group
g
dilation
d
[Music]
and i think that is all and separately
for the simplicity
we will use a batch size of one
bs
and my input height width of it is going
to be 2 which by the way right
and the
height
is also going to be
2.
okay so the input channels will be one
for simplicity counter will be three
three by three
stride will be two
sorry i didn't put stride
this should be
pardon s1
output pardon
is also one bias will be true yes we'll
use the firestone
and this two will be one by default they
are actually one
and the
we should not forget about destroyed
which which is
stride which is two
okay
so this modulus is kind of this formula
w
x
[Music]
x times w plus b
so x is your input and this x
and the
top loop which is the corner
um i mean
called kernel in some cases this w
or the color k
is
kind of randomly
created by pi touch
and there's also b this b
with the w
uh
all all of them are going to have
this
dimension so the input
x
is
always soft for will always have this
dimension
and the
top law
will always have this dimension cn
c out divided by a group
g
then k by k
k is three so you can actually specify k
the height and width of the of k to have
different dimensions
b will always have this dimension
and
y
will have this dimension b s
h out
c out h out then w out
all right but we actually don't know
what h out on uh the blue outs are so
let me write them
let me shift this paper a bit
okay
uh each out
the formula to compute each out which i
got from the pi touch documentation
is
h n minus one
times stride
minus 2 times pardon
times the dilation d
times k minus 1
plus 4 p
[Music]
why do you don't need to worry about
what group and dilation actually mean i
mean
by default they are one so we kind of
don't think uh much about that
the blue out
is wn minus one this top low n
times right minus two times pi n times
the dilation
uh
counter size minus one times output
padding plus one
and if you plug everything in this uh
everything here in the formula you will
end up with four and four
all right so let's see how the
computation is performed
so
say your input is this
one zero zero one on your top low
[Music]
w is one zero two
zero one
zero
one zero zero by the way this still
governs
this
dimension of this w
all right k is three three by three
that's why we have three by three
c n s one and this is also 1 c i'll
divide by group so 1 is also 1
and it is literally 1 by 1
by 3 by 3
this
but for simplicity i did not kind of try
to write
make the dimension to be one one three
three in the drawing
anyways
and we are going to add the
uh the bias but before we add the bias
let's compute this uh
let's try
count transpose
this x on w or
w on x i don't know which one is
uh right to say
okay
so the first thing that we need to do is
uh take this four and subtract
this output pattern so originally the
part the result has a dimension of three
by three because of the output button it
became four by four
so four minus output pattern one is
three by three so what you need to do
first is create
four by three by three
four minus one three by three
this is actually your original output
and
then look at this pattern one then part
this results by one so add
uh height and weight to each side of
each side of each side of this three by
three
so i'm going to come here and say excuse
my drawing by the way
so i've added
height
and width
to the
original output
now it is kind of five by five but
forget about that
so just don't forget this three by three
is like your original output
so what we need to do is
take this one
multiplied by each value in this top row
and that will give you this
portion
the result of this
this first portion so 1 times 1 is 1
1 times 0 is 0 1 times
2 is
2
and
0
1
so i took 1 and multiplied by everything
to get this first part then shift uh
two steps because we have stride of two
and that's how we are going to get this
second part
just like kind of normal
convolution marks
zero
times average and inside will give you
zero zero zero zero zero zero
then shift uh
two steps
to this
uh portion of this
big matrix
take 0 or multiplied by everything you
are going to get 0 0
zero zero zero zero zero zero zero
then shift two steps
to get this
part of this big matrix
take one and multiplied by everything
inside this w
so i'm going to end up with
1
0 2
0 1
0 1 zero zero
okay
i hope you are good
so
i know i told you that the original
output is actually this red matrix this
red one but the output padding is one so
since it is like that we need to take
this
this
part of the output of this red matrix
shift
right
one step
and shift down one step
because output pattern is one
so then the final output will include
this
part of the
uh of this big matrix
if the output padding was zero you are
not going to shift
to the right
one step
so you will end up with
a 4x4
it's four by four
sorry this is
should be like this
and
you need to add everything in each box
are the numbers in the box
but nevertheless our output is this part
of this big matrix so here uh one is one
i mean
we are not going to add anything because
it's just one inside the box and zero
yeah
zero here zero
zero then one
zero
this is two
zero plus two then zero
0 0
sorry this is 1
then 0 10 0
1 0 0
all right now we are done with this part
of the equation then plus bias
bias let's see it is one
dimension is
one and the value inside let's see it is
one for simplicity
and when you add it
obviously
sorry for my drawing by the way
when you add one to everything here
you will end up with
two
one
one one
one
[Music]
two zero three one one
two zero
one
sorry this is one one two one one
and this is your why
this is why this is the output that you
are going to get
uh thanks a lot for watching uh see you
in the next videos maybe i'm going to
make one more video to look at this same
module but a kind of
more complicated example maybe the input
with uh an input with
with three channels
uh thanks a lot for watching take care