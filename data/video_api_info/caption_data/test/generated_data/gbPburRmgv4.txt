i have a big problem last night instead
of sleeping because because i i do this
i don't sleep and then the next day i go
oh i'm super tired i wish i could get
some sleep and then just that cycle just
repeats itself
hello everyone today we're going to be
upgrading our rnn such that we can train
it to be able to output 10 when we feed
it a sequence of 2468. so essentially
what that means is rather than having a
many-to-many type of rnn which is what
we've had before with our hello example
we're going to be creating or we're
going to be upgrading our rnn library
such that it can also automatically
determine and train a many-to-one type
sequence
the way i encoded it in excel that seems
to work is just the following it was
just a very simplistic input vector that
i added to the network and you know this
is time step one it's time step two
times three times four at time step four
i wanted it to be able to determine or
to be able to figure out the pattern to
output ten for the other time steps i
really didn't care what it outputted we
could either do this one of two ways
first way is we could have a nil in all
of these all these sections the only
problem there is if you have a really
really large sequence that you want to
feed into the rnn that's going to waste
a lot of space and memory is option
number one and this is probably option
that i will do first just to ensure
things are working option number two is
let's say we have the same sequence
instead of having a
vector of size four as our target what
we're going to have is we're just going
to have one and so the network will just
have to
be able to determine be able to just say
you know if length of f is equal to
length of y or target then
it's a it's more of a many to many else
actually you know what because there are
other types of recurrent neural network
structures so one too many enemies many
which i haven't played around with let's
just say else if length of y is equal to
one then you know that that's as many to
one okay
that doesn't seem too too difficult
let's try option two
let's just prepare our new inputs up
here so now the only part that won't
work is back prop so here's what i'm
gonna do i'm gonna change this line here
this line it calculates delta output and
it calculates the loss which are the two
things that are confusing me but it also
treats targets as if it's a
matrix that has the exact same size as
input so inputs has a size four it'll
treat targeted if it has size four so
what i'll do here is i will say okay if
target has length one which is what
we've determined here then delta outputs
will be zero and loss will also be zero
which is exactly what we've implemented
here in excel actually you know what let
me take a step back for simplicity
because i think it'll be easier this way
let's start with let's start with this
if statement first so if length of
inputs is equal to length of target then
then we go ahead and then we set our
delta outputs and our new loss
accordingly that's simple enough now
here's a problem if length of y is equal
to one and last time step then we do
this actually you know what no no take a
step back if length is one that means
it's many to one and so now that it's
many to one if last time step then
calculate delta output using target else
delta output is equal to zero and that
should be that we go ahead and we try to
run that we get an error of course we do
over here is where it turned out and it
aired out with the add function meaning
that this here
and this here are different sizes i
wonder why so outputs input sizes one
two three four our output size is one
still giving me an error still in that
exact same line 730. oh
gotcha gotcha gosh i gotcha okay i see
what my mistake is so we're only
inputting one thing now because remember
with hello we had four bits that we were
inputting into into the network now it's
just one number so i just need to update
my input size as well one thing we also
need to do is we need to change up our
network so
instead of using softmax this will have
to be identity so what we see is our
network has now well first of all it's
definitely over trained but it seems
like it's working so we have a
many-to-one so many inputs two four six
eight and then we're just looking for
the one output which is 10 and over the
course of time it's kind of taught
itself how to output that just making
sure that we didn't break anything
though let me see if i can can you
imagine
can you imagine if those features that i
added just completely went and
obliterated everything else that we've
done before oh i would be so upset
let's just make sure it didn't it didn't
change anything and
i'm actually a little nervous okay so
yeah it looks like it's still loss is
decreasing
weights are updating and it's still able
to put the word hello okay that's all i
wanted to i wanted to double check