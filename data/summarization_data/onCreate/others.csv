Note that onCreate() is only invoked when the database file didn't exist so the DROP TABLE is really not needed. 
" And then that query you have to execute inside the callback method onCreate, which you have to override once you extend a class with the SQLiteOpenHelper class.  So that query you have to execute inside the onCreate.  Either you can execute it directly-- you can put the whole query directly inside a db.exeSQL. "
" And inside the SQLiteOpenHelper class, I will be putting a database-- I will be creating that whole structure.  There will be onCreate, there will be onUpgrade, insert query will be there, and update, delete-- all those queries will be there inside one class.  That will be the subclass of SQLiteOpenHelper class. "
" If the database already exists, but I've indicated through the database version value that I'm changing the version, that is that I've incremented it, then the onUpgrade method will be called. "
" Then once I've dropped the table, in order to recreate it, I'll simply call my onCreate method.  This is the one exception to what I just said that I wouldn't call the onCreate method directly. "
Below explanation explains onUpgrade case with an example. 
"Say, your first version of application had the DatabaseHelper (extending SQLiteOpenHelper) with constructor passing version as 1 and then you provided an upgraded application with the new source code having version passed as 2, then automatically when the DatabaseHelper is constructed, platform triggers onUpgrade by seeing the file already exists, but the version is lower than the current version which you have passed. "
"Now say you are planing to give a third version of application with db version as 3 (db version is increased only when database schema is to be modified).  In such incremental upgrades, you have to write the upgrade logic from each version incrementally for a better maintainable code"
Example pseudo code below: 
Notice the missing break statement in case 1 and 2.  This is what I mean by incremental upgrade.
"Say if the old version is 2 and new version is 4, then the logic will upgrade the database from 2 to 3 and then to 4 "
"If old version is 3 and new version is 4, it will just run the upgrade logic for 3 to 4 "
" So  initially, the default tip is going to be 15%.  So with that diviner the constant before  we do anything in the listener, great in   the onCreate method, will they seek bar tip dot  progress is equal to initial tip percent.  And we   also want to update the label appropriately. "
" Finally, we need to initialize the SDK.  So here, in the onCreate of our initial activity, we just type MobileAds.initialize, and you'll notice we can parse a context, and then there's a completion listener.  So if you're using mediation, you'll want to wait for the listener callback before loading an ad. "
" The first two steps are calling WindowCompat.set DecorFitsSystemWindows with false in your activities onCreate method and setting windowSoftInputMode to adjustResize in your activity manifest.  Together, these tell the platform that you're going to handle all insets yourself, including the soft keyboard insets. "
" As soon as you are ready, open the activity where you plan to show the Google Pay button and obtain a new instance of the paymentsClient inside of your onCreate method. "
 Now you see we've got it onCreate and an onUpgrade method. 
" In the onCreate method, we're going to start by creating a string to build the weather entry table using data defined within the weather entry contract. "
" Either you want to alter the table, or you want to drop the whole table which was previously used by the user. "
" And again, pass the control back to onCreate, because in onCreate, there will be a new table created for you. "
" There are some optional methods, also, which you can take a look at, like onDowngrade, onConfigure, or onOpen. "
 That will generate the Java class and add two methods named onCreate and onUpgrade. 
 Now let's go to the onCreate and onUpgrade methods. 
 I will never call these two methods directly.  They'll only be called by the SDK. 
" In the onCreate method, you should add code that creates your database tables and if you like, you can also add code to add data. "
" So, that command is called and my table is created. "
" I'll pass in my LOGTAG constant and a literal string as a message, Table has been created, and that's all I need to do in the onCreate method. "
 So I'll move the cursor into the onCreate method. 
 I'll call it within this class but not from the rest of the application. 
 I'll call the onCreate method. 
" Now I'll go down to my onCreate method, and I'll place the cursor right here before I call the ArrayAdapter code and I'll instantiate the dbhelper object.  I'll say dbhelper = new, and then I'll use my new class constructor method and I'll pass in this as the context, and then I'll get a reference to the database.  I'll call database = dbhelper.  And then I'll call a method that this class has inherited from SQLite database.  This returns a reference to the connection to the database, and I'll be able to use that connection to do things like inserting data, retrieving data, updating, and deleting.  Simply by calling the method, that will trigger the onCreate method of my database open helper class, and in turn that will create the table structure. "
 Note how we're using all of the weather entry constants to write our SQL statements. 
"Suppose for the first time deployment , database version was 1 and in second deployment there was change in database structure like adding extra column in table.  Suppose database version is 2 now."
"For what it's worth, it's also a bad idea to catch exceptions in onCreate().  If the method returns successfully (doesn't throw), the framework thinks the database was created successfully."
