In this video I'm going to talk about the concept 
of random seed and also I'm going to talk about  
numpy.random.seed in numpy package and also by 
the end of the video we are going to talk about  
random.seed in the random module in python 
programming language. So please stay tuned.  
Now let's take this example. Suppose that I want 
to roll a dice with the python. So rolling a dice  
is equivalent to generating random integer numbers 
between 1 to 6. And suppose that I want to do this  
stuff in python and using the numpy package. 
In order to do so, that's very simple, I import  
the numpy package as np. Then I simply type 
np.random. It means from the numpy package I want  
to use the random section of that numpy package 
and remember that this numpy package has different  
sections for different things for example it 
has a section called linear algebra which is  
used for doing linear algebra stuff. But also 
it has a section called random which is used for  
dealing with random stuff. So I simply type 
np.random it means from the numpy package I want  
to use the random section of that numpy package 
and then I want to use a function called randint  
which is used for generating random integer 
numbers. So I want to generate random integer  
numbers between 1 to 6. So I should pass 1 and 
7. And maybe you ask why 7 and not 6? Because  
this value is exclusive not inclusive. So if I 
want to include 6 then I should write 7 because  
remember that this value is exclusive. That's it. 
And then I should simply pass size equals to three  
because as I have mentioned suppose that I want 
to generate 3 random integer numbers between 1  
to 6. It is equivalent to rolling a dice for three 
times and then I store the results let's say in a  
variable let's say called x. Now if I print the x 
variable you can see here is the results and it is  
equivalent to rolling a dice and seeing for the 
first time and the second time you roll the dice  
seeing three and the third time you roll a dice 
for example you may see four that's it and if I  
run the code again and again and again you can 
see it is possible to get different results.  
Why? Because it's exactly like rolling a dice 
which is totally random and this process is also  
random. So whenever you roll a dice it is possible 
to get different results. And also it is possible  
to get the same results. For example if you roll a 
dice and see 6, it is possible to roll a dice and  
again see 6 and it is possible to roll the dice 
and again see 6. Of course the probability of  
that event is not very high but it is possible. So 
this is the reason I use the term 'possible'. So  
whenever I run the code it is possible to get 
different results. Why? Because it's a random  
process. And now suppose that I'm a teacher of a 
small class and these are my students. Mohammad,  
David, Ali and Alex. And suppose that I want to 
define a homework for these guys and they're going  
to do their homework and for doing their homework 
they need three random numbers between one to six.  
And this is not an imaginary example this is a 
real example. Because as you know there are some  
subjects like for example bank queue simulation 
which for example in this subject students  
want to simulate the bank queue and in order to do 
their homework they need for example three initial  
random numbers from the normal distribution or 
whatever distribution it is so generally in order  
to do their homework they need to start with for 
example let's say three initial random numbers.  
And suppose that I as a teacher ask the students 
to for example generate three random numbers and  
do their homework based on these three numbers. So 
as you can see for example Mohammad goes and runs  
this code and if he runs the code for example 
he gets six two five. And David runs the code  
again he will get for example something like five 
one five. And for example Ali runs the code again  
and he will get three two five. And Alex 
for example would get something like this.  
So as you can see every student is going to 
get different results is going to get different  
random numbers and for me as a teacher it's very 
difficult to check their homework; because every  
one of them is using different initial values for 
doing their homeworks. And also there is another  
problem for example suppose that David runs the 
code and gets random numbers like this 2-3-1 and  
even if David himself runs the code again he will 
get different results. So it is not consistent  
it is not repeatable so even David himself cannot 
repeat his process. And in order to handle this  
problem we want to use something called random 
seed and please remember that explaining the  
meaning of random seed takes time so if you don't 
understand the meaning of random seed at first  
don't worry about it; you are going to understand 
that completely by the end of the video. So I can  
ask the class I can ask the students to use 
a random seed equals to for example let's say  
42 or whatever number I want but for example let's 
say 42. So in order to do so they can simply type
np.random.seed and for example they should pass 
a number and for example suppose that I have told  
the class to pass 42. So if every of them pass 42 
to this random.seed and if they run the code they  
will get something like this and if they run the 
code again and again and again and if they run a  
code thousands of times, infinite number of times, 
they are going to get the same results and now  
it is reproducible. So the general idea of using 
random seed is to make all the stuff reproducible,  
make something repeatable. So you can see that 
now every one of the students in this class can  
reproduce this result of generating random numbers 
and all of them are going to get four five three.  
So not only they are going to generate random 
numbers but they are going to generate consistent  
random numbers, reproducible random numbers. So 
as long as anyone passes 42 to numpy.random.seed,  
they are going to get the same results. But 
for example if anyone passes another number to  
numpy.random.seed for example suppose that someone 
passes 0 to numpy.random.seed and if he runs the  
code he will get something like this so based 
on the value you pass to numpy.random.seed you  
are going to get different results. But as long 
as you pass the same number to numpy.random.seed  
everyone in the class will get the same results. 
In order to better understand the concept of  
random seed suppose this process of generating 
random numbers ,which is a random process.  
Consider this random process as an algorithm 
which if you pass an initial value to this  
algorithm you will get the output. So for example 
if you pass to this algorithm if you pass a value,  
an initial value, for example equals to zero then 
you are going to get the corresponding output  
and as long as you pass 0 to this 
algorithm you are going to get  
the same output. But if you change the input 
for example if you change the input from 0 to 42  
you are going to get different outputs. So as long 
as you pass the same input to this random process,  
to this algorithm, you are going to get the 
same output. For example in this example that  
we have talked, if you pass random seed equals 
to zero then you are going to get five six one  
for generating three random numbers. And if you 
pass random seed equals to 42, you are going to  
get four five three. But remember as long as you 
pass 42 you're going to get 4 5 3 every time you  
run the code. But if you change the value (the 
input value, the initial value, the random seed)  
then you are going to get different results. 
But as long as you input the algorithm the the  
same value you're going to get the same results. 
And remember that this concept of random seed is  
used in different packages of python programming 
language. For example it is used in scikit-learn  
for model selection, train test split and doing 
all the stuff in different models. And also it is  
used in neural network and Keras and Pytorch and 
those other packages which are available in python  
and it's a very very important concept it's a 
very useful and practical concept so you should  
really know about this random seed. And as I have 
said this concept of random seed is available in  
different packages. So far we have talked about 
the numpy package but now let's talk about the  
random package in python. And remember that 
random package is a built-in package so you  
don't need to install that package because it's a 
built-in package in python programming language.  
And now let's do the same thing that we have 
did in numpy and now suppose that we want to  
generate three random numbers between 1 to 6 (like 
rolling a dice for three times). So we define an  
empty list which is called let's say x and then 
we use a for loop because the functions in the  
random package does not have any argument called 
size so we should do that with the for loop.  
So I simply have for i in range of, for i in range 
of for example three because I want to generate  
three random numbers between one to six, then 
I'm simply using x dot append because I want to  
append something to that list which is called x. 
And the thing that I want to append to that list  
is random it means from the random package I 
want to use a function which is called randint.  
And I should pass one and six and remember that 
this six in the random package is inclusive it's  
an exception. Because in a lot of places in python 
program language as you have seen in the numpy  
package this second value is exclusive but this is 
an exception and this value in the random package  
is inclusive. That's it. So after appending that 
to the x list then outside the for loop if I print  
the x variable which is our list and if I write 
a code you can see here we have three different  
numbers and if I run the code again and again 
and again it is possible to get different results  
because it's a random process. So now I can apply 
the same concept of random seed in this package as  
well. So I simply type random.seed and for example 
suppose that I want to pass zero. So ifIi run the  
code you can see I get these results and if I run 
a code again and again and again I'm going to get  
the same results and for example if I pass 42 
and if I only code again and again and again  
and again I'm going to get the same results and 
it is reproducible. But here is another question  
that you may ask. Maybe you say okay I have passed 
random seed equals to one but in numpy I have get  
five six one. And in random package I've got 
four four one. And also I have passed random  
seed equals to 42 and I've got this in numpy and 
I've got this in the random package. So maybe  
you ask what's the problem? And the answer is 
there is no problem! Because the random package  
is using an algorithm and the numpy package 
is using a totally different algorithm. So  
the algorithms they are using is totally 
different. So if you pass a value to algorithm A  
and if you pass the same value to another 
algorithm let's say called algorithm B, you  
do not expect to get the same output because they 
are different algorithms. So the random package  
is using one algorithm and the numpy package is 
using another algorithm which is totally different  
from the random package. So because they are using 
different algorithms for generating random numbers  
then when you pass for example 0 to the numpy you 
will get this and if you pass 0 to random module  
you will get this. Now I really suggest you to 
watch this video which is on the screen now.