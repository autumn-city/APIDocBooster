If you've got an app that
controls your whole screen,
typically we let the user
swipe the screen away.
But some apps like
the emoji drawing tool,
require the app to draw
all over the screen.
And you don't want the app disappearing
when you're interacting with it.
So you can disable the swiping action.
But then the problem is,
if the app has got the screen locked and
the swipe is disabled,
then how do you get rid of it?
So for that,
we have a press to dismiss action.
Let's start up a sample to
see how all of this works.
Let's go to file, import sample, and
we're looking for watch view stub.
So create that with the defaults.
Now that it's ready,
let's run it on the wearable.
You can press and
hold your finger on the screen.
And this X pops up.
And when you tap the X,
the app goes away.
So that's a dismiss overlay view, and
it was included in the sample already.
It's very easy to use.
Let's look at the code for
it in the sample.
If we go to the wearable,
res, layout, main activity.
You'll see we have the dismiss
overlay view defined here.
It's also invisible by default.
You can see here, we grab a reference
to the dismiss overlay view.
Here is where we create
a gesture detector.
And here is where we dispatch that such
events to the gesture detector, so
that the dismiss overlay
view can receive them.
One limitation of this sample is that,
it does not prevent swipe actions.
If you try it out,
the app will disappear.
So how do we go about preventing that?
The solution is to override
the default theme to do this.
Just go back to the project view,
and go to source, res, values, and
then right-click and
create a new themes.xml file.
We creat our own custom theme like this.
This says to inherit from
the device default theme, and
to implement an attribute windows
swipe to dismiss, and set it to false.
Now we need to activate the theme
in the AndroidManifest.xml.
With the theme activated,
now we can run the sample again.
You'll see that now,
you can not swipe the app away.
But you can exit it using
a dismiss overlay view.