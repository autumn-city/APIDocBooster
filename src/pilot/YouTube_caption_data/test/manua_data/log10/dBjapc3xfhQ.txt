welcome to the programming with python course 
python is a versatile high-level programming  
language available on multiple platforms it's a 
language that's used by companies large and small  
to build a diverse range of applications areas 
that python is used in include web development  
data analytics and business forecasting the Python 
programming language syntax is very similar to  
English it's intuitive and beginners will often 
quickly understand what's going on it's also a  
great choice for experienced programmers who will 
appreciate its power and adaptability because  
python is a very popular software development tool 
it's important for you as a new developer to know  
how it works and to know how to code with it this 
course covers the key points you need to know to  
begin programming in Python starting with module 
1 you'll get started with a Python programming  
language an Associated foundational Concepts 
you'll learn to recognize common applications  
of python and you'll be able to explain 
foundational software engineering Concepts  
use operators to program output in Python and use 
control flow and Loops to solve a coding problem  
and in module 2 you'll build on what you've 
learned in the first module by learning about the  
Core Concepts that underpin the Python programming 
language variables and different data types in  
Python and you'll get to use control flow and 
Loops to execute code under specific conditions  
this module also introduces you to working 
with functions and data structures in Python  
recognizing errors determining their causes 
and deciding how to handle them and creating  
reading and writing data in files in module 3 
you'll learn about the programming paradigms of  
functional and object-oriented programming you'll 
use functions to explore algorithmic thinking  
furthermore you'll learn how to work with 
objects classes and methods in Python  
then you move on to dealing with modules 
packages libraries and tools in module 4.  
here you'll learn how to find import and 
use popular python modules and packages  
leverage powerful tools to optimize the 
programming workflow you'll discover different  
types of testing and their features and you'll 
be able to use testing tools to write a test  
module 5 is the graded assessment where you 
get to demonstrate your python coding ability  
you'll be able to exercise the skills and 
knowledge from this course and you'll have the  
opportunity to reflect on the course content and 
the learning path that lies ahead of you you may  
have encountered some Concepts or terminology 
in this video that you don't fully understand  
don't worry about that right now this course 
is designed to address all such issues and  
give you a solid coding foundation in Python 
enjoy the course the developer that wrote  
python loved Monty Python's Flying Circus 
ATV show um instead of the snake for python  
he thought the name python was short and 
cryptic and he made it the language name  
hi I'm Leila risby I am a back-end software 
engineer on Instagram calling in San Francisco  
I've been coding in Python for 10 years it was 
the first programming language I learned I used  
python every single day for my job at meta it's 
my favorite language to write in because it's  
so easy to use and simple the first application I 
had to code in Python was to create a calculator  
since python was the first language I learned in 
my first application in Python was a little tricky  
for me to build learning how to indent right how 
to do spacing learning the syntax and learning  
what Loops are and all these core computer science 
Concepts was very hard for me um but I tried for  
a while and it worked out some important ways that 
you have interacted with python in your day-to-day  
activities likely include using Instagram using 
Facebook using Google or Spotify python is such  
an ubiquitous language that you likely used it 
regardless whether or not you know you've used  
it python is also used is for tensorflow which 
is a machine learning framework that Airbnb uses  
to classify images and some healthcare companies 
use to classify MRI data at meta python is used  
for the Instagram background it is used for ads 
machine learning algorithms it is also used for  
our production Engineers who keep our services 
alive and running you should go through the  
process of learning python even though it might 
be challenging because it's an easier language  
to learn it's simple it has a lot of libraries 
that support it so it also makes it easier to  
build more and more features because there's a 
lot of Engineers that use it already so it makes  
it easier to develop features quickly and you can 
see results a lot faster with python thanks for  
watching the video with us today and good luck on 
your journey as a software engineer computers and  
their programs are integrated into our lives at a 
scale we could not have imagined over the past 20  
years we have seen dramatic jumps in technological 
gains in areas of distributed computing cloud  
computing and AI improvements such as voice 
and face recognition and self-driving cars  
in the next few minutes let me give you a brief 
overview of the history of programming and you  
will also learn the basics of how programming 
works Computing dates quite far back in our  
history Charles Babbage in 1822 while studying 
at Cambridge University in Britain was working on  
bettering calculating devices such as navigation 
charts and astronomical tables which at the time  
were used by many ships at sea Babbage came 
to the realization that all these calculating  
devices contained various amounts of human error 
and he wondered if there was a better solution his  
solution was the different engine the Difference 
Engine used mechanical gears with numbers zero to  
nine etched onto their gaps separated by Gear's 
teeth its key function was to carry out one  
operation that was computed by manually moving 
hand cranks until the final answer was revealed  
after building a working prototype Babbage spent 
many years working on further improving his  
designs and constructing improved versions of the 
original idea he created another device called the  
different Engine 2 but ultimately produced a new 
and better concept called the analytical engine  
the analytical engine is widely accepted 
as being the basics of modern day computing  
babbage's friend Ada Lovelace published 
a document describing how the analytical  
engine could perform a sequence of calculations 
which is essentially what a computer program does  
however the analytical engine was 
never completed and Babbage like  
a lot of developers did not invest in 
good documentation with the historical  
side of things covered let's now delve 
into understanding what programming is  
before I explain programming it's helpful 
to understand how computers work at the most  
fundamental level computers only understand binary 
code which consists of two digits zero and one  
this may seem quite strange at first but with 
a little explanation it will all make sense  
zero and one relate to different electrical 
States similar to a light switch zero is equal  
to off and one is equal to on for example in 
programming when you calculate numbers cost or  
any arithmetic you mostly use decimal numbers 
every program written needs to be converted to  
binary code or machine code an example of decibel 
to Binary conversion is decimal one is binary one  
decimal 2 is binary one zero decimal three is 
binary one one and so on a computer represents the  
binary code by using tiny electrical conductors 
called transistors these transistors are housed  
inside the central processing unit CPU which 
is essentially the brain of a computer when a  
program is written using any type of language it 
needs to be compiled or interpreted the outcome  
is to turn readable programming code for us 
into readable programming code for the computer  
it's essentially extremely hard for humans to 
read and understand binary and therefore using it  
is error prone it's far easier for us to read and 
write programming languages so what is programming  
programming is the ability to provide a 
computer with a set of instructions in  
a particular language that it can understand and 
perform those operations or tasks in other words  
you need to tell the computer what you want it 
to do in a formatting language it can understand  
programming is a skill the more you 
practice and learn the better you become  
at first it can take quite a while to write 
straightforward programs as you progress  
you'll become more familiar with the language and 
how the logic and conditions should be applied  
programming is also a creative skill that's 
because you can write computer programs to  
solve problems in many different ways and 
that brings us to the end of this video you  
now know the brief history of programming 
and how typical computer programming works  
would you like to be able to program on 
different platforms for example Windows  
Mac and Linux in an easy syntax similar to the 
English language then python is your solution  
it's a high level programming language 
that works on many different platforms  
by the end of this video you'll know the 
benefits of learning Python and understand  
where to use python python was created by Guido 
van Rossum and released in 1991. it was designed  
to be readable and takes a lot of similarities 
between the English language and Mathematics  
since its release it has gained greatly in 
popularity and supports a rich selection of  
Frameworks and libraries at present it's currently 
one of the most popular programming languages to  
learn today it's widely used in all areas of 
business such as web development artificial  
intelligence machine learning data analytics 
and various different programming applications  
python is also very easy to learn and get started 
with given that the syntax resembles the English  
language it makes it easier to read and decipher 
programs that are written in Python also require  
less code in comparison to programming languages 
such as C or Java one of Python's key advantages  
is that it makes developers very productive and 
allows projects to be completed more quickly  
creating good software that is used by many 
is hard and very time consuming the simplistic  
nature of python abstracts a lot of complexity 
away from the developer to allow them to focus  
on the task at hand given the language is quite 
easy to understand and pick up it can be an easier  
route to market for new programmers starting 
out to get something produced in much less time  
compared to some other languages python has a 
much easier learning curve it lends well to the  
philosophy of write less do more now that 
you can describe the benefits of learning  
Python and where it can be used it's also good 
to know that python developers are in high demand  
becoming a python developer makes for a good 
career choice when you start using python  
it's important to make sure that it works 
correctly on your operating system with your  
chosen integrated development environment or 
IDE in this case Visual Studio code or vs code  
so an essential step in using this software is 
to make sure that the right version of python is  
used as The Interpreter when running vs code in 
this video I will demonstrate how to set up vs  
code on Windows and make sure that it points the 
correct python interpreter so I start by opening  
the vs code editor to do this I click on the 
Windows icon in the taskbar which brings up a menu  
I then type Visual Studio code in the search 
bar the best match for the search is the  
visual studio code app which I click on to 
open vs code is now open next I select get  
started with python development this is a useful 
guide to setting up python on the vs code IDE  
the first step in the guide is to install python I 
already have python installed and I can verify it  
by typing python version in the terminal to open 
the terminal select the terminal tab on the top  
menu and choose new terminal after I press enter 
it displays python version 3.10 which is correct  
the second step in the guide is to create a python 
file I do this by clicking on the create a python  
file option in the guide menu and then clicking 
on the create python file button that appears  
next I put in a print statement 
by typing print hello world  
I will explain what a print is at a later stage 
but for now you just need to know that it's for  
printing out a value within the terminal itself 
now I save this as a python file in my root  
level directory by clicking on file save as and 
then entering the file name hello world Dot py  
py is the file extension I have to use when 
saving a python file the next step in the guide  
is to select a python interpreter and I click on 
this option in the guide menu and then I click on  
the select python interpreter button that appears 
which brings up all the versions of python I have  
installed I do this because I want to make sure 
that when I run the python script it will choose  
the correct interpreter the version that comes 
up is python version 3.10 and I set this as The  
Interpreter because it is the most recent version 
to test and verify that everything is working  
correctly I have to run the python file in the top 
right of the screen you'll notice a play button  
I close the guide so that it displays better 
the play button has a drop down menu that has  
the option for running the python file or running 
it in debug I click on the Run python file option  
note in the terminal window that it has run the 
file using python 3.10 as The Interpreter and I  
get the output of hello world and that means 
that I'm now set up to use Python directly  
in the IDE so I can run and debug my scripts 
you now know how to create and save a python  
file and how to select the correct python 
interpreter to run your files in vs code  
when you start using python it's important to make 
sure that it works correctly on your operating  
system with your chosen integrated developer 
environment or IDE in this case Visual Studio  
code or vs code an essential step in using the 
software is to make sure that the right version  
of python is used as The Interpreter when running 
vs code in this video I will demonstrate how to  
set up vs code and make sure that it points to the 
correct python interpreter on my Mac when I open  
Launchpad I type in visual or Vis for short and 
it opens vs code vs code provides a walkthrough  
guide for setting up python this can be found 
on the welcome screen however if I don't see it  
in the main view I can click on more and then 
I click on get started with python development  
it brings up the guide I can use to verify 
that I have everything set up correctly  
next I check that python is installed by opening 
the terminal window a click on the bottom left  
of the screen and then on the terminal tab then I 
type python space Dash Dash and the word version  
when I hit enter notice that it returns 
python version 3.10 which is correct  
by default Mac comes with python version 2.7 
but this is not the version I want to use  
instead I want to use the most recent version 
next I create a simple python file to do this I  
click on create python file in the get started 
with python development guide I put in a print  
statement by typing print hello world I will 
explain what a print is at a later stage but for  
now you just need to know that it's for printing 
out a value within the terminal itself now I save  
it by clicking on file save as and then entering 
the file name hello underscore World dot p y  
p y or Pi is the file extension I have to use 
when saving a python file now I have to check  
that I can run that file and to do that I need 
to set my python interpreter so I go to the get  
started with python development guide again and I 
click on select python interpreter which opens up  
the python interpreter screen here I can choose 
which version to use from the drop down menu  
notice that I have different versions of python 
installed but the one I want to use is the one  
I installed through Homebrew and it is also the 
recommended one to bring up the python interpreter  
screen without the get started guide I can press 
the command key shift and the letter p then I  
type in Python followed by a colon and I choose 
python select interpreter from the top of the menu  
then I press enter When selecting the version 
of python it's best to choose the recommended  
one but make sure that it's the latest version 
that you have installed on your operating system  
next I'll run the file first I close the get 
started guide then in the top right of the screen  
you'll notice a play button with a drop down menu 
which has the option for running the python file  
or running it in debug I click on the Run python 
file option and then I click on the play button  
note that the output appears in the terminal I 
have now validated that I have vs code pointing  
to the correct python version that I want to use 
and that I am able to run and execute scripts  
directly on the IDE you now know how to create and 
save a python file and how to select the correct  
python interpreter to run your files in vs code 
did you know that python can be run directly in  
the command line on Windows or terminal in mac 
and Linux in this video you'll learn more about  
the core differences of running code from the 
command line by the IDE as well as exploring ways  
in which you can run programs through python let's 
explore the two main ways to run Python's programs  
the first way is using the python shell and the 
second way is to run a python file directly from  
the command line terminal the python shell is 
useful for running and testing small scripts  
for example it allows you to run code without the 
need for creating new DOT py files you start by  
adding Snippets of code that you can run directly 
in the shell let's explore the second main way to  
run Python's programs which is running a python 
file directly from the command line or terminal  
note that any file that has the file extension 
of dot py can be run by the following command  
for example type python then a space and then 
type the file name with the dot py extension  
vs code is a better choice than using the python 
shell or running it directly from the terminal  
because besides including both of these options it 
comes with a plethora of additional improvements  
that make coding in Python a better experience 
Visual Studio code also offers features such  
as Auto completion debugging and code syntax 
highlighting white space and indentation helpers  
I'm now going to demonstrate the different ways 
that you can run python programs in vs code  
there are two options to run programs through 
python one is to run directly from the command  
line or The Terminal if you're on Mac and then 
the other option is to run directly from the  
IDE which in this case is Visual Studio code 
let's find out how to do this first I open the  
terminal window or command line window from 
within the IDE by clicking on the terminal  
menu and selecting new terminal now I run the 
helloworld.py script directly from the terminal  
so I can run this by typing the command Python 
and then the name of the file helloworlds.py  
followed by the name of the file then hit 
the enter key the result is hello world  
there's a second option using the terminal 
which is entering it into the python shell  
so if I only type the python hit the 
enter key it opens a python shell  
approach here I can write code and run 
it directly within the terminal window  
I can for example use the same code that 
I have above the print hello world code  
I hit the enter key and that will print out 
the words hello world directly in the shell  
let's say I want to exit from the shell I then 
type in the word exit as this is a function  
I must add the parenthesis hit the enter 
key and now I'm back in the command window  
to do the same from within the IDE 
I just close the terminal window  
here I can run any Python scripts from the IDE 
directly by using the buttons in the top right  
hand corner of the screen by selecting from the 
drop down either the Run python file or the debug  
python file now I click on the Run button and the 
terminal should open automatically the result is  
hello world that is printed you have now explored 
the two options that are available for running  
python code directly from the terminal or command 
line and from the IDE that brings us to the end  
of this video you now know the core differences 
of running code from the command line by the IDE  
you are also able to demonstrate ways in which 
you can run programs through python in this  
video you'll explore python syntax and learn how 
both white space and indentation can impact a  
program when used incorrectly in vs code I create 
a new file called python underscore syntax Dot py  
I start by using a print statement to generate a 
line of text don't worry if you're not familiar  
with print or variable declaration at this point 
as that will be covered later in the course  
I type print followed by the string hello 
when I click on the Run button the text  
hello appears in the terminal panel now let's 
say we want to use another print statement on  
the same line which will output the text Value 
World so I add a space and then type another  
print statement with the string of Worlds and 
we expect this to give us the words hello world  
but when I click on run we actually get an error 
specifically it says syntax error invalid syntax  
this happens because The Interpreter doesn't know 
when the new line or statement occurs there are  
two ways to solve this problem one is to move 
the second print statement to another line I do  
this by placing the text cursor before the print 
statement for worlds and then pressing the enter  
key to move it down one line when I click on run 
this time there is no error and I get the words  
hello and worlds on separate lines let me undo the 
edits I made to my code by pressing Ctrl and z or  
command Z on a Mac and then try the second method 
which is separating the two print statements with  
a semicolon and a space when I click on run 
again it also runs both statements as expected  
next you'll cover the impact of white space in 
Python syntax I first clear my screen and then  
declare a variable and assign it a value by typing 
x equals one plus two on the next line I will add  
a print statement for x before I click on run 
however I'll go back to my variable assignment  
and add a random number of spaces around the plus 
symbol doing this will not cause any problems with  
this line however issues will arise if I add a new 
line or an end statement to demonstrate it let's  
input a new line and type Plus 3. running this 
code then returns a value of 3. what has happened  
is that The Interpreter has executed our first 
line of one plus two correctly despite the extra  
white space but it did not account for the plus 
3 on the second line there are a few ways to work  
around this issue the simplest approach is to use 
a force line to do this I type A backslash at the  
end of the first line now when I click on run it 
returns a value of 6 which means that both lines  
have been accounted for to summarize any amount 
of white space or indentations on a line is fine  
but keep in mind that if you are combining it with 
additional lines then you will need to give clear  
indicators of where a new line has occurred 
next you will explore indentation in Python  
I start by clearing my screen and declaring the 
new variable name with a string value of John  
I want to write an if statement which will return 
John only if the name variable has a new value of  
John I do this by typing if name double equals 
John and then on a new line I inputs a print  
statement for name to make this program work 
I need to have an indentation before the print  
statement which vs code added automatically 
when I click on run I get back John as expected  
but what happens when the indentation isn't there 
if I delete the indentation from my code and then  
run it again I get the error indentation 
error expected in indented block this tells  
us that an indentition was not found where it 
should have been fortunately the error message  
directs us the specific line where the issue was 
detected I could then edit my code and fix it  
when writing programs in Python it's a good habit 
to read the output whenever you encounter an error  
as you are often given the specifics of what went 
wrong and where it happened as you noticed here  
variables are an essential part of programming and 
they are used to store all different types of data  
you might even say they are the Cornerstone of 
programming this is because they allow you to  
work with and manipulate data therefore it's 
important that you can identify variables and  
recognize how they are used declaring variables in 
Python is very straightforward all you need to do  
is declare a name and assign it to value the word 
variable refers to something that can be changed  
to do this in Python for a variable that has 
already been declared you only need to reassign or  
re-declare it let's explore an example let's say 
the variable X has been assigned the value of 10.  
to change this you only have to redecure 
it so it will have the value of 20.  
the examples so far have relied on simple 
naming conventions such as x y and z  
when working on a project with other developers 
it will become increasingly difficult to know what  
these variables mean or refer to as a programmer 
you will write a loss of code over time and if  
it's been a few months you'll most likely not 
remember exactly what the code was supposed to do  
using generic variables like X and Y doesn't 
give any information about that variable and  
where it is used giving meaningful names to your 
variables that make sense in the given context  
will allow you and other programmers to easily 
understand what's going on as a programmer it's  
important to understand that data will change 
throughout the life cycle of your program  
whether it's getting user input via a web 
form or working with variables inside a  
code itself the key function of the variable 
is to keep a reference to some sort of value  
now that you have a basic grasp of variables 
and their role in Python let's move on to a  
more practical demonstration of the variables 
and how to use them I'll demonstrate how to  
use variables in Python but first I want 
to briefly talk about naming conventions  
there are different options available to you as a 
developer when it comes to naming your variables  
one option is called camelcase the first 
letter of the first word is lowercase and  
the first letter of every word after that 
is uppercase with no spaces between words  
for example if I have a variable called my name 
I'll put the M of my in lowercase and the N of  
name in uppercase with the rest of the letters 
in lowercase and no space between the words  
I can take a different approach with 
snake case when using snake case you  
keep everything in lowercase letters 
but you use an underscore between words  
so if I want to make the variable my name my 
underscore name would be the result of this  
approach although you have different options as 
a developer it's a good idea to be consistent  
when you are creating variables across your 
programs let me clear the screen so I can begin
so I create a variable in Python by initializing 
a variable and assigning it to value  
all I have to do is name the variable for example 
if I type x equals 5 I have declared a variable  
and assigned it a value I can also print out 
the value of the variable by calling the print  
statement and passing in the variable name which 
in this case is X so I type print X when I run  
the program I get the value of 5 which is the 
assignment since I gave the initial variable  
Let Me Clear My screen again you have several 
options when it comes to declaring variables  
you can declare any different type of variable in 
terms of value for example X could equal a string  
called hello to do this I type x equals hello I 
can then print the value again run it and I find  
the output is the word hello behind the scenes 
python automatically assigns the data type for  
you you'll learn more about this in an upcoming 
video on data types you can declare multiple  
variables and assign them to a single value as 
well for example making a b and c all equal to 10.  
I do this by typing a equals b equals C equals 
10. I print all three values separately and when  
I click on the Run button again I find that all 
three of those assignments have 10 as their value  
again I clear my screen before I move on to the 
next example yet another option you have is to  
do multiple assignments for instance I type A B 
C separated by commas equals one two three also  
separated by commas in this way I have assigned 
each of those values to the corresponding letter  
so a equals 1 b equals two C equals three to 
test this out I can print all three variables  
click run and I'll find that the values one two 
three correspond to the Declaration above another  
important point that you should be aware of is 
variable assignments and how you can change it  
a variable is subject to change throughout 
the life cycle of your program you will make  
changes to the value or the assignment of the 
variable itself so you need to know how to do that  
let's explore another example I type a equal to 
10 and I print that value after this I change  
the value of a to 5 and I print that value 
to when I click the Run button a prints out  
is 10 on the first line and there's five on 
the line below because value was reassigned  
finally you need to know how to delete a variable 
my variable is a its value is 10 and I've printed  
it out and then on a new line I type the delete 
command or Del for short followed by a space and  
the letter A which represents my variable I 
then print the variable by using the print  
function and then I click the Run button 
the value is first given as 10 because the  
variable still existed but after the deletion 
it shows an error saying that a is not defined  
you just covered variable naming conventions 
now you know how to declare a variable and  
assign its value and you know how to declare 
any different type of variable in terms of value  
you can declare multiple variables and assign them 
a single value and you can do multiple assignments  
finally you also learned how to delete a 
variable that brings us to the end of this video  
you can now identify variables and recognize 
how to use them in Python computer systems  
need to interpret the different data values in 
programming data can come in different types by  
the end of this video you'll be able to describe 
the different data types in Python a data type is  
an attribute associated with a piece of data that 
tells a computer system how to interpret its value  
knowing what data types to use ensures that 
data is collected in the preferred format  
it also ensures that the value of each property is 
as expected python offers raw data types to allow  
data to be assigned to variables or constants 
the five main types which are classed as literals  
consist of numeric sequence dictionary Boolean and 
set some of these data types can be extended for  
example the numeric data type can consist 
of types integer float and complex number  
for now let's just discuss data types 
in more detail starting with numeric  
in programming you need to decide on what type 
will suit your needs for example when working  
with currency you are most likely going to use 
the numeric type of float as it allows decimal  
places to be counted to determine a type of 
variable python also provides a function named  
type which will provide the Class Type based 
on the variable being passed python offers  
three different kinds of numeric types which are 
integers floats and complex numbers the integer  
class represents any non-fractional number 
that is whole numbers with no decimal places  
these numbers can be positive or 
negative for example 10 or minus 10.  
floats are numbers that contain decimal 
places and are represented by the float class  
examples are 10.5 or 6.7 the complex class is used 
to represent complex numbers which are made up of  
both real and imaginary numbers a equals 10 plus 
10 J next let's explore the sequence data types  
sequence types are classed as container 
types that contain one or more of the  
same type in an ordered list they can also be 
accessed based on the index in the sequence  
python has three different sequence 
types namely strings lists and tuples  
let's explore each of these 
briefly now starting with strings  
a string is a sequence of characters that is 
enclosed in either a single or double quotes  
strings are represented by the string class or 
Str for short lists are a sequence of one or more  
different or similar types they are essentially 
an array and hold any type inside square brackets  
each item can be accessed by its index tuples 
are similar to lists in many ways they contain  
an ordered sequence of one or more types but 
the main difference is that they are immutable  
this means that the values inside the 
Tuple cannot be modified or changed  
tuples are represented by the Tuple class 
and hold data types wrapped in parentheses  
the next data type is dictionary dictionaries 
store data in a key value object structure  
each value can be accessed directly by its key 
dictionaries can also store any data type for  
example suppose you declare a variable named 
ed and assign a dictionary to it the dictionary  
contains a grouping of key value pairs the first 
pair is a 22 where a is the key and 22 is a value  
the second pair is B 44.4 where 
B is a key and 44.4 is the value  
you can then output the value of 
22 by accessing its key which is a  
next let's explore Boolean data types which 
is simply represented as true or false  
combined with logical operators booleans are used 
to check whether a condition is true or false  
in this example I'm checking the underlying 
data type of the values true and false the  
class bull is returned meaning it is Boolean 
the last data type is set which is an unordered  
and non-index collection of non-repeated values 
let me demonstrate an example of this data type  
suppose I assign a set of four items to the 
variable named example set I then check the  
type of the value stored in the example set 
variable by passing it to the type function  
python reports that the underlying data type 
that the example set variable holds is a set  
in programming data type is an important concept 
variables can store data of different types  
and different types of data can do different 
things let's explore these in further detail  
whenever you declare a variable in Python 
the data type is automatically assigned for  
you based on the value of that variable let me 
demonstrate this by typing a variable called a  
and assigning it to value of 10. to check the data 
type that has been assigned by python I select  
print and use the type function I then pass in 
the variable a as the parameter and click on run  
from the output on the terminal I can see a class 
of floats was assigned because there was a decimal  
place here is another example I'm using the 
variable B and I sign it a decimal value of 2.3  
to check the data type assigned by python I print 
out type B and click on run from the output on the  
terminal I can see a class of floats was 
assigned because there is a decimal place  
this is a different assignment than the standard 
integer these are the numeric data types offered  
in Python to declare a variable as a string 
I wrapped a text with single or double quotes  
again I run the print statement with the function 
type and pass the variable C as the parameter  
when I click on run the output in the terminal now 
displays the classes int float and Str for string  
this sequence is also applicable for other 
data types for example I can create a list  
of numbers by using the variable D 
and assigning it the numbers 1 2 3 4.  
when I run the print statement with the function 
type and pass the variable d as the parameter the  
class list displays after I click run each time 
I assign a value to a particular variable python  
behind the scenes is automatically assigning the 
correct data type for that variable in this video  
you learned about the different data types in 
Python I encourage you to start experimenting  
with these data types in your practice code you 
may recall that python can work with several  
types of data in this video you'll learn how to 
declare and use strings in Python it will also  
gain a general understanding of sequences and 
how to access individual items in a sequence  
in Python A String is a sequence of characters 
enclosed in either single or double quotes  
as you may know computers only understand binary 
code which consists of ones and zeros this means  
that characters need to be converted to a form 
that computers can interpret a process known  
as encoding python uses a type of encoder called 
Unicode to communicate with computers strings in  
Python can be declared in several ways for example 
for a single line you can type the variable name  
followed by an equal sign and then the characters 
encased in quotes if your string is too long for  
one line you can add a backslash at the end of 
each line to create a multi-line declaration  
when you run print on your variable all those 
strings will be combined and appear on one line  
if needed you can reassign the value of a string 
say for example the variable name has a string  
value of John but you want to change the value 
to Paul this can be done simply by typing name  
equals Paul now when you run print on name this 
update should be reflected it's important to know  
that a string is just a sequence of characters 
which in turn means it is essentially an array  
each character in the sequence 
can be accessed based on its index  
for example python strings use zero indexing 
so you can access the first character with  
a number zero in square brackets or 
the number two to access the third one  
if you need to check the length of a string 
python has functionality to assist you  
you can apply the Len function 
to a variable with a string value  
this will then return a number that represents 
how many characters are in the string  
now that you have learned what strings are 
in Python let's explore some code examples  
of strings in action first let me demonstrate the 
two ways to declare a string the first method is  
by placing the characters inside of single quotes 
So I type A equals and then hello in the quotes  
on the next line when I type print followed by a 
in parentheses and then click the Run button my  
code Returns the string hello as the output the 
second method is similar but uses double quotes  
so I would enter it as b equals hello with double 
quotes when I run the print function again it  
also Returns the string hello both quotation 
types are equally valid declaration methods  
the choice is a matter of personal preference 
but it's best to pick one option and use it  
consistently throughout your code in addition 
to the quotation types you can declare single  
line or multi-line strings an example of a single 
line string can be a equals this is a single line  
I asked to print out the value of a when I run 
it the value is printed out as I declared it  
however there may be cases in which a string 
is very long and you want to break it up into  
segments to make it more readable to do that I 
can use the backslash key to create a multi-line  
string to declare a multi-line string I type B 
equals followed by the string this is a multi  
before continuing I add a backslash at the end of 
this line on the next line I type the continuation  
of my String Line string example note that I 
enter a space before the word line so that it's  
separated from the last word of the string on the 
previous line and now when I run print on B the  
backslash has the effect of joining both segments 
so that the outputs appears as a single string  
another thing you can do with strings is 
concatenation which is the joining of separate  
strings to demonstrate this I first create two new 
variables a equals hello with a space at the end  
and b equals there when I run print this time 
within the parentheses I type A plus b and get  
back both strings joined together the plus symbol 
is usually used as an arithmetic operator but when  
applied on strings it combines them instead and 
one more thing to know about strings is that they  
are considered collections of characters what 
this means is that much like an array you can  
access individual characters based on an index 
and you can also check the length of a string  
using the Len or Len function to give an example 
I create a name variable with a string value John  
now I want to print only the first character of 
this string to do so I run print on name followed  
by the character index number inside square 
brackets strings in Python are zero indexed  
meaning that the sequence count begins from zero 
so zero is the number that I place in the brackets  
when I click on run I get back the letter j if 
I change the number to three and run it again  
I get back the letter N the fourth character 
in the string John next let's check how many  
characters are in this string by using the Len 
function I start a print function and in it I  
type Len followed by name inside of parentheses 
when I run it it returns 4 as the length in  
this video you've learned about strings in 
Python specifically you'd now know how to  
declare and use them and understand that they are 
sequences of characters see you in the next video  
python uses different data types to process and 
use information effectively sometimes you need to  
change the data type of a variable after you've 
collected values for it let's say for example a  
user submits a form on a website and one of the 
fields was an integer but the data was passed as  
a string this is a problem because the only way 
to perform calculations with the numbers saved  
as a string is to convert it to an integer data 
type to do this you can use typecasting in Python  
in this video you'll learn about two different 
typecasting methods in Python you will also learn  
to apply typecasting using the provided python 
functions so what is typecasting typecasting is  
the process of converting one data type to another 
python has two different types of conversions  
implicit and explicit let's explore each now in a 
little more detail starting with implicit implicit  
data type conversion is performed automatically 
by Python's compiler to prevent data loss  
it will convert for example an INT to a float if 
it picks up that the inserted value is a decimal  
it's important to note that python will only 
be able to convert values if the data types  
are compatible int and floats are compatible 
but strings and ins are not so if data types  
are not compatible python will throw a type error 
alternatively developers can perform typecasting  
with the explicit data type conversion you do 
this by using the provided python functions  
there are many functions but some of the 
most common are string integer and float  
let me take you through some of 
these functions and how to use them  
first is the string cast function this is used 
to convert any data type into a string data type  
to use this function you type Str followed by the 
value that you want to convert between parentheses  
next is the int type casting function to use this 
type int followed by the value that you want to  
convert between parentheses the float function 
is another common type of casting function once  
again you type the word float and add the value 
that you want to convert in between parentheses  
python has many more typecasting functions 
and they also have a similar structure  
they are awed which returns an integer 
representing the underlying Unicode character  
the hex function which converts a 
given integer to a hexadecimal string  
an opt which takes an integer and returns 
a string representing an octal number  
there are also Tuple set list and dictionary which 
you will learn more about later in the lesson  
in this video you learned about typecasting in 
Python it's important to remember that data types  
are not unchangeable you can convert data types 
using the provided python functions if you need to  
like other programming languages python focuses 
on taking inputs from users or other services and  
providing output python has many helper functions 
that make it easy to perform both of these actions  
you may recall that you use the print function 
to Output variables and other values in this  
video you'll learn more about the print function 
and how to use another new function called inputs  
the input function is designed to get data 
from a source of input and it can be used  
in different ways for example one of its most 
basic uses is when you use the input function  
to get data that the user types in the keyboard 
This input can then be printed to the screen  
in many cases you want to get input directly 
from a user for example when you ask for a user's  
email address let's say you want to use the input 
function to prompt the user to enter their email  
address and then save that input to a variable 
called email if you run this code the user will be  
presented with a prompt to enter their email the 
email variable will then contain the email address  
okay let's switch back to the print 
function which is used for output in Python  
it can be used to print all different types of 
data and it allows for more complex formatting  
the print function itself accepts any number 
of arguments for example comma separated to  
print numbers in sequence arithmetic to print the 
outputs of an equation and string concatenation to  
join or concatenate two strings together Python's 
print function also has reserved keywords that can  
be passed as additional arguments these include 
objects that is values that are printed on screen  
sep which defines how the objects being printed 
are separated and end which defines what gets  
printed at the end there's also a file which 
specifies where values get printed to and by  
default it is STD out and lastly flush a Boolean 
expression to flush the buffer which essentially  
just moves the data from a temporary storage 
to the computer's permanent memory storage  
for example suppose you can pass three 
parameters to the print function the  
word hello which is a string the word 
u which is another string and sep which  
is a built-in parameter whose value is set 
to a string containing a comma and a space  
this will be used as a separator between the 
hello and U strings and the output is hello U  
often while programming you need to know the 
value of a variable and output it onto the screen  
python allows for direct formatting 
inside the print statement  
you can also control the order by specifying 
the numbers inside the curly brackets  
for example if you print the same statement twice 
but with a number switched the output will differ  
let's move on to a more practical application of 
what you just learned using some code examples  
of input and outputs I'll demonstrate how to 
use input and output in Python I'll begin by  
demonstrating the input function I start by typing 
input opening parenthesis and closing parenthesis  
I then click on the Run command and you'll notice 
that it runs the input function and I'm provided  
with a console where I can actually type an input 
so I type hello there and I press enter nothing  
happens because I'm not actually collecting 
data I'm just triggering the input function  
and by default it'll open up access to the command 
line or the console and allow me to input data  
I can also add a prompt to the input 
function for example I can ask a question  
to the user such as please enter a number 
so I type please enter a number in between  
the parentheses after the word input first I 
play the console and then I click on run again  
you'll notice that the output now asks me to 
enter a number I type 5 and press enter again  
nothing shows up from an output perspective this 
is because I haven't actually done anything with  
the input value I'm just demonstrating how the 
input function works if I want to get the value  
of the input I need to assign a variable so I 
type in Num equals input please enter a number  
I clear my console screen again and I click on the 
Run button it tasks me for a number in the console  
and I enter the number six this time now the 
num or number value will contain the number six  
but in order to see that I have to Output that 
variable to the screen I can do this by using  
another function called a print function so 
in this case I print the number after the  
input Itself by typing print opening parenthesis 
the abbreviation num and a closing parenthesis  
I clear my screen again and click on run this 
time I type the number seven when asked to enter  
a number I press enter and you'll notice that the 
output prints seven now I want to show you that  
you can collect more than one input as part of the 
input because inputs work in a sequential manner  
so I call this variable num1 and I enter 
another variable called num2 on the next line  
the input for this variable is please enter 
a second number and I just change the first  
variables inputs to please enter a first number 
so that the instructions are clearer I print out  
the value of num1 and num2 the print statement 
accepts both variables because they are separated  
by a comma and it'll print out each one in that 
order again I clear my contour and I click run  
I Type 4 as the first number I press enter and 
type 5 is a second number followed by the enter  
key again you'll notice four and five are printed 
out you can also do arithmetic within the print  
statement in other words you can do addition 
subtraction standard multiplication and division  
so instead of using commas in the 
print statement I type num1 Plus num2  
I clear the screen once more and I click run I 
enter the numbers 5 and 4 again and I get back 54.  
now this isn't exactly what I intended to do and 
the reason is because both variables are strings  
this goes back to what you've learned 
previously with data types if I want to  
do the arithmetic calculation I'll need to 
convert each variable into an integer first  
so I can use the integer function on num1 and 
num2 I click on the Run button once more and I  
enter the same two numbers five and four but now 
what I get back is nine if I want to see what type  
the input is I can check the data type by using 
the type function to do this I type print opening  
parenthesis the word type opening parenthesis 
num1 followed by two closing parentheses  
let me just clear the screen I click on run and 
enter the numbers 5 and 4 again in the console and  
it says that the class is string and not integer 
which is the type I actually want to do arithmetic  
so just be mindful when you are using inputs 
that you will get a string you'll most likely  
need to use the explicit data type casting 
to convert it to the data type that you need
the print statement can also be used for 
concatenation so instead of num1 I change it to  
str1 or string one and I do the same with num2 by 
changing it to str2 then I amend the input to read  
please enter your first name for string one and 
please enter your second name for string two after  
that I print out hello and then use concatenation 
so that the user can be greeted by their first and  
second name now I want to run this program I'll 
just clear the terminal quickly and then I click  
on run in the console I type Tom for the first 
name and Jones for the second name and the result  
is the output of hello Tom Jones so concatenation 
can be used with a print statement as well  
finally you can also change how you assign 
variables you don't have to use concatenation you  
can just use string replacement I'm going to use 
a function within python called format for this  
based on the order of the brackets you can pass 
in the variables that you want it to be replaced  
with in this case string 1 and 2. once more 
I click run and I enter the username of Tom  
Jones and hello Tom Jones gets printed in this 
video you've expanded your knowledge by learning  
about the input and output function in Python an 
operator is a symbol that tells python to perform  
a certain operation you can think of them like 
road signs in real life for example suppose you're  
driving on a dangerous road and you spot an alert 
side to reduce speed then you encounter a stop  
sign and finally a sign instructing you to turn 
right you may not have realized that you were on  
a dangerous road these symbols help keep you safe 
by instructing you to perform a specific operation  
similarly when python comes across an operator 
that you place in your code it will also perform  
that specific operation these operations 
can be mathematical logical and comparison  
in this video you'll learn about math and logical 
operators in Python most of the time operators  
work on two values math operators are used for 
simple and complex calculations it's essentially  
all the same options as the calculator would 
have let me explain this with examples of math  
and logical operators the first operator I want 
you to know about is the addition or plus operator  
the plus sign is a symbol that you 
must use when adding numbers together  
for example two plus three to subtract numbers 
from each other you use the subtraction or  
minus operator use the minus sign to subtract 
numbers an example of this is three minus two  
the division operator is next and the 
symbol you use for it is a forward slash  
division is an operation in which one number 
is divided by another for example 35 divided  
by five the last operator you need to know about 
is the multiplication operator and the symbol you  
use for that is the star or asterisk key use this 
to multiply numbers with each other for example 7  
multiplied by four okay now let's explore logical 
operators logical operators are used in Python on  
conditional statements to determine a true or 
false outcome let's explore some of these now  
the first logical operator is named and this 
operator checks for all conditions to be true  
for example a is greater than 5 and a is less 
than 10. the second logical operator is named or  
this operator checks for at least one of the 
conditions to be true for example a is greater  
than 5 or B is greater than 10. the final 
operator is named not this operator returns  
a false value if the result is true for example 
a is not greater than 5. operators are usually  
combined with conditional statements to control 
the flow of a program that meets specific criteria  
for example let's say a restaurant gives 
discounts based on the following two conditions  
is the customer part of the Loyalty program 
and did they spend over one hundred dollars  
to determine this you can write code using 
logical operators to check if the customer is  
in the Loyalty program and if they spent over 
one hundred dollars you'll learn more about  
conditional statements in a later lesson now let 
me demonstrate how to use Python math and logical  
operators math operators basically give you the 
same functionality as what you have on a standard  
calculator so you can perform operations like 
addition subtraction Division and multiplication  
I start with a simple addition example I'm using 
the print statement so the output displays on my  
Contour I type print and in parentheses I add 
two plus two the value I expect back is four  
when I run the statement the value of four 
displays in the terminal for subtraction I  
change the plus sign to a minus sign I click on 
the Run button and the value displayed is zero  
If I subtract 2 minus two the answer is zero 
for division I change the minus sign to a  
forward slash I type 35 forward slash Five in 
the parentheses I click the Run button and the  
result is the value of 7.0 just a note on this the 
value returned is a float instead of an integer  
now let's cover multiplication I change the 
forward slash to a star sign that represents  
multiplication I Type 25 asterisk 5. I click on 
the Run button and get back the value of 175.  
that was a short introduction to the math 
operators next you'll explore logical operators  
logical operators are used to control the flow of 
your application The Logical operators are and or  
and not let's cover the different combinations 
of each in this example I declare two variables  
a equals true and B also equals true from these 
variables I use an if statement I type if a and  
b colon and on the next line I type print and 
in parentheses in double quotes I type all true  
you'll learn about the if statement shortly but 
for now just know that this print statement will  
only be executed if both A and B are true the 
print statement of all true is displayed in the  
terminal if I change the value of B to false and 
I run the statement again nothing gets printed out  
the reason for it is that the and statement as 
a condition is both A and B to be true so that  
it will print out the statement now let's 
cover the or operator so I'm changing and  
to or and I click on the Run button the all 
True Value has been printed out again the  
reason for it is that with the or operator if 
either A or B is true the if statement is true  
if I set the values of both variables to false and 
click on the Run button nothing gets printed out  
this is because a is false and B is false so the 
condition in the if statement has not been met  
in this last example I'm going to demonstrate 
the not operator I'll keep the or operator  
before or I type if not a in parentheses then 
or then not b in parentheses followed by a colon  
I'll click on the Run button and 
the value returned is all true  
and what that's doing is it's looking for 
a negation against a so not a is not false  
which is true and the or a negation of B which 
results in true the or condition checks to see if  
either is true now I change the A and the B to be 
true I click on run and nothing gets printed out  
the reason for that is that it's checking again 
for if not a essentially if a is not true in this  
case a is true and its negation is false so it's 
not going to meet that condition or not be also  
results in false and does not meet that condition 
as well because both are the negation of true  
this is still not going to print out any value 
because again none of the conditions are being met  
and that's a brief introduction to using both math 
and logical operators in Python congratulations  
in this video you learned about math and logical 
operators great job if you'd like to learn more  
about math operators in Python there's an 
additional reading at the end of this lesson  
in programming it's important to understand 
how to control the order in which your code is  
executed for example suppose you're invited to 
an event you have to consider whether you need  
to dress formally or informally another example 
of a control flow is to consider a light switch  
the flow is represented by the electrical current 
and the control as the switch itself with the two  
states of on and off the order in which you make 
decisions matters and the same applies to Rising  
effective programs in this video you'll learn how 
to use conditional statements to control flow in  
Python programs so what is control flow control 
flow refers to the order in which the instructions  
in a program are executed all programs have 
decisions that need to be made as a result of  
this the program will take different actions 
or directions in Python there are two types  
of control flows first you can use conditional 
statements such as if else and L if or else if  
and second you can use Loops such as the for 
Loop and the while loop let's explore these a  
little further now the if keyword states that 
if the condition proves to be true a function  
is performed the else keyword catches anything 
which isn't caught by the preceding conditions  
the alif or else F keyword is Python's 
way of saying if the previous conditions  
were not true then try this condition the 
for Loop checks for specific conditions  
and then repeatedly executes a block of 
code as long as those conditions are met  
the while loop repeats a specific block of code an 
unknown number of times until a condition is met  
let's explore conditional statements in more 
detail with some practical examples using  
the if else and LF I'll now write some code for a 
restaurant that wants to apply different discounts  
based on the amount its customers spend to start 
off I Define a variable for the customer's bill  
I'll call it build total and assign a value 
of 114 to it now I apply condition with an  
if statement if build total is greater than 100 
print the statement bill is greater than 100.  
next to apply a discount to build total I need 
to create a second variable I'll do this above  
the if statement in my code call it discount one 
and assign a value of 10 to it the condition also  
has to change so inside the if statement I add 
build total equals build total minus discount  
one at the very end of the code snippet outside 
the if statement I'm going to print out what the  
value of the total bill is to do this I type a 
print statement that says total bill and then  
a plus sign to add the value of Bill total here 
I need to convert the integer to a string I use  
the Str typecasting function to do this let's 
click on run great in the terminal two strings  
are printed bill is greater than 100 and the total 
bill is 104. but what happens if the bill is less  
than 100 I change the value of build total to 95 
and press run notice that this time because the  
if condition is not met it only prints a statement 
total bill is 95 but I'd like to print a statement  
that says the bill is less than 100. to do this 
I add an else statement below the if statement  
I type else colon and in the next line I 
print the statement bill is less than 100.  
let's run the code the output in the terminal now 
says bill is less than 100 and total bill is 95.  
up to this point you've learned how to use the if 
and else statements to control the order in which  
values are assigned and printed you are now ready 
to take program flow one step further say this  
restaurant wants to add another discount for bills 
over 200. how would you do that once again I first  
need to create a new variable above the condition 
that I name discount 2 which I set equal to 20.  
if I run the code now it will still print out 
the same output because I haven't changed any  
of the conditions or values yet let's change 
the value of build total to 210 and click run  
notice that both statements are printed but 
discount one is still applied it's clear  
that the if statement is still executed since 
the value is 210 the condition is still met  
to change the program flow for values over 200 I 
need to add an and condition to the if statement  
I change the statement to if build total is 
greater than 100 and build total is less than 200.  
let's run the code and see what 
happens now the discount wasn't applied  
the output just says build total is 210 
why because the condition is not met  
now this is where it gets really interesting to 
add a second condition for bills above 200 I'll  
use an else if statement in between the if and 
L statements I Type L if which stands for else  
if and then build total is greater than 200. 
print the statement bill is greater than 200.  
in the next line I apply the new discounts I type 
build total equal to Bill total minus discount 2.  
First Let Me Clear My screen so you can 
focus just on the results now I press run  
notice how the program flow has changed 
the first condition was not met so the  
code went to the second condition where the 
value of build total was compared to 200.  
and since it was greater than 200 the 
statement bill is greater than 200 was printed  
the code then proceeded past the else condition 
because a previous LF condition was true  
remember the else condition only executes 
if none of the preceding conditions are true  
finally it printed the statement at the end of 
the code snippet namely total bill is 190. this  
proves that discount 2 was applied congratulations 
you now know how to control program flow with if  
else and else if once you become proficient in 
using conditional statements programming becomes  
a lot of fun I encourage you to test it out in 
this video you learned how to use conditional  
statements in Python writing conditional 
statements is an essential part of programming  
and I encourage you to practice them in your code 
the next time you need to make a decision think  
about the conditions involved and how they can 
be represented if you were to code them in Python  
you may recall how to use the if else and else 
if statements to test a variable against a few  
conditions but on some occasions you will have 
to test a variable against many conditions  
to deal with this you can use 
something called a match case statement  
in this video you'll learn how to use a match 
statement as an alternative to an if statement  
now let's consider an example to compare 
the match statements to the if statement  
say you want to write code to print HTTP 
error messages according to error codes  
to do this with the if statement you would have 
to write the if condition or the alternative if  
else conditions and finally an else conditional 
statements like if L if and else work well over a  
small number of conditions but over a large number 
of conditions your code can get large complex  
and messy fortunately there is a cleaner way to 
achieve the same result using the match statement  
the match statement in Python was introduced in 
version 3.10 using the match statement you can  
achieve cleaner more readable code that allows all 
the same functionality as the if control statement  
when using match statements there 
are a few things to remember  
you can combine several conditions by using 
the or operator in the conditional statement  
the default is essentially the final outcome 
if nothing is found in the case checks  
it's the equivalent to the else in the if blocks 
let me demonstrate this example Now using vs code  
okay so I've written a simple if statement 
that checks for an HTTP status code  
if the value of the variable HTTP status 
matches one of the conditions it will print  
out the equivalent message I'm now going to 
add a match statement below the if statement  
for a clear comparison I will test the 
same variable against the same values  
I type match and then the variable HTTP status 
and a colon on the next line I type case which  
is the equivalent of the word if and the value of 
200. on another line I repeat the action using the  
if statement for 200 which is to print the word 
success so in other words the variable is matched  
against the value of 200 and the if values 
are equal it will print out the word success  
notice that the value of HTTP status is indeed 200 
at the moment so let's run the code to test how  
the if and match statements are processed in the 
terminal the word success is printed twice because  
the value of HTTP status is matched twice in my 
code run once for the if statement and once for  
the match statement now let's change the value 
of HTTP status to 201 and run the code again  
in this case success is only printed once why 
do you think that happens because there is an  
or condition for the value of 201 in the if 
statement but none in the match statement  
to do the equivalent in the match 
statement you use the or operator  
so I place my cursor in between 200 and the colon 
and add an all character and the value of 201  
I clean my screen by using CLS and then click on 
run again now success is printed twice again so in  
the match statement the pipe command is shorthand 
for if or the great thing is that you can add many  
case statements in a match statement but what 
if none of the values match the variable's value  
now let's change the value of HTTP status to 
the value of say 550 and explore what happens  
I click on run and this time 
the word unknown is printed  
you may be wondering why that is because 
the else statement is like a catch-all  
if the value does not match anything within 
the if or the L if statements the default will  
be the else statement which in this case 
has a print function for the word unknown  
well the match statement also has a default class 
and you add it by typing the word case underscore  
colon and on the next line print unknown let's run 
the code again great the output is unknown unknown  
which means that the default statement in both 
the if as well as the match statement was actioned  
my match statement is coming along well but it 
still needs a few tweaks to make it act exactly  
like the given if statement to do that I'll add 
a few more case statements that will test for  
the same values as the L if statements I type 
case 400 colon and then I add a print command  
with the words bad request I add another case 
and the value of 500 and I also need to test  
for 501 like in the L if statement above so once 
again I add an or character and type 501 colon  
on the next line I add the error message 
that I want to print which is server error  
the match saves a bit of space 
by combining the or statement so  
you don't have to do a comparison against a 
variable each time like in the if statement  
let's change the value of HTTP 
status one more time to 501.  
I just clear the screen again and click on run 
and server error is printed for both statements  
now you know that there are some differences 
between the two but the match statement does  
exactly the same as the if statement in summary 
the match statement Compares a value to several  
different conditions until one of these conditions 
is met so you now know how to use the match  
statement as an alternative to the if statement 
to test a variable against many possible values  
the match statement is relatively new to python 
prior to version 3.10 developers had to get  
creative and code to their own Solutions 
you'll learn more about those alternative  
methods later in this lesson have you ever come 
across a song that you like so much you want to  
listen to it again and again you select the loop 
option so that you can listen to it repeatedly  
this action of repetition is known as looping 
and also exists in Python in this video you'll  
learn to use looping constructs when the same 
set of steps must be carried out many times  
python has two different types of looping 
constructs for iterating over sequences the  
for Loop and the while loop looping is used to 
iterate through the sequence and access each  
item inside the sequence let's start with 
a basic example of looping using a string  
first you declare a variable called Str 
which is of type string recall that a  
string in Python is a sequence which means you 
can iterate over each character in the string  
a sequence is just an ordered set now let's break 
apart the for Loop and discover how it works  
the variable item is a placeholder that will 
store the current letter in the sequence  
you may also recall that you can access 
any character in the sequence by its index  
the for Loop is accessing it in the same way and 
assigning the current value to the item variable  
this allows us to access the current 
character to print it for output when  
the code is run the outputs will be the letters 
of the word looping each letter on its own line  
now that you know about looping constructs 
in Python let me demonstrate how these work  
further using some code examples to 
Output an array of tasty desserts  
python offers us multiple ways to do loops or 
looping you'll Now cover the for loop as well  
as the while loop let's start with the basics 
of a simple for Loop to declare a for loop I  
use the four keyword I now need a variable to 
put the value into in this case I am using I I  
also use the in keyword to specify where I want 
to Loop over I add a new function called range  
to specify the number of items in a range in 
this case I'm using 10 as an example next I do  
a simple print statement by pressing the enter key 
to move to a new line I select the print function  
and within the brackets I enter the name looping 
and the value of I then I click on the Run button  
the output indicates the iteration Loops through 
the range of 0 to 9. it's important to note the  
three main points the iteration starts at 
zero based on the index of the item itself  
every for Loop usually starts with zero most 
arrays start at zero the reason for that is that  
it's the first item in an array or the first item 
in the index in this case the last item in the  
array or index will be nine now I want to change 
what I Loop through as an example I'll enter  
a simple array above and call it favorites to do 
this I start by removing the hash sign in front of  
favorites next I replace the range function in the 
current for loop with favorites to Loop through  
the I that I declared as part of the for 
Loop can change to any value and in this  
case I'm using item I now change my print 
statements to include item in my print Loop  
I also change the text I like this dessert I 
click on the Run button to print the value stream  
in this case item calls each of the five 
desserts titles in turn and our print  
statement combines them into a sentence the next 
looping option I'm discussing is the while loop  
the while loop differs slightly from the for Loop 
to demonstrate this type of loop I first comment  
out the for loop on my screen let's start by 
using the while keyword as in the for loop I  
need to specify a condition to make the loop Over 
N times depending on the value itself first I need  
to declare a counter I do this by typing count 
equals zero above my looping statement next I  
enter count after the while keyword followed 
by the less sign and the word favorites now I  
insert the function Len to provide the length of 
favorites this means the loop will run while the  
count is less than the length of favorites 
in other words while it is less than five  
to print the value of the looping statement 
I press the enter key to move to a new line  
then I select the print function and within 
brackets I enter the text I like this dessert  
the key difference here is that I need 
to use the index to access the items  
within the favorites array to do this I type 
favorite and add counts to represent the index  
it's important that I now increment count so 
that it will essentially match the loop statement  
if I do not increment count I'll end up with 
what is called an infinite Loop this means it  
will just keep looping and looping until the 
compiler stops it from running out of memory  
to increment the count I press enter to move 
to a new line and add count plus equals to 1.  
I clear my screen and click the Run button 
I get the same print output as the for Loop  
it's important to note that in a standard for 
loop I don't have access to the index but I  
can use the enumerate function to do that so I 
change my current for Loop statement by adding  
idx and it becomes 4 idx item in then I call the 
enumerate function with favorites in parenthesis  
on the next line to print the output I replace 
the text I like this dessert with idx and click  
the Run button the results display the index 
and the value of the item within the array  
congratulations in this video you learned about 
looping constructs in Python using the fort  
Loop in Python nested Loops can be used to solve 
more complex problems for example the nested for  
Loop is written by indentation inside the 
Outer Loop let's explore this further now  
and break down how a nested Loop works first 
the outer loop will start and then step into  
the inner loop then the inner loop will run 
until its range limit is Met 10 in this case  
once the inner loop completes it will come back 
to the outer loop for the next iteration and then  
step into the inner loop again this will happen 
until the outer loop has reached its limits  
now let's explore an example using nested 
Loops to iterate over two lists for example  
suppose you have two lists of integers from one 
to nine an account variable that is set to zero  
you again have two Loops the outer loop 
which will iterate over list one and the  
inner loop which iterates over list two if 
you run this code it gives an output of 90.  
let me break it down for you the outer loop runs 
a total of nine times the inner loop runs a total  
of nine multiplied by nine which is 81 times and 
9 plus 81 gives a total of 90. to help visualize  
how this would look you can make some minor 
changes to the loop to Output what it looks like  
okay so you now know that the number of times 
a loop is run is based on the size of the list  
now that you've learned about nested Loops let 
me demonstrate some code examples of nested loops  
so I have vs code open and first let me start 
with a simple example and write a for Loop  
I type 4i and I use the range function so I 
have in range 10. above the loop I label it  
with a comment Outer Loop this first for Loop 
is considered an outer loop and inside I will  
have an inner loop I write a comment in a loop 
right under the first for Loop now I type for J  
in then I use the range function again and I pass 
in a 10 and end with a colon the 10 indicates the  
number of times the loop will iterate or repeat 
in this example I print out zero and then I use  
end equals and a string with space in double 
quotes to ensure it prints out in an even manner  
and lastly I'm going to print out an empty line 
so that it goes to a new line in each iteration  
if I run the for Loop the system prints out 
a 2d array grid this is just to demonstrate  
how the for Loop works if I want to print out 
a single line I can change the outer loop to 1.  
I play my screen run it again and this time a 
single line of zeros is printed out because the  
outer loop only iterated once this is all based 
on the Outer Loop only it runs once but when it  
goes to the inner loop that it runs 10 times and 
prints out a zero for each item on the same line  
every time the outer loop starts it will go into 
the inner loop the inner loop must finish before  
it comes back to the outer loop to start on 
two three four and so on I can showcase that  
by simply changing the outer loop range to 
two in this case only two lines are printed  
so the first when I equals zero it comes 
into the inner loop and prints out 10 times  
when that's finished it comes back to the Outer 
Loop then I is incremented again to one and then  
it'll be printed out from Jay's Inner Loop 
and another 10 zeros again the other issue  
to consider with nested Loops is the complexity 
or what is commonly known as time complexity  
the larger the array the more time 
it's going to take to run my code  
let me showcase this by running a for Loop for a 
larger range but also putting a timestamp on it  
I import the time module to put 
a timestamp in what's printed out  
I class it as the start time equals time dot 
time which is the function that I want to call  
the start time is initialized the moment I run 
the script I also want to print out how long  
it took to finish I do that by putting a print 
statement outside the for Loop I then calculate  
the time as in the time it took to finish and 
then subtract that from the start time above  
this is going to print out many decimal places so 
I use another function named round which rounds  
numbers to a decimal of my choice in this 
case I round it off to two decimal points  
Let Me Clear My screen one more time I click 
on run and it outputs the time of 0.0 seconds  
this makes sense because the time my code takes to 
run is really short now let me increase the range  
in the outer loop to 100 and I also increase the 
range in the inside loop to 100 and I click on run  
one more time the time now goes up 0.01 in this 
case it's not a big difference but when you're  
dealing with large data sets this will have 
a huge effect on the running time of my code  
this time let's say for example that I keep 
the outer loop to a hundred but I increase  
the inner loop to 1000. I clear the screen 
and click on run the time increases to 0.04  
if I increase the inner loop one more time to 10 
000 and I clear the screen and click run now the  
time goes up to 0.45 so the larger the array or 
the larger the range in this case the more time  
it's going to take for a program to complete It's 
always important to remember how you can optimize  
code to make it run more efficiently and consider 
the amount of time your code will take to run  
you just come with nested for loops and 
learned about the issue of time complexity  
in this video you learned about nested loops 
and how they work congratulations on reaching  
the end of control flows and conditionals and the 
end of the module on getting started with python  
let's recap what you've learned so now you know 
how to explain the history of programming and  
how it works in a general sense describe 
the benefits of python and where it's used  
evaluate if your system is set up correctly for 
python development identify the differences of  
running code from the command line by the IDE 
explain the importance of syntax and space in  
Python describe what variables are and how 
they are used identify data types in Python  
explain how to declare and use strings describe 
the two types of casting and how to apply them  
describe the basics of user inputs and 
console outputs recognize math and logical  
operators in Python use conditional statements 
to control the flow of programs use match case  
statements as an alternative to if statements 
explain looping constructs and how to use them  
and explain nested loops and how they work 
you've learned a lot about the structure and  
rules that guide Python and now you're ready to 
create programs great work see you next time so  
what are functions at the most basic level you can 
think of functions as a set of instructions that  
take an input and return an output for example the 
primary task of the print function is to print a  
value this value is usually printed to the screen 
and it's passed to the print function as argument  
in the example we have here the string hello 
world is the value passed to the print function  
by the end of this video you'll be able to declare 
a function in Python pass data into a function and  
return data from a function a python function 
is a modular piece of code that can be reused  
repeatedly you've used some python functions 
already in this course such as print and input  
both are functions and each one has a specific 
task or action to complete the input function will  
accept parameters too but will also accept input 
from the user so how do you declare a function a  
function is declared using the def keyword 
followed by the name and task to complete  
optional parameters can also be added after 
the function name within a pair of parentheses  
here's an example of creating a function to 
add two values type the def keyword followed  
by the function name of sum then enter X and Y is 
parameters and finally enter return X Plus y as  
the task to complete I'll now give a practical 
demonstration of functions how to declare them  
how they're used and how they can also simplify 
your code by putting it into a reusable structure  
let's start with a short example that explains 
how to calculate a tax amount for a customer  
based on the total value of that bill 
I'll start by declaring two variables I  
type the first variable called bill and 
I assign it the number let's say 175.00
I know this is going to be a data type known 
as floats because I'm using decimal points as  
is the norm for currency the second variable is 
the tax rate which is the percentage tax rates  
that should be applied to the bill so I put in 
15 and then what I want to do is calculate the  
amount of tax for the bill itself what I do is 
add this into another variable called total tax  
I then do the calculation which is the bill 
multiplied by the tax rate and then divided  
by 100 to get a dollar amount to Output the 
value I print the total tax and pass the total  
tax variable and then run the program total tax 
is 26.25 which is 15 of 175. in the real world  
the build value will be different for each 
customer and the tax rates may also change  
updating each variable every time is inefficient 
to overcome this problem I'll create a reusable  
function to start creating a function I use the 
Define command or def for short then I'll give  
it a name that relates to the task it's carrying 
out so in this case it's going to be calculate tax  
with functions you can pass in arguments and 
the purpose of that is to make it more dynamic  
so consider the arguments that I need to take in 
I'll take in a bill which would be the total value  
of the bill itself and then also a tax rate and 
then like I've done before I will calculate the  
total tax by taking the bill multiplying it by 
the tax rate and then dividing it by a hundred  
okay then I do a return wrap bill in parenthesis 
multiplied by tax rate and divide by 100.  
now I can remove the Declaration I made 
earlier for the variables and the calculation  
with a function if you run the current code 
AS is it will come back with nothing because  
a function is only ever run when it's actually 
been called I'll demonstrate this if I do a  
print I can calculate tax and then I pass it 
as I've done earlier 175 is the total bill and  
then the tax rate will be 15. I'll also put in 
just a total tax and then click on run and the  
total tax rate is 26.25 if I want to change the 
rate I can reuse the same function total tax  
I'll call the function again calculate tags I'll 
give it a different value for a Bill say 164.33  
this time I'll change the tax rate to 22 percent  
clear the screen and then click on run in 
my total tax for the second item is 36.1526
to clean the outputs up a bit and make 
it more visually appealing I'll put in  
a round function which allows control of the 
number of decimal places that I want returned  
in this case I'll do two and then rerun 
the code this is a lot neater with 36.15  
one of the nice things about a function is that 
you can update it once and any part of the code  
that calls that function will get those changes 
as well in this video you've explored basic  
functions in Python how to declare functions 
and pass and return data to and from them  
the concept of scoping in Python allows for 
greater control over elements in your code  
which reduces the chances of accidental or 
unwanted changes by the end of this video  
you'll be able to understand the basics of scoping 
in Python and identify the four types of scope  
before you explore scope and its intricacies 
it's important to know that python has different  
types of scope you'll examine each one in detail 
and I'll demonstrate them with coding examples  
in order of ascending coverage the four slopes 
are local in closing Global and built-in  
together they are referred to as l e g b 
variables within the built-in and Global  
scope are accessible from anywhere in the code  
for example if there's a variable a in the global 
scope it can be called in code at the local level  
the purpose of scope is to protect the variable so 
it does not get changed by other parts of the code  
for instance let's say you've declared variable 
B in the enclosed scope and variable C locally  
while B can be called in local code it doesn't 
work the other way around as a rule Global scope  
is generally discouraged in applications as this 
increases the possibility of mistakes in output  
now I'll explore using the four different types 
of python Scopes in this practical demonstration  
the first one I want to use is global scope I 
declare a variable called my Global and then  
give it a value of 10. so the next thing I 
do is declare a function and I call it fn1  
and inside this function I'll declare another 
variable which I'll call local variable or local  
V and give it a value of 5. to show that my Global 
variable is accessible from anywhere I can do a  
print statement say access to global and then 
print out the value of the my Global variable  
and if I want to run that function I 
need to specifically call it so fn1  
click on run and then the value of 10 
is printed out for the global variable  
but if I try and print out the local 
variable inside fn1 outside the function  
it will return an error so I access to 
local and then put out local underscore V  
I then clear the console click on run and I get an 
error saying name error name local underscore V is  
not defined that's because it's only accessible 
from within the local scope of the function fn1  
next to illustrate an enclosing scope I'm going 
to declare a second function inside fn1 called fn2  
I then declare an enclosed variable which I 
call enclosed V and assign it the value of 8.  
the local V will be local to the fn2 
I'll now explain how enclosed scope works  
within fn2 I've got access to the 
enclosed fee which I can demonstrate  
by doing another print statement and 
printing out the enclosed view variable  
I'll just test that this all works by calling the 
fn1 function and then making sure that I call our  
fn2 function inside fn1 I must physically call 
a function to make it run so I clear the console  
click on run and then print out access to 
global 10 and access to enclosure 8. the  
way scoping works is that the innermost function 
has access to almost everything from the outside  
you can access the enclosed variable at this 
level and then also access the global variable  
at the outer level the same rules still apply from 
the outside so if I try and access the variable of  
enclosed V or try and access the variable of local 
V I get the same error that the variable enclosed  
fee is not defined the nested items have access 
to both the global and the enclosed but from the  
outside it can't be accessed from a nested or 
an enclosed scope both for local and enclosed  
the last scope is built in scope which 
you've been using when writing code in Python  
built-in scope refers to what's called 
The Reserve keywords such as print and Def  
built-in scope covers all the language of 
python which means you can access it from  
the outermost Scopes or the innermost 
Scopes in the function classes that's a  
brief demonstration of scope in Python including 
examples of global local enclosed and built-in  
by completing this video you've gained 
a broad understanding of why scoping is  
important in Python Programming and you are 
now able to identify the four types of scope  
lists are a sequence of one or more different or 
similar data types a list in Python is essentially  
a dynamic array that can hold any data type let's 
move to the console and I'll demonstrate some  
practical examples of python lists first I'll 
go through a few examples of declaring lists  
so I create my list by typing list one equals 
and then the numbers 1 2 3 4 5 within brackets  
and separated by commas because you 
use commas to separate items in a list  
list two is a list of strings a b c I can 
also have a list of different data types  
for example in my list three I can have 
a string an integer a Boolean and a float  
so the type doesn't necessarily matter it's 
just going to be stored in the same way  
one thing to keep in mind with lists is that they 
are based on an index for example let's suppose I  
wanted to access the number three from my list one 
example since the index always starts with zero  
I'd have to write list one open square bracket to 
close square brackets this gets the third item in  
the list which is number three so if I do print 
that I get the value of three being printed out  
an important option with lists is that you can 
also have nested lists so if I declare another  
list for example list four and I put in one and 
then I can have a nested list of two three and  
four and then get back to a five and six that's 
completely valid as well so any data type can  
be stored within the list itself just to keep 
that in mind let's see what else less can do  
I've got a few different options to add items to 
a list one is to use the insert function so just  
before I do that I'll just do a print to print out 
the entire list there are a couple of different  
ways I can do it I can use the Star Sign list one 
click on run and I get the entire list printed out  
to print it the way it is displayed in my code I 
can use the print statement type in list one and  
just put in a separator equals and then comma 
or just single space I click on run and I get  
this type of prints returned right back to adding 
something new to the list the first option that I  
have is What's called the insert function I can do 
list one dot insert and what it looks for is the  
index of where to insert to here I can use the Len 
or Len function to get the length of the list one  
then I put in what the next value should be so in 
this case I put in number six I do the same print  
statement directly underneath that then click on 
run and I find as I get six added to the end list  
I can also use another function called append 
instead of having to specify the index or where  
the item should be placed I can just put in the 
append keyword so I type append six and click on  
run and it's added in without having to specify 
the index there is another function I can use if  
I want to add one or more items to the list it's 
called extend and this will accept a list as well  
I can put in extend 6789 and then click 
on run and then my list is extended with  
six seven eight and nine to remove something 
from a list there are a few different options  
the first way is to use pop and then specify the 
index or location of which item I want to remove  
to demonstrate pop I'll say pop 4 for index 
4. I click on run and the last item from the  
list is removed remember within a list the 
index always starts at zero so index four  
means the fifth item being the value five and 
that's what has been removed another option  
is the delete or Dell keyword I can say dell 
list one and then specify the index to delete  
in this case I put in the index of two click 
on run and the index 2 is removed which in  
this case is the number three zero one two is the 
number three lastly I can iterate through a list  
one of the main reasons I use lists is 
that I can iterate through the values  
and gain access to large amounts of data so 
to iterate I can use a simple for Loop so  
for x and list one and then I can do a simple 
printout I'll just remove this one underneath  
I'd like to print out the value of x 
so I just put in print value and then X  
when I click on run it'll print all values of the 
list that's a brief demonstration of what you can  
accomplish using list in Python you just covered 
how a listing python works as a dynamic array  
you explored lists and learned how to use inbuilt 
functions of a list to access the list items  
modify them add to the list and remove items from 
the list in this video you will learn about tuples  
and how they can be used to store different types 
of data there are users data structures and help  
to create solid well-performing code to declare a 
tuple I declare a simple variable I'll name it my  
underscore Tuple and then I do the assignment 
operator of equals then to declare the Tuple  
itself I use parentheses a tuple can accept any 
mix of data types and it can range from integers  
like 1 to strings to a double such as 4.5 to 
a Boolean like true to access any of the items  
within the Tuple I can use methods similar to 
those used with a list by referring to an index  
so in my underscore Tuple if I want to get access 
to the string which I know is going to be on index  
1 I just print out the value so I write print 
my underscore Tuple brackets 1. remember index  
always starts with zero I click on run and 
I find that it Returns the value of strings  
if I want to determine the type of the Tuple I 
can use the type function that python provides  
I click on run and I get a class Tuple we could 
also declare a tuple without using the parentheses  
it has the same effect and will still be classed 
as a tuple however it's best practice to use the  
parentheses tuples also provide different methods 
of count and index I can do my underscore Tuple  
dot count and pass in the value of strings I click 
on run and I get back the count of one what it  
does is it looks for the number of occurrences 
of that value within the Tuple before I move on  
I'll type clear into my terminal to clear the 
previous output so we could start fresh and see  
what's going to happen next the other method is 
index which should give me back the index of where  
the value lies in the Tuple I'll change the print 
statement to look up the index of the double 4.5  
when I click on run I get back to this means 
that the double 4.5 is at index 2 in the Tuple  
I can also do a loop on a tuple that is 
iterate through the values and print them out  
I can write a loop 4X in my underscore 
Tuple and then print out the value of x  
I click on run and I get back one strings 4.5 
and true so all the values of the Tuple itself  
the one key difference of a tuple over a list is 
that tubo values are what's called immutable and  
this just means that they cannot be changed so 
I'll prove this and demonstrate how this works  
let's say that I want to change the value of the 
very first item in the Tuple being the value 1.  
I'll use 0 to access it based on the index 
and let's say that I want to change it to B5  
if I run this I'll get back an error and it 
gives me the error saying type error Tuple object  
does not support item assignment that's because 
anything that is declared in a tuple is immutable  
in this video you learned about tuples including 
how to declare them and work with their contents  
in this video you will learn about sets and 
how they can help with storing certain types  
of data in different types of formats first 
I declare a set I can start by declaring a  
simple variable called set a equals and then 
use curly braces to define the set itself  
then the values go inside the brackets 
I put in 1 2 3 4 and 5. I'll do a simple  
printout to prove that we have a set I click 
on run to get the values 1 to 5 printed out  
sets differ slightly from lists in that they don't 
allow duplicate values I can demo this by putting  
in another five when I click on run I find that 
the second five is not printed out in the list  
sets also have methods that we can use I can 
use a method to add new content if I use set  
dot add 6 I can add in the number six I click on 
run to find that the value 6 is added to the set  
I can also use the remove method 
I'll remove the number two
when I clicked on run I found that 
the number 2 was removed from the set  
there's also discard which essentially does the 
same thing as remove using discard when I click  
on run I'll find that I get the same output let 
me clear the console before we go any further  
there are also a few useful methods that could be 
used with sets to perform mathematical operations  
let me Demo some of them now first I will create 
a new set set B I will put in 4 5 6 7 and 8 and  
reset the values of set a to the original values 
there are two ways I could use mathematical  
operators for instance for a union join I 
can do set a DOT Union and then pass in set B  
then I can click on the Run button to see what 
happens I discovered that it joins the two sets  
together minus the duplicate values like four and 
five Union merges them into one so you have a set  
one two three four five six seven eight for the 
other options for Union I can use the vertical  
line symbol or the or symbol and that works in the 
same way let me clear the console before we go on
another operation I can use is the intersection  
I can apply this to set a by writing set a DOT 
intersection and passing set b as the argument  
when I click run I get back all the items that 
match in both set a and set B here we have four  
and five the intersection can also be represented 
by the Ampersand and will work in the same way  
when I click on run I also got back 4 and 5. let 
me clear the console again before we continue  
another mathematical operation I can use is the 
set difference to use this I'll print set a DOT  
difference set B and this should give me back 
all the elements that are only in set a and not  
in set B when I clicked run we got the correct 
output of 1 2 and 3. I could also represent  
Difference by using the minus symbol when I 
click on run I'll also get back the same values  
one two and three the last operation I'll 
discuss is what's called symmetrical difference  
this is represented by the symmetric difference 
function which is used in a similar way  
when I click on run I get back 1 2 3 6 7 and 8. in 
other words all of the elements that are present  
in set a or set B but not in both sets symmetrical 
difference can also be represented by the carat  
operator when I click on run I get back the same 
values an additional important thing about sets is  
that a set is a collection with no duplicates but 
it's also a collection of unordered items unlike a  
list where I can print out content based on index 
if I try to print out set a brackets 0 to get the  
zeroth element in the set I'll get an error Let Me 
Clear My console before we attempt to print this  
output when I click on run I get back a type error 
saying that the set object is not subscriptable  
this means that the set is not a sequence 
it doesn't contain an ordered index of all  
elements inside okay that concludes our 
gentle introduction to sets great job  
so what is a dictionary in Python in many ways 
it's very similar to how an actual dictionary  
Works in a normal dictionary to locate a word you 
look it up by the first letter and then use the  
alphabetical ordering system to find its location 
likewise python dictionaries are optimized to  
retrieve values you may remember how useful 
python lists are to access an array of values  
dictionaries access values based on keys 
and not an index position therefore they  
are faster and more flexible in operation by the 
end of this video you'll be able to explain the  
purpose and function of dictionaries in Python and 
identify the performance benefits of dictionaries  
with a python dictionary a key is assigned to a 
specific value this is called the key value pair  
the benefits of this method is that it's 
much faster than using traditional lists  
to find an item in a list you need to keep 
reviewing the list until you locate the item  
but in a python dictionary you can go straight to 
the item you need by using its key a dictionary is  
also mutable in that the values can be changed or 
updated for example you could declare the number  
one as the key and coffee is the item and then 
change these to any other number or drink item  
how does this work how do you access or locate the 
item you need within a python dictionary with the  
use of the keys to demonstrate this I'll access 
the coffee item within a python dictionary first  
I declare my dictionary name as sample dictionary 
then an equals with a series of key value pairings  
or keys and items in a pair of curly braces I also 
make sure to separate each pairing with a comma  
I then type the print function followed by 
the name of my dictionary I need to access  
coffee item which has been given a key of one 
so I insert the number one in square brackets  
I run the print function and it returns 
coffee as a result just as I intended  
I can also update a dictionary by replacing one 
item with another I just need to use the key to  
reference it while using the assignment 
operator of equals to assign the value  
for example I can change item 2 in my 
dictionary from T to Mint T I just write  
a new line of code that starts with the name 
of the dictionary followed by the key I want to  
change in square brackets then I add an equals 
operator followed by the name of the new item  
what the coding says is to take item two in 
the sample dictionary and change it to Mint  
Tea when I run this function it changes the item 
I can also delete an item from the dictionary  
to do this I write a line of code with a delete 
function followed by the name of my dictionary  
then I add the key for the item I want to 
delete in square brackets in this instance  
I want to delete item 3 juice when I run this 
delete function it will remove the juice value  
from my dictionary finally I can also use three 
different methods to iterate over a dictionary  
I can use the standard iteration method the 
items function or the values function let's  
explore these iteration methods and the other 
dictionary operations functions in more detail  
to create my dictionary I'll start 
by declaring a simple variable  
called my underscore D and then use the 
assignment operator then curly brackets  
it can be the same as a set but by default 
that's classed as an empty dictionary  
I can print that out by using a print statement 
using the type function and then passing in  
the my D variable clicking on run the class 
has actually come back as a type dictionary  
so next I'll add some values into the 
dictionary and I need to do it in two parts  
a dictionary holds what's called a key and a 
value the key can be numeric it can be string  
but to signify the assignment I use a colon 
and then put in whatever value that I want  
in this case I'll put in a simple string value 
of test to signify that I can change or have  
different Keys strings integers or ins I put in a 
string key of name and then the value gem I print  
out my dictionary using the print function I now 
have a basic dictionary setup with a key of one  
name and then one being test name being Jim if I 
want to access a key in the dictionary I just have  
to use the square brackets and then pass in the 
key value so in this case of one I'll pass in the  
numeric one in the case of the string value I just 
need to pass in the actual string value itself so  
name click on run and I get back both test and gym 
which are the values for each corresponding key  
if I want to add a new key into the dictionary or 
update it I can simply do my D and then add a new  
assignment two in this case Test 2 click on run 
the key is then added with the current dictionary  
to update a key I have to call out the value that 
I want I'm just going to update the first key  
which is number one with a value of not a test 
instead of test click on play and it's updated  
on the screen the other thing to note about the 
dictionary is that if I try and put in a duplicate  
key it doesn't allow this so if I put in a number 
one and then not a test click on run and the key  
will actually be overridden with the latest one 
so number one only appears one to the outputs and  
it doesn't allow the two keys to be printed out 
because it won't allow duplicate values to be set  
if I want to delete a key from the dictionary I'll 
use the Dell operator now I type my D and then  
specify which key I want to delete in this case 
number one it's then removed from the dictionary  
with a dictionary I can also iterate though for 
example I can use the 4X in my dictionary and  
then print out the value of x click on run 
and I get one this only prints out the keys  
in a lot of cases I may need access to both 
to do that I use a method called my items  
with that I can then gain access to the 
assignments of both the key and the value  
so I do a printout here key plus value I'll use 
some concatenation to print out both the key and  
the value click on run you have to be mindful 
because I'm using an integer with a string so  
I wrap that with a type SDR click on run again 
and I get the value of the key and the value  
for each of the items in the dictionary itself you 
should Now understand the purpose and function of  
dictionaries in Python and their benefits in terms 
of performance in this video you'll explore args  
and also quarks or keyword args using these has 
the advantage that you could pass in any amount  
of non-keyword variables and keyword arguments 
to start with a short example I'll Define a sum  
of function that accepts two parameters A and 
B and then return back the addition a plus b  
if I do a print statement call the function sum 
of with the two values four and five I should get  
back the value of nine which I do that all works 
fine but let's say I want to add in another value  
6 for example if I click on run again I get back 
an error and it tells me that the sum of function  
takes two positional arguments but three were 
given if I want a way around this this is where  
args are useful to Define args I use the star 
symbol and I call it args for naming purposes  
instead of passing in just two arguments args 
will allow n arguments to come through any number  
of arguments when dealing with more than one 
argument there may be many to iterate through  
to calculate the total sum I'll have a variable 
called sum assign it to zero then I'll create  
a simple for Loop and then I'll Loop through 
the argument parameters that's been passed in  
then I'm going to add all the values that 
come in as part of args which is assigned  
to the X variable using the plus equals 
and then finally return the value of sum  
so again if I run the statement I get back the 
value of 15. as I mentioned you could pass in  
any number of arguments and the total sum should 
be returned for each in this case it's 30 with  
the number of arguments that have been passed 
through that's a simple intro to args so now I'll  
demonstrate quarks let's clear the terminal and 
switch to my quarks file I'll copy the code from  
the args file to start let's say for example you 
wanted to calculate a total bill for a restaurant  
a user got a cup of coffee that was 2.99 then 
they also got a cake that was 455 and also a  
juice for 2.99 the first thing I could do is 
change the for Loop let's change the argument  
to quarks by adding another star and then 
update the variable in the for Loop next I  
get the key in the value and then I extend the 
quarks with the items function and then I could  
simply change the sum to add all the items that 
are passed through on the value because adding  
the key makes no sense it's just the string and it 
won't give you the actual value you intend to get  
when I run this I get back a value 
of 10.53 with a bunch of extra zeros  
now I can change the decimal place for the final 
return statement by using the round function and  
I limit it to two decimal places when I click on 
run again I get back a total of 10.53 to summarize  
with args you could pass in any amount of 
non-keyword variables with the quarks you  
can pass in any amount of keyword arguments 
that's a simple intro to both args and quarks  
in this video you'll learn about errors 
and exceptions to very important aspects  
of learning python as a new developer you'll cover 
the difference between errors and exceptions and  
explore what happens when something goes wrong 
with your code errors are a part of coding and  
they happen for many reasons let's start by 
exploring two types of errors syntax errors  
which are caused by human error and exceptions 
which are known errors that need to be handled  
syntax errors are usually caused by the developer 
it could be the results of a misspelling or a typo  
in the code generally these types of Errors 
have minimal impact because most Ides like  
Visual Studio code will warn the developer and 
give clues about how to fix them a common error  
for new developers learning python is not adding 
the colon at the end of conditions or statements  
if you're using a code editor with syntax checking 
errors like this may be highlighted at the point  
of the error for example a missing colon will be 
highlighted in the code the output will indicate  
the file name and the line or the error occurred 
with a carrot character pointing to the error  
running the code will result in an invalid syntax 
error informing that there is a syntax problem  
other common mistakes include indentation 
problems which are also syntax errors  
for example if there is an indentation problem 
the error code will be indentation error  
The More You Learn Python the less 
you'll have to deal with these types  
of Errors because you'll become better 
at creating and analyzing your code  
now let's move on to exception errors they 
happen during code execution and they can  
easily go unnoticed by the untrained eye but 
exceptions need to be handled by the developer  
they need to deal with any potential issues in 
the code base to keep the application from failing  
let's explore an exception being thrown as 
an example your code can be syntactically  
correct but if it attempts to divide five 
by zero it doesn't make mathematical sense  
therefore when you run this program the 
zero division error exception is thrown  
luckily by default python includes many exception 
errors that you can use to pick up potential  
issues in your code in this video you explored 
the basics of errors and exceptions which is a  
step in the right direction to becoming a better 
python programmer in this video you'll explore  
how to handle exceptions in Python you'll learn 
how to change error messages and how to wrap your  
code within try and accept statements as an 
example I will write a simple math function  
I Define a new function called divide by and 
allow it to accept two parameters A and B  
the purpose of this function is to return the 
value of the division of both numbers so in the  
next line I'll type return a divided by B now I 
add a print statement for the divide by function  
inside the print statement I'll also add a new 
set of parentheses with a value of 40 and 4.  
these are the values that will 
be divided by the function  
I click on run and the value returned is 10 
which is correct because 4 goes into 40 10 times  
now let's test what will happen if I pass in the 
values of 40 and 0. now when I click on run I get  
an error or an exception the exception in this 
case says zero division error division by zero  
it gives this error because in math 
you can't divide a number by zero  
you might agree that getting cryptic errors could 
upset users so the question is how can you handle  
errors in a more user-friendly way how can you 
prevent a user from seeing the actual exception  
being printed out you do this with Python's try 
and accept statements simply type try colon and  
in the next line accept colon you add the code 
that you want to run within the try statement so  
I delete the print statement at the bottom and 
cut the divide by zero function within the try  
statement I type A and S equals and paste 
the function now in the accept statement I  
will add my own error statement I add a print 
statement for the string something went wrong  
let me just clear the terminal so you could 
focus on the output I click on run and now the  
error statement is printed so what's happening the 
try statement will try and execute the code that  
you added inside it if an exception occurs it will 
trigger the accept line and execute any code added  
underneath the accept statement but python allows 
you to make the accept statement more specific  
if you want to trap the exception itself you could 
add the Base Class exception right after accept  
The Base Class exception is used for all 
exceptions that are written within python  
you can gain access to the exception information 
by using the as e after exception the E variable  
acts as an alias for the exception I can use e 
to print out the exception in the print statement  
so let's edit the print statement I add e 
at the end of the error message I press run  
and what happens our custom message 
is printed out but the contents of e  
are also printed so this time it reads 
something went wrong division by zero  
in Python you could also get access to the actual 
type or class of exception that's occurred to  
do this I add another print statement of e dot 
underscore underscore class underscore underscore  
I run this statement one more time this time 
the output includes the class of error as well  
namely class 0 division error let me clear the 
terminal again let's take this one step further  
to provide even more specific feedback to the end 
user in the accept statement I replace the Base  
Class exception with the actual error that 
was printed out namely zero division error  
I will change the print statement so that it 
first prints the actual error by adding e at  
the start of the statement and now I'll add some 
user-friendly text saying we cannot divide by zero  
I click on run and now the output is 
division by zero we cannot divide by zero  
up to this point you've covered how to wrap your 
code with a try and accept statements and how to  
optimize the message that a user sees but how can 
you handle more than one exception without knowing  
what they are ahead of time fortunately you can 
chain the accept statement by adding another  
accept statement say the code doesn't trip the 
zero division error in the first accept statement  
you can add another accept statement that tests 
for a generic exception now I will add the Base  
Class exception again I add a print statement 
with E and a message with some general information  
I'll click on run and in this case because 
there is still a math error the function will  
still Trip at the first accept statement but 
this gives you a good idea of how you can test  
for more exceptions congratulations you now 
know how to wrap code in the try and accept  
statements to handle all potential exceptions in 
your code while handling is an essential part of  
learning python python has several built-in 
functions to create and manipulate files  
file handling includes opening reading 
and writing files amongst other operations  
as a developer you'll probably work with large 
amounts of data and far handling makes that easier  
this is why it's important to learn how to work 
with files whether you're working with data on  
your computer on the web or in the cloud it will 
most likely be saved in some type of file there  
are two file handling functions in Python open 
and close let's explore the open function first  
the open function is used for Reading Writing 
and creating files the open function accepts two  
arguments the first is the file name and or the 
file location and the second argument is the mode  
the mode indicates what action is required 
such as Reading Writing or creating  
it also specifies if you want the file output in 
text or binary format let's explore the modes of  
file handling you can use in Python first you have 
R which is used to open and read a file in text  
format and RB opens and reads a file in binary 
format you'll learn more about this later R Plus  
on the other hand opens the file for both reading 
and writing and W opens the file for writing  
note that W will overwrite the existing file 
lastly a opens files for editing or appending data  
next there's the close function the close function 
is used for closing the open file connection  
note that it does not take any arguments 
there is one more way to open and close a  
file in Python and that's with the with open 
function the advantage of using it is that  
it closes the file automatically the with 
open function will be demonstrated shortly  
by now you understand how to open files for 
certain actions but you might be wondering  
what the difference is between opening a 
file in text and binary formats in Python  
you generally handle files in two ways either 
in text or binary format the text format is more  
user-friendly because humans can read it you'll 
not be able to read files in binary formats but  
they are much more Compact and therefore result in 
better performance now let's cover how to specify  
the type of file handling in Python python uses 
text as the default format for file handling so  
just passing in any mode for reading or writing 
a file will automatically set it to a text format  
to set the file handling to Binary you need to 
pass the letter b along with either the read  
or write option for example you right open the 
file name in RB to read a file in binary format  
or a B to append or add to a file in binary 
format you'll now explore file handling in code  
foreign first I declare a simple variable called 
file and assign the open function to it to gain  
access to a file but before I can use the open 
function I first need to create a new file for  
testing let's call it test.txt inside this text 
file I add a simple line of text hello there  
good let's go back to the python file so inside 
the parentheses of the open function I can now add  
to the first argument namely test dot txt between 
quotation marks since it's a string for the second  
argument I type in the word mode equal sign and 
then I will just use R for read also between  
quotation marks so far the variable called file 
will have access to the contents of the test.txt  
let's actually read the file you need to add a 
read line or read lines function readline will  
just return the first line of the file while read 
lines will output an array with multiple lines  
since we only have a single line of text in this 
file I'll just use the read line function I type  
file dot read line and parentheses I assigned 
the line of code to a new variable named data  
then I add a print statement to print the contents 
of data lastly I add a close function that will  
close access to the last text.txt file I simply 
close with a set of parentheses I click on run and  
the content of the file is printed out namely 
hello there next I'll demonstrate another way  
to gain access to a file in Python I'll change 
the open function to the with open function I'll  
just clear the screen to assign a variable to 
the with open function you need to add as after  
the parentheses and then the variable name why 
would you use the with open function the with  
open function is better at exception handling 
and will automatically close the file for you  
just like before I create a second variable data 
read line and then print the contents of data  
I'll click on run and just like before 
the contents of the file are printed  
you've covered how to work with files 
in Python this includes the built-in  
functions to create and manipulate files and 
the functions to open read and write files  
in this video you will learn how to create files 
in Python and explore methods of inserting content  
into a new file files are used to permanently 
store data anything stored in the variables  
of your code exists in random access memory or 
Ram since ram loses its data when the computer  
is turned off it's important to be able to create 
files so data is available for future use or as a  
permanent record in Python we can create new files 
using the open function and enabling the right  
mode let's start with a short example I'll use a 
with statement with the open function and pass in  
the following parameters our file will be new file 
dot text and we'll set the mode by passing mode  
equals w now I assign this file to a variable by 
typing as file a shorthand way to assign the mode  
is to enter a single character that represents 
the mode you need in this case I can replace mode  
equal to W with just the letter W and it means 
the same thing now that I have access to the  
newly created file as a variable I can begin to 
add content to the file using the write function  
on a new line I type file dot right and I'm going 
to add some simple text this is a new file created  
when I click run the Explorer pane on 
the left hand side of vs code displays  
in my file called new file.txt 
has been generated as a new file  
clicking once on the new file to select it 
displays its content and confirms that the  
text I pushed through using the right function 
is now present in the file if I choose to write  
multiple lines of content to the file instead of 
a single line I can use the right lines function  
the right lines function accepts a list a list in 
Python is represented by square brackets and then  
a comma for each line I edit my file.write to say 
file dot right lines then within square brackets  
I add a comma after the sentence and type the 
next sentence this is another line to be added  
I click on run and the new file.txt now has the 
two lines created by my right lines function  
but it's not exactly the way I need it to 
be python will add the contents of the list  
exactly as it's specified within the list 
if I want the content to break on a new line  
I need to specify a new line by putting 
in a backslash and the letter N no space  
so just inside the open quote of the second 
sentence I add backslash n now when I click  
on run the content of new file.text is more 
readable with each sentence on a separate line  
one thing to note is that every time I run my 
script it's replacing the current file for example  
if I insert the number 2 into the first line of 
text click on run then check my text file that  
has now replaced the previous file with one where 
I just added the number two in the first sentence  
thus overwriting the existing file with a fresh 
new file.txt on the other hand if I want to add  
to the file as opposed to replacing it each time I 
just need to change the action of mode to do so I  
replace the letter W and put in a letter A which 
stands for append now I click on run three times  
then I check my new file.txt to find that the 
contents have been added it now has multiple lines  
however it has not pulled in exactly the way I 
wanted it to be and the reason for that is I don't  
have a new line specified at the very beginning 
so I add a backslash n before my first sentence  
since I need to replace the file I change the mode 
back to W to ensure I am overwriting the last file  
I click on run and that replaces the existing 
lines that were there now I want to add to the  
file again so I changed the mode back to append by 
changing the W to an A and I click run three times  
I checked the file and confirmed that the new 
lines were appended each time the final part of  
my code will be to trap exceptions always keep in 
mind the necessity to deal with any Exception by  
using the try and accept statements I add a new 
line above my existing code and there I type try  
colon as an example I use file not found error 
which is an error that occurs often this needs  
two new lines added to the end of my code so I 
type accept file not found error as e and press  
enter for a new line then to print out the error 
I type print error comma e now to force the error  
to happen let's say I ask for a directory that 
I know doesn't exist in my current directory  
so the faulty directory is called sample I edit 
my code to Read sample forward slash new file.text  
now I'll clear my terminal and run my screen again  
I get the error generated by my print command no 
such file or directory so take care when you are  
creating files that the directory where you want 
to place the file actually does exist in cases  
like that you must ensure the directory already 
exists or create a directory from within Python  
and then create the file inside it in this video 
you learned about creating files within python  
using the append and write modes and inserting 
single or multi-line content into the file  
you already know how to handle files in Python 
but do you know how to read the contents of a file  
being able to read files is essential when working 
with store data in Python and python offers  
several built-in functions to make this easier the 
three methods we'll explore in this video are read  
line and read lines let's start with 
read the read method Returns the  
entire contents of the file as a string 
that will contain all the characters  
you can also pass in an integer to return only 
the specified number of characters in the file  
the second method to read files in Python is 
readline let's explore this method the read  
line function returns a single line as a string 
if for example you have a file with two lines of  
text that say this is the first line and this is a 
second line the read file function will return as  
the output only the first line of text this is the 
first line the readline function can also include  
an integer argument for returning a specified 
number of characters on a single line let's say  
you use the same testing file but pass an integer 
of 10 your output will be the first 10 characters  
of the first line in this case the words this is 
and the letters th for a total of 10 characters  
the third method to read files in Python is 
read lines let me demonstrate this method the  
read lines method reads the entire contents of 
the file and then returns it in an ordered list  
this allows you to iterate over the list or 
pick out specific lines based on a condition  
if for example you have a file with four 
lines of text and pass a length condition  
the read files function will return the output 
all the lines in your file in the correct order  
files are stored in directories and 
they have paths reading files from  
the same directory is straightforward 
you only need the name of the file  
when working with different locations however it's 
important that you know the difference between  
absolute and relative paths let's start with 
absolute paths absolute paths contain a leading  
forward slash or drive label an absolute file path 
includes all the information you need to locate a  
file whether you are in that files directory or 
not relative paths normally don't contain any  
reference to the root directory and are normally 
relative to the calling file a relative file path  
only includes the information you need to locate 
a file in your current working directory I'm now  
going to demonstrate how you can read files in 
Python I start with a simple sample txt file  
it just has some text with a couple of lines that 
I'll use to demo some of the options there are for  
reading and files I start by using with open 
and I pass in my file name which is sample.txt  
I just want to read in the contents so I set the 
mode to be R and I assign it to a filed variable  
the first option to read a file is to 
print the entire contents of the file  
to do this I use the function 
printfile.read and I click on  
the Run button notice that the entire 
contents of the file is printed out as is  
the second option allows me to print out only a 
certain section of the file for example let's say  
I only want to print out the quick brown fox jumps 
over the lazy dog that's 44 characters I can pass  
in a parameter to the read function which tells 
the function to read in the first 44 characters to  
do this I enter the number 44 and you notice that 
it prints out only the first line when I click run  
the way this works is that it starts at the very 
beginning based on the index of zero and 44 is  
the last character that needs to be printed out in 
this way I can control what sections are printed  
out the third option I have is to read in a line 
so the function I want is dot read line and it  
will only take in the very first line from the 
file I click on run and it prints out only the  
first line of text within that file the fourth 
option is to use the dot read lines function that  
will return a list of lines I click on run and you 
notice that the text in the file is now wrapped in  
square brackets lastly because it's a list I 
can assign it to a variable for example I can  
say data equals file dot read lines and then I can 
write a for Loop for X in data I print the value  
of x and then when I click on run you'll notice 
that the list items are printed out line by line  
something to note is that when you use the 
with open and you get as file it returns  
a list by default I can just change the for 
Loop so that it points to the file variable  
when I click run the same option is returned 
these are just some of the methods you can use  
in Python for reading in files you should now 
be able to describe how to read files in Python  
and demonstrate how to Output different formats 
using the read read line and read lines functions  
you've reached the end of this module on basic 
programming with python during this module you've  
received an introduction to python functions 
and data structures and explored how python  
deals with errors exceptions and file handling now 
it's time to recap the key points of this module  
as with most programming languages functions 
are the basis for creating actions in Python  
and by completing the first lesson in this module 
you should now be able to declare a function in  
Python pass data into a function return data from 
a function and explain scoping at a basic level  
in order to use functions efficiently across 
a project it's important to determine their  
accessibility across different levels of 
code in this lesson you also learned how  
to identify the four scopes describe how 
functions control scope at different levels  
explain data structures and describe the concept 
of lists in Python python has several built-in  
data structures to help you to organize and 
store your data for easy access and you've  
learned about the most common ones on successfully 
completing the second lesson you should now be  
able to identify list methods explain what 
types can be stored in a list describe how  
to iterate over a list and explain the main 
uses of tuples sets dictionaries and quags  
python file handling and exceptions were topics in 
the final lesson in this module having completed  
this lesson you should be able to identify how to 
create and manipulate files with the open function  
describe how to read files in Python and 
demonstrate how to Output different formats  
and store file contents in data structures this 
module gave you the opportunity to get started  
with basic Python Programming well done that's 
one more step towards becoming a python developer  
developers can structure their code in many 
different ways python allows for object-oriented  
procedural and functional programming 
models or as they are often called paradigms  
in this video I'll focus on procedural programming 
which is like writing step-by-step instructions  
that a program executes it's an important 
stepping stone to object-oriented programming  
therefore as a new developer it's important 
to learn more about it the main purpose of a  
programming model is to structure your code that 
structure makes it easier to update the code and  
create new functionality within the code but 
there's no one perfect model that's a solution  
to coding structures and sometimes a combination 
of approaches works best procedural programming  
structures code into procedures sometimes called 
subroutines or functional sections of code  
because of this approach the code is made up 
of logical steps to complete a specific task  
for example adding two numbers to return their 
sum I can add together the numbers 5 and 10 with  
a short piece of code now I want to add together 
the numbers 8 and 4. however the code I wrote was  
specifically to add 5 and 10. for my new numbers 
I must create another similar piece of code to do  
the calculation that would not be a very efficient 
way to code instead I changed the code into a  
function that will accept two numbers as arguments 
and return the sum with this function I don't  
declare the actual numbers as variables instead 
I use the parameters A and B less code is needed  
but something more important has happened 
I now have the function called sum which  
can be reused as many times as I like with many 
different sets of numbers in programming there  
is a principle called dry don't repeat yourself 
and it's all about reducing duplication in code  
the original code I wrote to add two numbers 
together to return their sum is a good example  
of what not to do because I had to write the code 
twice to accommodate the second set of numbers  
a guideline to keep in mind is to create functions 
that can be reused throughout your application  
let's examine another example this time for 
calculating the total of a bill and adding tax  
to it the code will be presented in four sections 
to help you focus on what each procedure does  
first the build total function 
accepts a bill as a parameter  
and Loops through it to calculate 
the total bill and return its total  
they calculate tax function accepts two parameters 
the percentage and the bill total then it Returns  
the total amount of tax to be added to the bill 
which is also rounded off to two decimal places  
the food bill which contains its items represents 
a customer's bill which is static but could  
also be changed to an input to accept data 
from the user to dynamically create a bill  
the last few sections will call the two 
functions to calculate the bill and tax  
and then print each out along with the overall 
total could you identify the subroutines or  
functional sections of the code and did you 
note how these sections reuse one another  
now let's put the four subroutines together to 
examine the four ways in which the footprint of  
the code is reduced by procedural programming it's 
best to inspect The Code by starting at the end  
tax total reuses food total food total 
reusers build total and food bill  
calculate tax reusers bill total 
and build total reuses food bill  
in summary the advantages of the procedural 
Paradigm are it's easy for beginners to  
learn and get started procedures can 
be reused by other parts of the code  
code is easy to understand because each procedure 
is broken into specific tasks procedural  
programming does have some disadvantages including 
it can be harder to maintain and extend in some  
cases it doesn't relate well to Real World objects 
data is exposed throughout the whole program  
procedural programming has both its advantages and 
disadvantages as you learn more as a new developer  
you'll be better able to decide if it's the best 
approach to a specific piece of coding or not  
in this video you'll learn about algorithms an 
algorithm is a series of steps to complete a given  
task or solve a problem on a day-to-day basis 
you use algorithms all the time to complete tasks  
one such example is following a recipe 
to make an egg omelette first you have  
the list of ingredients to use in your 
omelet this can be called your input  
next is the method or the instructions to 
follow step by step to create your dish  
finally you complete the Omelette your output the 
steps to make the omelets are the same every time  
an algorithm and programming Works in a similar 
way in programming algorithms are used to solve  
a multitude of problems that range from simple 
to very complex the key to understanding and  
creating an algorithm is to break the problem into 
smaller parts just like the egg omelette recipe  
that way you build up the steps to complete the 
algorithm that will resolve the overall problem  
now let's explore a practical application of 
algorithms encoding I'm going to demonstrate  
a particular algorithm that checks if a word is 
a palindrome a palindrome is a word that can be  
spelled the same both backwards and forwards 
for example the word race car is a palindrome  
because I can spell it forward as r-a-c-e-c-a-r 
and backwards it's still the same r-a-c-e-c-a-r
to be able to check if a word is a 
palindrome I need to use an algorithm  
as mentioned earlier an algorithm is 
a series of steps to solve a problem  
let me break down the problem I know the string 
in my example race car has an index and I need  
to check if the index at the front of the string 
is equal to the index at the end of the string  
in this way I can compare the two values of the 
indexes so I print str0 because that's the first  
index and I also print str6 because that's the 
last index I can just count that up to double  
check zero one two three four five and six and 
then I click on run the output is the two values  
I need to compare both of which are the letter 
r at the beginning and at the end of race car  
now I'm going to break down our problem into 
smaller steps first I need to check if the value  
of index 0 is equal to the value of the last index 
six which in this case is r then I need to check  
that the next or second character which is index 
one is equal to the second last character which is  
index five finally I need to check if character 
2 is equal to character 4. what I need to do is  
to check if these conditions are true or false so 
let's check how I can write this out in some code  
I begin by creating a function def is palindrome 
and I know that it will accept a single parameter  
called string which I've entered now I want to 
get the starting index as well as the end index  
I put the start index into a variable that 
equals zero every string will always start  
at the index 0 and then the end index is going 
to be the length of the string so I enter end  
index equals Len function Str and then -1 this is 
because a string always starts at zero and I have  
to think about the last index next what I want 
to do is iterate through the string itself and  
compare the starting index with the end index 
characters to validate that they are the same  
to do this I create a for Loop by typing 4 x in 
Str and I'll make the comparison within the for  
Loop I can check if the first index is equal to 
the last index and since the two characters are  
and R are the same it'll continue to be true but 
it would be quicker for me to check if it's false  
because then I'll know straights away if it's 
not a palindrome so I do an if statement and I  
use the string being passed in as the parameter 
then I use the start index to get the character  
and then I check if it's not equal to the string 
within the end index if this condition is met it  
will return false which confirms that it's not 
a palindrome but if the condition is never met  
outside the for Loop then it returns true which 
confirms that it's a palindrome I've done all  
the checks across the starting index and the end 
index and it returns back to the condition of true  
to confirm that it's a palindrome now I'm going 
to test the algorithm to verify that it works  
I use a print statement I call the is palindrome 
function and I pass in race car because I know  
that it's a palindrome I click on run and it 
Returns the value of true if I change race car  
to race cars and I run it again the condition of 
false is returned this is an example of creating  
an algorithm in code to solve a problem it has 
a series of steps that have to be followed to  
resolve the problem in code to give back the 
condition of is the string a palindrome or not  
now you know how useful algorithms can be as a 
step-by-step way to solve a problem with coding  
an algorithm can be used to solve problems 
with a smaller complex once the steps of an  
algorithm are created they will then execute 
the same way each time the algorithm is used  
as a developer your main task will be to write 
code to suit business needs that code will have  
to go through what's called refactoring this 
means that you rewrite or rework the code  
to make it easier to manage or to run more 
efficiently refactoring is a standard part  
of the software development cycle making 
code easy to manage may be straightforward  
but what about making it faster or making it 
perform better to determine how to make code  
faster or perform better you must be able to 
measure it code is measured by time and space  
time is measured by how long it takes and 
space is about how much memory it uses  
Big O notation has different complexities or 
categories ranging from horrible to excellent  
and it's used to measure an algorithm's 
efficiency in terms of time and space  
let's explore the different kinds of time 
complexities first constant time this is an  
algorithm that will always run under the same time 
and space regardless of the size take a dictionary  
for example to get the value of an item you need 
to have the key the key is a direct pointer to  
the value and does not require any iterations 
to find it it's considered constant second is  
a linear time algorithm this will grow depending 
on the size of the input for example if I have an  
array of numbers with a range of 100 it will run 
very fast but if it's increased to a million it  
will take a lot longer to complete the size in 
this case affects the running time of the code  
third a logarithmic time algorithm refers 
to the running time of the input against  
the number of operations I can take a linear 
approach to try to find a number out of 100.  
let's say the number is 97. in a linear equation 
it will take 96 iterations before it's found  
this is because it must iterate through each 
item one by one until it finds the target value  
using a binary search I can drastically cut down 
the iterations and find it under seven iterations  
this is measured by logarithmic time the binary 
search works by splitting the list into two parts  
each time to check if the target is less than or 
greater than one fourth quadratic time refers to  
a linear operation of each value of the input data 
squared this is often a nested list as in this for  
Loop this for Loop is considered quadratic time 
as the outer loop will need to iterate in a linear  
way 10 times but it also has to iterate the inner 
loop the same 10 times for each single Outer Loop  
this means its total iterations 
are 10 times 10 which is a hundred  
Fifth and last is exponential time which is 
an algorithm that doubles with each iteration  
the Fibonacci sequence is a prime example 
of this refactoring code can be a big task  
but understanding algorithmic complexity and how 
it's calculated makes it easier to optimize code  
now that you know about constant linear 
logarithmic quadratic and exponential time  
you are one step closer to your goal of being 
a developer perhaps you've heard of functional  
programming it uses a different Paradigm 
than other models such as object oriented  
it's particularly Adept at processing large 
amounts of data at high speeds this video will  
get you started with what functional programming 
is later in the lesson you'll explore topics such  
as pure functions recursion reversing a string 
and useful python functions such as map and filter  
let's start by exploring the role of a function 
functions take some input process it and then  
produce some outputs there are two types of 
functions traditional and pure pure functions  
will always do the same thing and return the same 
result no matter how many times they are called  
there are several differences between traditional 
and pure so let's list them traditional functions  
can access and modify variables on the 
global States but pure functions cannot  
both traditional functions and pure functions 
can access variables in the local state  
traditional functions can change 
args whereas pure functions cannot  
and lastly the outputs of traditional functions 
does not depend on inputs however the outputs of  
pure functions does depend on inputs functional 
programming in essence is a programming Paradigm  
that utilizes functions for clean consistent and 
maintainable code compared to object orientated  
programming which we'll learn about later 
functional programming differs by Design  
functional programming does not change 
the data outside the scope of the function  
this simply means that the function should avoid 
modifying the input data or arguments being passed  
instead it should only return the completed 
result of the intended function being called  
functions are considered Standalone or independent 
and this AIDS the clean and elegant nature of  
the code in fact many of the strongly typed 
object-orientated languages have Incorporated  
function programming into their structure in order 
to support functional programming the language  
itself needs to allow functions to be passed as an 
argument and also return a function to its caller  
in Python functions are what is known as 
first-class citizens which essentially means  
they have the same level of strings and numbers 
they can be assigned to a variable passed as an  
argument or returned to its caller let's explore 
a few examples of functions available in Python  
take for instance the sorted function the sorted 
function accepts a list of items and then returns  
that list in a sorted order you can use a sorted 
function to list items in alphabetical order by  
passing a list of coffees to the sorted function 
the return sorts the list in alphabetical order  
the great thing about functional programming is 
that the logic behind certain tasks is already  
built in for you functions are reusable 
and thus save a lot of development time  
but did you know that you can also create your own 
function specific to your own requirements let's  
look at a simple example imagine you want to spell 
the names of the coffees backwards this might not  
be entirely useful but it's a good Showcase of 
functional you can create your own simple reverse  
function to do this Define the function let's 
call it reverse and assign the variable Str to it  
now return the value of Str with a slice function 
you'll learn more about the slice function later  
in the lesson then assign a variable to get the 
results of the map function the map function  
accepts as its first argument the reverse function 
and then the iterable coffees it will then  
automatically handle the iterations to go through 
each copy and apply the reverse function to it  
in this video you have learned what functional 
programming is and you were introduced to examples  
of built-in functions in Python a good coder 
will try to keep code clean make it easier to  
debug and ensure it's extendable the great thing 
is that pure functions can help you do all that  
in this video you'll learn what pure functions are 
and how you can use them in functional programming  
it's important to understand that there is a clear 
difference between traditional and pure functions  
a pure function is a function that 
does not change or have any effect  
on a variable data list or set Beyond its 
own scope for example if you have a list  
of the global scope a pure function cannot add 
something to that list or alter it in any way  
let's explore an example function and then 
determine if it is a pure function or not  
this code includes a list on the global scale 
and a function called add to a single parameter  
called item the value of item is then set 
to 4. the output is one two three four what  
do you think is this a pure function no it's 
not a pure function as it changes the global  
list by appending the item which is passed 
as an argument in order to change it to a  
pure function you need to think how to extend 
the function to accept a list as an argument  
add the item to the list without modifying the 
original list and how to return a new list with  
a newly added item the solution is to create a new 
list and copy or clone the data from the original  
list let's revisit the code to make some changes 
this time you make a copy of the original list  
the new item is added to the new list then the 
new list is returned to the caller now that you  
have a better idea of what a pure function is 
let's review a few benefits of your functions  
firstly with pure functions you always know 
what the outcome will be pure functions are  
consistent Snippets of code that do exactly 
what they are intended to do thirdly pure  
functions include the ability to Cache since you 
know the return is always going to be the same  
lastly pure functions lend themselves well to a 
multi-threaded program in multi-threaded programs  
more than one process could run concurrently which 
creates many threads of data pure functions will  
help prevent changes on the global scope ensuring 
data stays reliable now I think it's time to offer  
you a step-by-step demonstration in vs code of how 
to alter a normal function to a pure function pure  
functions are especially useful because they are 
easier to read better to debug and more consistent  
I'll now take you through a simple example 
to demonstrate how to create a pure function  
I'll start by creating a function that does not 
behave like a pure function and then I'll tweak it  
until it's a pure function first I create a list 
called my list and inside it I add three numbers  
one two and three then I add a simple function 
called add to list which takes a single variable  
called item this function will return my list and 
append the new item that is being passed through  
below that I call the function add to list 
and assign the value of 4 to the variable item  
finally I add a print statement of my list so 
that I can focus on the output in the console  
I click on the Run button and the numbers one two 
three and four are printed out this means that my  
list now contains the inserted number four as well 
because the function appended it to the existing  
list what do you think is this a pure function 
no it's not because the data has been manipulated  
at the global scope from inside the scope of the 
function let's try to turn it into a pure function  
the first thing I'm going to change is how the 
function is being called I want to pass in a new  
argument I type new list equals add to list I keep 
the value of 4 and I'll also print out the new  
list below the first print statement to compare 
the output now let's make some modifications to  
the function itself I add a simple append to my 
list which is going to take in the item variable  
I type my list dot append an item in parentheses 
then I want to return back the list I type return  
my list now I click on run and the output in the 
console indicates that both my list and new list  
include the values of one to four it's clear that 
the function is still not a pure function why  
because even though it's returning a new variable 
it still has a reference to the my list variable  
let's try something else to turn it into a pure 
function this time I'll accept a parameter called  
LST for the variable item I type LST comma in 
front of item in the parentheses I also change  
the append statement to LST dot append item and 
I also change the return action to return LST  
finally I change the call Action by passing 
in my list comma inside the parentheses before  
the value of 4. let's run that and once again 
both lists contain the values of one to four  
the reason for this is that the function is still 
using the list as an argument and it's still being  
updated from within the function so ultimately 
in order to create a pure function the problem  
that I have to solve is how to create a new list 
and then I need to solve how to get all the values  
from the list that's being passed through and then 
return the new list back to the calling action  
let's give it another try this time I 
create a new list by creating a copy  
in the function I type the name of the new list 
n l equals LST dot copy and a set of parentheses  
now instead of putting the past values 
into the LST I'll put it into the copy  
so I type NL dot append and then I also change 
the return action to return NL I clear the console  
screen so that I can focus on the output and click 
on run and finally I get two different results  
my list is printed with the values one two and 
three but the second print statement for new list  
includes the values of one to four this function 
is now a pure function because it adds a value to  
a list but it doesn't manipulate the original list 
outside the function in this demonstration you've  
learned what a pure function is and what you 
need to do to change a function that's affecting  
a list on the global scope to a pure function 
that does not interfere with the original list  
it's likely that you'll use pure functions 
regularly in your programming career  
because pure functions will keep your code 
cleaner easier to debug and easier to extend  
in programming recursion is used for solving 
problems that can be broken down into smaller  
repetitive problems it's especially good for 
working on things that have many possible branches  
and are too complex for an iterative approach one 
good example of this would be searching through  
a file system so what is recursion recursion is 
essentially a function that calls itself recursion  
creates a pattern of repeating itself over and 
over and over so what does that mean from a coding  
perspective in this example a function accepts 
a single argument and inside the function it has  
some logic to deal with the problem it's trying to 
solve the key part is the return in the code the  
return statement is returning the same function 
recursion is quite similar to a for Loop it will  
iterate or in the case of a recursive function 
call itself multiple times but a warning when  
you create a recursive function you must always 
consider the result if you don't it will spit into  
an infinite Loop and suck up all the memory until 
the program eventually crashes or gets terminated  
let's compare how to use a looping and a 
recursive solution to find the factorial  
of a number that can be solved let's start with 
the looping solution the looping function accepts  
a single integer called n as an argument and 
first checks if the number is less than zero  
if it is it returns to zero is you can't have 
a factorial negative number the else condition  
sets the factorial to 1 and then Loops through the 
range of the argument which is five in this case  
the loophole calculates one times two times three 
times four times five which will give the answer  
as 120 the factor of five now let's explore 
the recursive solution to the same problem  
the recursive function is simpler and more 
compact the main reason for this is that you  
no longer need the for Loop to do the iteration 
of the N argument the first line of the function  
verifies that the number is 1 and returns 
one if true the else condition multiplies  
the argument n by calling the find factorial 
recursive function and passing in N minus 1.  
recursion can be difficult to understand by 
way of explanation let's demonstrate exactly  
what happened as the function calls itself 
the function is being called over and over  
and the part that changes is the value 
being passed into the function each time  
the argument of n or five in this case is 
decreased by one each time until it finally is one  
this stops the function from being called 
again and exits out of the recursive process  
so how exactly did this code get the result of 
120 . this is provided by the return statement  
it keeps a reference to the incremented 
value and this is the final return after  
it has been completed right it's time to review 
the advantages and disadvantages of recursion  
first the advantages are recursive code 
can make your code neater and less bulky  
complex tasks can be broken down into 
easier to read subproblems generation of  
sequences can be easier to understand than 
nest of Loops but there are disadvantages  
it can be harder to follow the logic in 
recursive code in terms of memory they are  
expensive and sometimes inefficient it can also 
be difficult to debug and step through the code  
you should now be able to explain what recursion 
is and how it can be used to solve problems  
I believe you'll benefit from using recursions 
in your code in the future one of the basic ways  
to test the python developer is problem solving 
skills is by asking them how they would reverse  
a string knowing how to do this is very useful 
in the production environment some programming  
languages have a built-in function to reverse a 
string python doesn't have such a function but  
fortunately due to the language's flexibility 
there are several ways to do this in this video  
I will show you two ways to reverse a string in 
Python first I'll demonstrate how to do this with  
the slice function to start off I create a file 
called stringreversal dot pi the format or syntax  
of a slice function is that it always starts 
with the name of a string open square bracket the  
start parameter colon the stop parameter another 
colon and then the step parameter followed by a  
closed square bracket I'll add a hash symbol in 
front of this line to indicate that it is a note  
this is called the extended slice syntax the start 
and stop parameters are the indices between which  
the function manipulates the string the step 
parameter is the Hops or jumps the function  
makes while traverses a given string I will now 
first Define a string then manipulate the string  
with the slice function and finally print the 
string I'll call the string trial and assign the  
word reversal as its value by typing trial equal 
sign and the word reversal between double quotes  
to manipulate the string I create a new string 
called new trial now I assign a value to new trial  
with the slice function I type in equal sign trial 
and open square bracket to instruct python to use  
the entire string I leave the value of the start 
and stop parameters empty I simply type two colons  
and then add the value of the step parameter as 
the number -1 followed by a closed square bracket  
the negative value of the step parameter indicates 
that the string needs to be traversed from the  
right one index position at a time instead of 
the conventional method of starting from the left  
finally I print the manipulated string to test if 
it works I type print and between parentheses I  
add the string name new trial I click on run great 
in the terminal the string has successfully been  
reversed in summary the entire string is traversed 
from right to left one index position at a time  
this new sliced object is then copied to another 
string which is then rearranged and printed  
it should be noted that you can use the slice 
function to manipulate the same variable I only  
used a second variable in this example for clarity 
the slice function is the simplest way to reverse  
a string I will now demonstrate another way you 
can use the slice function to reverse a string  
this time using recursion I start by creating a 
new file and saving it as string reversal 2 dot pi  
next I Define a function and pass a string 
variable to it namely Str I type Def and  
the function name String reverse and Str 
between parentheses followed by a colon  
this function will act as a conditional if 
statement I type if l-e-n open parenthesis  
Str close parenthesis two equal signs 
the number is zero followed by a colon  
on the next line I'll return the value of 
Str en now let's add the else statement the  
else statement will recursively call the slice 
function but with a modified string every time  
on the next line I add else and a colon then on 
the next line I type return string reverse Str  
but before I close the parentheses I add a slice 
function by typing open square bracket the number  
one and a colon followed by the closed square 
bracket this time the string is traversed from  
the front skipping the first character in every 
Loop and this first character skipped is appended  
to the remaining string so I now add a plus sign 
Str and the value 0 in between brackets outside  
the function I give Str the value of reversal then 
I create a second variable that will store the  
value of the return string I'll call this variable 
reverse and assign to it the value of the function  
finally I add a print statement for the 
variable reverse let's run the code success the  
string displays in reverse order in the terminal 
essentially the function calls itself by passing a  
different string in each recursion and appending 
the element it has kept right after it in this  
video you learned two different methods to reverse 
a string in Python the first by just using a slice  
function and the second by using a slice function 
with recursion let's say I want to generate a list  
using an existing List the general process would 
involve applying some sort of operation to each  
element of the existing list and using those 
outputs to generate the new list there are many  
ways you could do this in Python in this video you 
will learn how to process a list with the map and  
filter functions my file contains a list called 
menu and it contains a list of various coffees I  
want to filter this list for specific coffees say 
I want to print all coffees that start with the  
letter c I will do this by creating a function 
through which I will pass the list to compare  
it to the letter c then I will demonstrate how to 
get the output first is a map and then as a filter  
before I start let me talk you through the format 
of a map function but keep in mind the filter  
function follows the same format to create a map 
I type map and then need to Define its arguments  
the map function accepts two arguments the 
first argument is an actual function in this  
case it will be the function that I will 
use to match values based on a condition  
the second argument is the articles that 
will be passed through that function  
in this case the coffees from my menu list now 
let's create the function with the condition  
I press enter twice to move the map function 
down I type Def and the name of the function  
which is find coffee I then add a single 
parameter coffee between the parentheses and  
a colon after the closed parenthesis the coffee 
parameter I added will be the coffee from my list  
I now need to check if the first character 
of the items in the list matches the letter c  
to do this I'll create an if statement by typing 
if coffee and pass in xero to set the action on  
the first letter of the coffee variable I then 
type the equal sign twice followed by the letter  
c and a colon I press enter and on the next line 
I type return coffee if the statement is true  
to use the map function I'm going to assign 
it to a variable called map coffee I follow  
that by entering an equal sign in the map now I 
can pass in the arguments for the map function  
remember the first argument is the function 
itself I enter the function name find coffee  
it is important to note that I am not calling the 
function I'm just passing it in like an argument  
I add a comma after find coffee and then the 
second argument the article in this case menu  
finally I want to print out the value of map 
coffee so you can focus on the results in the  
terminal a click on run and in the terminal I 
receive a map object as output the next step  
is to iterate through the map object I type 
for X in map coffee print out the value of x  
I click on run again and now I get the output 
as a map in the terminal a list appears with  
a lot of values that say none except cappuccino 
and cortado and that is because cappuccino and  
cortado are the two matches for the letter 
C in the function the great thing about the  
map function is that I did not have to create a 
for Loop to go through the list the map function  
takes the function as an argument and passes the 
menu list values into the function one by one so  
that handles the iteration for me which makes it 
quite useful next I'm going to demonstrate how to  
get the output with the filter function to start 
I'll comment at the section of the code related to  
the map function and clear my terminal the filter 
function works much the same as the map function  
I declare a variable called filter coffee and 
assign the filter function to it again I add the  
two arguments namely the find coffee function and 
menu then I print out the variable filter coffee  
I click on run and receive a filter object as 
output now I will iterate through the filter  
object just like I did with the map object I type 
for X in filter coffee print out the value of x  
I'll clear the terminal now and click 
run this time only cappuccino and cortado  
are returned why is that let me explain the 
difference between a map and a filter function  
a map takes all objects in the list and allows 
you to apply a function to it a filter also allows  
you to take in all objects in the list and runs 
through a function but it creates a new list and  
only returns values where the evaluated function 
returns true that is why there are no none values  
displayed in the output for the filter function 
you now know how map and filter work in Python  
and should be able to also explain the difference 
between the two functions programming languages  
are built upon certain models to ensure that 
code behaves predictably python primarily  
follows what is known as an object-oriented 
Paradigm or model as you'll soon discover  
object-oriented programming or oop relies heavily 
on Simplicity and reusability to improve workflow  
by the end of this video you'll be familiar 
with the object-oriented programming Paradigm  
you'll also be able to identify the four main 
Concepts that Define object-oriented programming  
programming paradigms are a strategy for reducing 
code complexity and determining the flow of  
execution there are several different paradigms 
such as declarative procedural object-oriented  
function logic event driven flow driven and 
more these paradigms are not mutually exclusive  
so programs and programming languages can opt 
for multiple paradigms for example python is  
primarily object oriented but it's also procedural 
and functional in simple terms a paradigm can be  
defined as a style of writing or program oop 
is one of the most widely used paradigms today  
due to the growing popularity of languages that 
use it such as Java python C plus plus and more  
but the oop's ability to translate real world 
problems into code is arguably the biggest factor  
in its success oop has high modularity which makes 
code easier to understand makes it reusable adds  
layers of abstraction and allows for code blocks 
to be moved between projects to help you better  
understand oop I'll first clarify some of its key 
components which are classes objects and methods  
a class is a logical code block that contains 
attributes and behavior in Python a class is  
defined with a class keyword the attributes can 
be variables and the behavior can be functioned  
inside of it you can create instances from these 
classes which are called objects in other words  
a class provides a blueprint for creating an 
object in more practical terms let's say you want  
to record the attributes of employees at little 
lemon such as their position and employment status  
you could create a class called employee and 
conveniently bundle those attributes in one place  
next let's discuss objects as mentioned an 
object is an instance of a class and you  
can create any number of them the state of an 
object comprises its attributes and behavior  
and each one has a unique identifier 
to distinguish it from other instances  
the attributes and behavior of the class 
are What defined the state of the object  
for example you can create the object 
imp one by calling the employee class  
once called you can Define the position and 
employment status attributes as shift lead  
and full time respectively in code this would be 
written as imp one equals employee followed by  
shift lead and ft in parentheses this is a case of 
instantiation or creating an instance of a class  
finally there are methods which are the functions 
defined inside a class that determine the behavior  
of an object instance let's say you want 
the employee objects to Output a string  
that states their position you would first 
declare their function intro in the employee  
class and then call it on an object to get the 
output now that you know about classes objects  
and methods let's explore the concepts that oop 
hinges upon the first one is inheritance which  
is the creation of a new class by deriving 
from an existing one the original is called  
the parent or superclass while any derivatives 
are referred to as the subclass or child class  
the next concept is called polymorphism 
it's a word that means having many forms  
in the context of python polymorphism means that 
a single function can act differently depending  
on the objects that cause it for example the 
built-in plus operator Works differently for  
different data types in the case of integer data 
types the built-in plus operator performs addition  
operations such as three plus five equals 
eight on the other hand in the case of string  
data types the built-in plus operator performs a 
concatenation or combining two strings together  
this ability of modifying 
functionality is called polymorphism  
the third concept is encapsulation broadly this 
means that python combined methods and variables  
from direct access by wrapping them within a 
single unit of scope such as a class encapsulation  
helps prevent unwanted modifications in effect 
reducing the occurrence of errors in outputs  
and finally there is a concept of abstraction 
this refers to the ability to hide implementation  
details to make data safer and more secure note 
that python does not support abstraction directly  
and uses inheritance to achieve it this is 
something that you'll explore in more detail later  
there are some other important Concepts 
in oops such as method overloading method  
overriding Constructors and more which 
you'll learn about in more detail later  
in this video you became familiar with oop 
Paradigm and the four Concepts that support  
it inheritance polymorphism encapsulation and 
abstraction see you next time classes have the  
ability to combine data and functionality which is 
a very useful feature when you are coding by the  
end of this video you'll be able to explain what 
classes instances and objects are in Python you'll  
also be able to create a class instantiate it and 
access its variables and methods you may have also  
heard of classes discussed in terms of attributes 
and behaviors in general attributes refer to  
variables declared in a class while behaviors are 
associated with the methods in a class creating a  
class creates a new type of object from which you 
can create instances an important thing to keep in  
mind is that everything in Python is an object 
or derived from the object class to demonstrate  
how this all works I'll create a class that I can 
then derive objects from in a new vs code file I  
first type the keyword class followed by the name 
my class and a colon I do need to take one more  
step so that python doesn't throw an error and 
that is to type the pass keyword on the next line  
the pass keyword plays the role of a placeholder 
when nothing needs to be executed in practice this  
tells python that I won't do anything with this 
class just yet next let's create an object for  
this class I create a variable called my class 
and then assign the class to it by typing equals  
my class followed by parentheses if I run this 
code the output shows that it has executed without  
errors however just to check that it's working as 
expected let's add a print statement to the class  
so that would be print followed 
by the string hello in parentheses  
when I run the code again the word hello appears 
in the output let me clear the terminal before  
continuing you may have noticed that I used the 
same name for both the class and its object but  
the object name can really be anything for example 
if I change the object name to myc and run the  
code once more it will execute the same as before 
everything I've typed is part of the instantiation  
process in Python which involves three key steps 
one class definition two creating a new instance  
and three initializing the new instance since 
everything in Python is an object it makes sense  
to follow naming conventions to make things less 
confusing later in this case I have my class for  
the class object and myc for the instance object 
there is a third type of object called the method  
object which you can use to call a method 
whenever it's needed classes mainly perform  
two kinds of operations attribute references 
and instant creation I've already written an  
example of the latter so let's try building an 
attribute reference this time first I create a  
variable a for the class object and assign it a 
value of 5. to print this variable I first need  
to refer to the class so under the instance 
object I type print and then my class dot a  
when I run the code it returns 5 in the output 
to confirm the class reference is necessary I  
delete my class from the print statement and 
run the code again and python throws an error  
so I'll correct the code and put my class 
back in let me clear the terminal quickly  
before continuing so you know what happens if you 
reference a class object but what if you reference  
an instance object let's find out by typing a 
print statement for myc DOT a and then running it  
in the output I get 5 which shows that attribute 
reference still works with instance objects  
finally let's finish up by creating a method 
inside this class I'll use the def keyword and  
follow it with hello a pair of parentheses and a 
colon on the next line I tape a print statement  
for the string hello world I'll also delete 
the first print statement to avoid confusion  
to call this method I add a new print statement 
at the end of the document for myc.hello which  
uses the instance object this should work just 
as I successfully called a variable through an  
instance object right running the code results 
in an error so methods are not quite as simple  
fortunately I can resolve this by adding 
the keyword self within the parentheses of  
the method as defined in the class running the 
code again produces the words hello world in the  
output you'll also find the word none printed 
below as there is no return value from the  
given function that's a brief demonstration 
of classes instances and objects I created  
a class then I was able to instantiate 
it and access its variables and methods  
code reusability is the use of existing code 
to build new software reusability is a core  
programming concept by the end of this video 
you'll not only be able to create a class and  
instantiate it with variables and methods but 
you'll also discover how referencing the same  
variables and methods in separate instances 
can produce different outcomes meaning that  
the code is reusable I'll start by creating a 
new file called recipes dot Pi where I'll also  
create a class called recipe before continuing 
let's also explore two special methods in Python  
the first one is the new method which is 
responsible for creating and returning a  
new empty object to write it I start with the 
def keyword followed by double underscore new  
it then appears as a suggestion so 
I click on it to fill out the rest  
the CLS here is not a keyword but rather a 
convention it acts as a placeholder for passing  
the class as its first argument which will be 
used for creating the new empty object the second  
method is the init method which is similar to 
what is known as a Constructor in some other  
programming languages it takes the object created 
using the new method along with other arguments  
to initialize the new object being created I 
read it with the deaf double underscore init  
and then choose the first suggestion that pops 
up the init method takes the new object as its  
first argument the self keyword here is another 
convention it has no function itself but serves as  
a placeholder for self-reference by the instance 
object so let's delete the two example methods and  
then write some code that demonstrates how to 
use the state of the object to your advantage  
I begin with an init method which I then use to 
initialize a few values I do this for the value  
dish by typing self.dish equals dish I then do the 
same for the values items and time before moving  
forward I want to check that the arguments in the 
initializer will match those of my instances to do  
so I add dish items and time after self imagine a 
real world scenario where a restaurant Chef wants  
information about the recipes they have been using 
so let's write a class that will help them with  
that I have the variables dish items and time 
in which items will hold the recipe ingredients  
I now write a function to produce a string out 
of this information I type def contents and then  
self in parentheses on the next line I write a 
print statement for the string the plus self dot  
dish plus has plus self dot items plus and takes 
plus self dot time plus Min to prepare here we'll  
use the backslash character to force a new line 
and continue the string on the following line  
for this to print correctly I need to convert 
the self dot items and self dot time references  
to Strings by appending Str at the beginning and 
encasing each reference in parentheses now that  
I have a class set up let's use it to create a 
pizza instance I write this as Pizza equals recipe  
opening parenthesis the string Pizza comma opening 
square bracket cheese comma bread comma tomato  
closing square bracket comma and 45 to represent 
the time followed by the closing parenthesis  
I also want a pasta object so let's copy and 
paste the code for the pizza object and change  
the object name to Pasta the ingredients to penne 
and sauce on the preparation time to 55. now that  
I have a class and two instances let's see if I 
can access the instance attributes and methods  
I write two print statements for pizza dot 
items and pasta items when I run the code  
I find that despite passing the same function and 
variable items the two instances produce different  
contents so next let's try printing the instance 
method contents over Pizza before we move forward  
let's clear the terminal so we can more clearly 
see what the output will be I type another print  
statement for pizza.contents and empty parentheses 
I run the code once more and the output uses the  
class method to print a line stating the pizza has 
cheese tomato and bread and takes 45 minutes to  
prepare that's a demonstration of creating a class 
and instantiating it with variables and methods  
then referencing the same variables and methods 
in separate instances to yield different outcomes  
let's try to solve a problem that may occur for 
managers at the restaurant because the managers  
are busy running the restaurants they have limited 
time to deal with the needs of employees the  
current system for paying wages requires managers 
to update each other every time an employee  
requests payment because this is cumbersome they 
would like to implement an automated approach  
so what can be done fortunately there's a way 
to reduce the number of steps using instances  
by the end of this video you'll be able to 
explain what instance variables and methods are  
you'll also know how to use them to 
change the state of an instant object  
so let's write some code to help 
those busy restaurant managers
let's start a new file called payment info 
dot pi in this file I'll create the class  
pay slips and initialize three variables 
and it's called name pay status and amount  
I start by typing class pay slips and then on the 
next line I call an inits function with def double  
underscore in it and then select the triggered 
suggestion for the variables I type each one in  
the format self dot variable equals variable 
next I'll create two functions one to display  
the status of the payments another to update 
the status the first function is written as  
def pay with self in parentheses followed by 
self dot payment equals yes on the next line  
the second function is Def status and contains 
an if else statement if self dot payment double  
equals yes return self dot name plus is paid plus 
self dot amount with Str appended to the beginning  
the second part of the statement is else 
return self dot name plus is not paid yet  
finally let's create instances 
of this class for the employees  
I'll call them Nathan and Roger I type the 
first instance Nathan equals payslips and in  
parentheses Nathan for name no for payment and 
1000 for amounts for Roger I copy and paste this  
instance and set the values to Roger no and three 
thousands respectively I also need to make sure  
to pass these values inside the init method 
so I type name payment and amount after self  
now I'm ready to call the instance method 
status to check the status of the payments  
I write a print statement for Nathan dot status 
parentheses and for Roger dot status parentheses  
when I run the code the output all appears 
on one line which is not very presentable  
I add a new line character between the items and 
the print statements which is backslash n this  
time the output is much cleaner the output states 
that neither Nathan nor Roger have been paid but  
let's say that one manager decides to pay Nathan 
so I'll use the pay function to update the status  
remember that the pay function is set up 
to update the value of the payment variable  
I type Nathan dot pay parentheses and then 
copy and paste the last print statement  
above this line I type another print 
statement with the string after payment  
I run the code once more and it now tells me that 
Nathan was paid 1000 whereas Roger still has not  
been paid that's a demonstration of instance 
methods in action now I'll describe the code  
to you in more detail now let's discuss what 
happened in that coding example in more detail  
the two instance objects which are Nathan and 
Roger each have their own States you may have  
noticed that when the instance method pay was 
called to change the state of Nathan Roger was  
not affected this is because the method inside 
the class is not affected rather it provides a  
separate blueprint to each instance which can then 
be updated for that instance only in the coding  
example I didn't print the variable values after 
calling the pay function but if I did it would  
show that the payment instance variable for Nathan 
changed from no to yes while Roger remained no  
now let's imagine that this code is the basis 
for an online payment system it would allow  
either manager to click on the paid button for an 
employee which then update to that employee status  
no more back and forth calls in this video you 
learned how to use instance variables and methods  
to change the state of an instance object without 
affecting any other instances when instantiating  
objects from a class you may find that the class 
is missing some properties that you use frequently  
in that case you could decide to make a new class 
that replicates the first one but also adds a few  
more properties it would be cumbersome to rise 
everything from scratch but thanks to inheritance  
you don't have to by the end of this video you'll 
become familiar with inheritance in terms of  
child classes being derived from a parent class 
inheritance is a core Concept in object-oriented  
programming generally and in particular in 
Python and it's a major part of code reusability  
you may know that everything in Python is an 
object but let's explore that idea more closely  
it specifically means that every class in Python 
inherits from a built-in Base Class called objects  
which is found in built-in dot objects in other 
words a class declaration such as some class with  
empty parentheses implies some class with objects 
as its arguments when speaking of class derivation  
the originating class is known as the parent 
class superclass or base class the class which  
inherits from it is the child class subclass or 
derived class any name pairing is acceptable but  
the important thing to know is that the child's 
class extends the attributes and behaviors of  
its parent class this allows you to do two things 
you can add new properties to the child class and  
you can modify inherited properties in the 
child class without affecting the parents  
so now let's explore an example of how this is 
done in Python here you have a parent class P  
which holds the variable a with a value of 7. then 
there is the empty child Class C in which class P  
is passed as an argument and finally a lowercase 
C represents an instance of child class capital c  
if you write a print statement for C dot 
a and run the code the output is seven  
so even though C itself is empty it still 
holds the attributes inherited from p  
keep in mind that any changes in the parent 
class will also affect any child's classes  
now that you have an idea of how inheritance 
Works let's explore an example that demonstrates  
the flexibility it provides I begin by creating 
a new file called employment dot pi and my first  
step is to create a parent class called employees 
where I'll Define two variables for first and last  
names I do this by typing class employees colon 
and on a new line def double underscore init to  
trigger and select the init method suggestion for 
the first variable I type self dot name equals  
name on a new line and for the second I Advance 
another line and type self dot last equals last  
I then add name and last to the init 
argument on line 2 after the word self  
next I'll create two child classes that both 
extends the employee class the first one I create  
is supervisors and to call the employees class I 
type class supervisors open parenthesis employees  
close parenthesis and a colon I then need to 
modify the in its method of the supervisor's  
class so that I can add another variable named 
password again I trigger and select the init  
method but this time it already includes the name 
and last variables by calling the employees class  
the super method has automatically been applied 
to access the variables there and initialize  
them within the supervisor's class I proceed with 
adding the third variable password inside of the  
init method I then make it an instance variable 
with the line itself dot password equals passwords  
now I'll write another child class called 
chefs again I extend the employees class by  
adding employees as a method inside this class 
I want this one to contain a new function called  
leave request so I type def leave request and then 
self in days as the variables in parentheses the  
purpose of the leave request function is to return 
a line that specifies the number of days requested  
to write this I type return the string may I 
take a leave for plus Str open parenthesis the  
word days close parenthesis plus another string 
days now that I have all the classes in place  
I'll create a few instances from these classes 
one for a supervisor and two others for chefs  
first I type Adrian equals supervisors followed 
by the values Adrian and a in parentheses I can  
then copy and paste this instance two more times 
to serve as a template for the chef's instances  
the first chef is Emily and will hold the values 
Emily and E while the second Chef Juno has the  
values Juno and J finally as an instance of 
the supervisors class Adrian needs another  
value for the password variable so I'll assign 
Apple here next let's call the instance method  
over Emily and pass a value to it she wants to 
request three days off so I type print Emily  
dot leave request and the number three I'm also 
going to add another print statement that will  
check the value of the instance variable over the 
supervisor Adrian I type print Adrian dot password  
the third print statement prints the value 
of Emily's name variable now I run the code  
and get the following outputs the words may I 
take Lee for three days from the first print  
statement the word Apple for the second one and 
the word Emily from the third print statement  
note that both the instance variables and methods 
inside the individual inherited classes are  
present along with the variables from the parent 
class in this video you've learned how inheritance  
in Python helps to make code reusable organized 
and less redundant in this video you'll learn  
about abstract classes and methods if you have an 
abstract class you can ensure the functionality of  
every class that is derived from it for example 
a vehicle could be an abstract class you can't  
create a vehicle but you can drive a car a tractor 
or a boat from a vehicle the methods we put in  
the abstract class are guaranteed to be present in 
the derived class because they must be implemented  
if a vehicle has a turn on engine method then we 
assure that any method calls to a derived class  
that is looking for turn on engine will find it 
this could be for reasons of interoperability  
consistency and avoiding code duplication 
in general in object-oriented programming  
the abstract class is a type of class for which 
you cannot create an instance python also does  
not support abstraction directly so you need to 
import a module just to Define an abstract class  
furthermore methods in an abstract class need to 
be defined before they can be implemented with  
all these limitations one might wonder why you 
would use abstract classes at all one of their key  
advantages is the ability to hide the details of 
implementation without sacrificing functionality  
implementation in abstract classes can be 
done in two ways one is that as base abstract  
classes lack implementation of their own their 
methods must be implemented by the derived class  
another possibility is that the super function 
can be used but that's a topic for another time  
for now let's focus on the module 
for defining an abstract class  
you may not be familiar with modules right now 
but they will be covered in more detail later  
for now it's okay just to follow along 
the module is known as the abstract base  
class or ABC and needs to be imported with 
some code after that you can create a class  
called some abstract class and pass in the 
ABC module so that it inherits that class  
the next step is to import the abstract method 
decorator inside the same module a decorator is  
a function that takes another function as its 
argument and gives a new function as its output  
it's denoted by the at sign you may not be 
familiar with decorators but for now it's enough  
to know that decorators are like helper functions 
that add functionality to an already existing  
function finally here you'll Define an abstract 
method which cannot be called on an object of this  
class you will be able to call this method over 
objects of classes that inherits from this class  
similarly we can Define abstract methods with 
the help of what we call an abstract method  
decorator present inside the same module any given 
abstract class can consist of one or more abstract  
methods however a class that has abstract 
class as its parent cannot be instantiated  
unless you override all the abstract methods 
present in it first with that in mind imagine  
a scenario in which an employer wants to collect 
donations from employees for a charitable cause  
with your newfound knowledge let's write some 
code to make that possible first I import the  
ABC module and its abstract method then I create 
the employee abstract class that calls abstract  
methods to define a method called donate note that 
there's no implementation for this method here  
after that I create the class donation 
Which derived from the abstract class  
note that this class also overrides the abstract 
method I write an implementation for the Donate  
function which takes a user input stores 
it in variable a and returns it next I  
create two employee instances called John and 
Peter and call the function over each of them  
I also create a list amounts to which The 
Returned values will be appended finally I have  
a print statement for amount which will give the 
value of the total donations from both employees  
in this video you learned about abstract classes 
and methods and how to implement them in your code  
up to this point you've explored class 
relationships that were relatively straightforward  
but what happens when things get complex how 
will you know which classes inherit from which  
fortunately method resolution order or mro 
provides rules that can help make sense of that  
by the end of this video you'll know how 
to explain the basic rules of method order  
resolution and how they apply to inheritance 
classes explain the concept of code linearization  
with respect to multiple inheritance and deploy 
method order resolution functions in Python  
you've likely encountered some examples of single 
inheritance where a child class only inherits  
from a single parent class but it's important to 
know that python has many types of inheritance  
the categorization types are based on the number 
of parent and child classes as well as the  
hierarchical order including simple inheritance 
there are broadly four types of inheritance  
the first type is called a simple 
inheritance which you've already dealt with  
there is also multiple inheritance which involves 
a child class inheriting from more than one parent  
next is multi-level inheritance which is 
inheritance taking place on several levels  
then you have hierarchical inheritance which 
concerns how several subclasses inherits from  
a common parent and finally you could say that 
there is a fifth type called Hybrid inheritance  
which mixes characteristics of the others as these 
inheritance types demonstrate inheritance becomes  
increasingly complex as the number of classes 
in a project grow and become more interdependent  
so how do developers solve this issue with the 
use of mro determines the order in which a given  
method or attribute is passed through in a search 
of the hierarchy of classes for its resolution  
or in other words from where it belongs the order 
of the resolution is called linearization of a  
class and mro defines the rules it follows the 
default order in Python is bottom to top and left  
to right when Imagining the inheritance of these 
python classes in a tree structure let's take the  
simplest example of single inheritance the object 
is first searched in the class of that object and  
then in its super class what about in an example 
where class Zed is inheriting from two classes  
let's say Z is inheriting from classes X and Y 
in this instance the mro will be z y and then X  
in other words The mro Works its way 
bottom to top and then from left to right  
but things become much more complicated when more 
levels are added to the hierarchy so developers  
rely on algorithms to build mros old style classes 
used in-depth first search algorithm or DFS  
from python version 3 onwards python versions have 
moved to the new style of classes that rely on the  
C3 linearization algorithm the implementation 
of the C3 linearization algorithm is complex  
and Beyond the scope of this lesson but for now 
here's an overview of a few rules that it follows  
the algorithm follows monotonicity which 
broadly means that an inherited property  
cannot skip over direct parent classes it also 
follows the inheritance graph of the class and  
the superclass is visited only after visiting 
the methods of the local classes this logic  
will make more sense later when you explore more 
complex class relationships in a future lesson  
next let's take a moment to explore some 
methods of finding the mro of a class  
first I'll begin with a demonstration of the mro 
attributes or function let's take a multi-level  
inheritance example comprised of three classes 
Class A Class B and Class C Class A is the parent  
class with b and c the respective child classes 
in other words B inherits from A and C inherits  
from B when I print the return for calling the mro 
function over Class C the output indeed confirms  
that this is the order that is followed so why 
is this important well imagine that class A has  
a variable num with value of 5. and then Class B 
also has a num variable with a value of 9. here  
the mro function tells you quickly that class 
C will inherit to the nine value from class B  
finally let's examine one more function which 
is the help function if I take the code from  
earlier and replace the mro function in the print 
statement with a help function it provides a much  
more detailed output with mro information at the 
top it also contains information about the data  
descriptors and types used inside the code in this 
video you received a brief introduction to Method  
resolution order and how it affects inheritance 
in different scenarios these are both very broad  
topics but hopefully it helps you understand the 
complexity of code that is possible in Python  
well done you've reached the end of this module 
on programming paradigms in this module you  
explored procedural programming functional 
programming and object-oriented programming  
we started the module by saying that procedural 
programming is considered the easiest and a basic  
stepping stone to object-oriented programming 
and the first choice for new developers next you  
explored functional programming which in essence 
is a programming Paradigm that utilizes creating  
functions for clean consistent and maintainable 
code lastly you learned that object-oriented  
programming is about creating objects that contain 
both data and methods these Concepts should now  
make sense to you it's now time to recap the key 
lessons you learned and the skills that you gained  
with that in mind let's summarize the 
key points you learned in this module  
you should now be able to describe the concept of 
procedural programming describe what algorithms  
are and how they can be used to solve problems 
identify how algorithmic complexity is calculated  
and recognize how algorithmic complexity can help 
in improving performance you should also be able  
to describe Big O notation explain what functional 
programming is explain how pure functions are used  
in functional programming and explain recursion 
and how it can be used to solve problems  
what you have learned however did not stop here  
you should therefore also be able to use 
different methods to reverse a string in Python  
explain the difference between the map and filter 
functions explain object-oriented programming and  
the four Concepts it is built upon and describe 
the relationship between classes and instances in  
Python finally having studied the remaining key 
points in this module you should now be able to  
create classes instantiate classes 
access their variables and methods  
and change the state of intense objects 
by using instance variables and methods  
this module gave a comprehensive introduction 
to different programming paradigms in Python  
this is Essential Knowledge that prepares you to 
be able to create even better programming code  
cars are a major part of our lives that make it 
easier to move around but if you needed your car  
to do more such as handle driving in the snow or 
carry large objects while you'd probably modify  
it by adding winter tires or hitching a trailer to 
it in a similar way python is a powerful language  
that allows developers to build amazing things 
but it can gain even more functionality with  
the use of modules in this video you'll learn 
about modules in Python and why they are used  
you'll also explore the different types of modules 
and be able to explain where they can be found  
now you may wonder what a python module is Imagine 
That modules work like instructions to make a pie  
instead of trying to figure out what the steps 
are to create your pie you follow the instructions  
modules work in the same way they are building 
blocks for adding functionality to your code so  
you don't need to continually redo everything a 
python module contains statements and definitions  
so a file like sample.py can be a module named 
Sample and can be imported modules in Python  
can contain both executable statements and 
functions but before you explore how they  
are used it's important to understand their value 
purpose and advantages modules come from modular  
programming this means that the functionality of 
code is broken down into parts or blocks of code  
these parts or blocks have great advantages 
which are scope reusability and simplicity  
let's delve deeper into these everything in 
Python is an object so the names that you  
use for functions variables and so on become 
important scoping means that modules create a  
separate namespace so two different modules can 
have functions with the same name and importing  
a module makes it a part of the global space in 
the code being executed reusability is the most  
important advantage of modularity so when you 
write a piece of code modules help you avoid  
the need to write all the functionalities that 
you may need duplication of code duplicates your  
efforts uses more computer memory and it's 
less efficient let's say for example you  
want to import a math package you automatically 
get access to a lot of functionalities such as  
factorial the greatest common divisor used as gcd 
and so on that are reused without defining them  
one other feature that using modules brings is 
simplicity when modules have a little dependency  
on each other it helps achieve simplicity so each 
module is built with a simple purpose in mind  
modules are defined by their usage so you can also 
use a regular expression or re module for managing  
regular expressions Simplicity also helps in 
avoiding interdependency among these modules  
so if you're working on data visualization import 
of a single module like mat plot lib is sufficient  
for visualizing your data there are different 
types of modules that exist in Python the main  
difference between these modules is the way the 
modules are accessed let's cover built-in modules  
some modules are already built into the standard 
python Library when you use a statement like  
import math in your python code for example The 
Interpreter first tries to find built-in modules  
so how do you import and execute modules 
in Python the first important thing to  
know is that modules are imported only once 
during execution if for example your import a  
module that contains print statements print Open 
brackets close brackets you can verify it only  
executes the first time you import the module 
even if the module is imported multiple times  
since modules are built to help you Standalone 
modules hold all the functions but will most  
likely not contain functions that execute without 
calling it's only when the user executes the  
different functions inside that module that 
they will find the utility of those functions  
in the code the module is normally defined at the 
beginning of the code but you can Define it at any  
point in the code since code execution in Python 
is serial you must import the module first before  
you execute any function inside of it modules 
can also be executed from within the function  
this means that the code inside that module 
can only be used once the function is executed  
in this video you covered modules in Python 
you learned about the different types of  
modules and how they can be used to save 
you time and make your work more efficient  
in Python you can access different types 
of modules such as built-in modules and  
user-defined modules from different locations 
think of the built-in modules as a house that  
you want to build using pre-built and packaged 
floors walls and a roof that you can just Assemble  
this means you don't have to try and find 
hammers bricks plaster and tiles to build  
walls and Floors saving you time and making 
your work more efficient accessing built-in  
and user-defined modules in Python works in 
the same way and helps to save time and build  
efficiency while you're coding remember 
that any python file can be a module  
the modules are searched by The Interpreter in 
the following sequence first the current directory  
path second the built-in module directory third 
the python path an environment variable with a  
list of directories and finally it investigates 
the installation dependent default directory  
let's explore this in Greater detail in this 
video I'll demonstrate how to access different  
types of modules such as the built-in modules 
and user-defined modules from different locations  
let's write some code and learn 
how to access some built-in modules  
I begin by creating a new file called my calendar 
in visual code I then use the sys dots path  
function and return the values that I get from it 
in a variable called locations I finally print the  
values using the print function I now try running 
this code unfortunately this does not work as  
python has no idea what sys is to resolve this I'm 
going to try and import the built-in sys function  
I'm going to run the code again the print 
function returns all the possible locations  
that The Interpreter is going to look for when 
searching for modules including the current  
working directory but this doesn't look very clean 
I know that I have a list of values so I'll run a  
for Loop that Loops through every location 
in turn this returns a much cleaner result  
by printing each location on its own line in the 
terminal now it's always good practice to import  
all the required modules right at the beginning 
but I can do this in a different way I'll import  
a module here in the middle of the code I'll 
import another built-in module called calendar  
I'll now use a couple of functions that the 
calendar has I'll now use a function called  
leaked days which has two inputs year one 
and year two and it will be returning another  
integer value so what I'm going to do is write 
the lead days function right two input years  
and return the value in a variable called leap 
days I'm going to print the value of a variable
I get a return value of 13 which means there 
are 13 leap days in between 2000 and 2050.  
now I'll use another function this function 
is called is Leap it takes one of the years  
as an input and returns a Boolean value it 
tells you if a given year is a leap year  
so let's try 2036 and return the value 
in another variable called is it leap
this time I get the value of true because 
2036 is a leap year if you decide to explore  
a little bit you can hover over calendar if 
you use a Macbook press the command key or if  
using Windows press the control key which will 
take you to the calendar file by clicking on it  
note how the calendar module itself has imported a 
few other modules and other than that it contains  
all the functionalities I now find the location 
of calendar inside the python 3.9 package which  
is one of the locations listed in the terminal 
by the print locations loop I ran earlier  
you just learned how to access built-in modules 
and user-defined modules from different locations  
I encourage you to start using modules in 
your code to make your work more efficient  
in this video you will learn how to use import 
statements for accessing modules from different  
directories you will also learn how to create 
packages from the python package index using  
pip every python file which means any file 
with a DOT py extension containing a script  
is effectively a module the check Imports 
file I am currently creating is therefore a  
module for some of the files the code that you are 
working with is generally called the main module  
in this case check Imports is the main module 
present in the current working directory also  
called the scope of the project you can import 
any python file that is present in the current  
scope for example I can import the sample.pui 
file by typing import followed by the file name  
without the extension I then click on run in 
the top menu the system returns a message in  
the terminal pane that the import was successful 
if I try to import a file with a DOT txt extension  
the import will not be successful for example if 
I type import followed by sample text and click  
on run the system will return an error message 
in the terminal pane as it is not a python file  
python has a library of standard modules called 
built-in modules these modules are directly built  
into the python interpreter and don't have to 
be installed separately I can import a module  
like Json by typing import Json once I execute the 
command I can start using its functions directly  
the list of built-in modules can be found in 
the python standard Library you can think of  
packages as the structuring of python modules as 
a collection special files called init.pi files  
are required for python to treat directories 
containing the file as packages python has a  
rich collection of community built packages that 
I can find on the python package index or Pi Pi  
pip or pip 3 is the default package installer for 
Python and helps with the installation of packages  
from Pi Pi since I have already installed 
numpy I can import it directly in Python  
I do this by typing import numpy clearing my 
terminal and clicking run if I try to import a  
package that is not installed I will get an 
error message for instance if I type import  
Seaborn and click run the message module not 
found error is returned if the package Seaborn  
were installed I could run the command again in 
Python without any error messages to do this I  
would run pip install Seaborn in the terminal 
to download the package from the Pi Pi index  
I can also import files I have created in one of 
the folders within the current working directory  
I have a folder called workplace containing a file 
called trial.pi the file consists of a list with  
a variable names and two entries inside it I'm 
going to import this file and access its contents  
I start by importing the sys module next I use a 
path function in sys by typing sys.path.insert now  
I must enter the path name to my workplace package 
in the first index location to do this right-click  
on the workplace directory and select copy path I 
enter this path name as the first index location  
when passing the path as an argument I must use 
single quotes and type the letter r in front of  
the path string the sys.path list now has a new 
directory where it will look for modules now I  
must import my trial file here by typing import 
trial and pressing enter a squiggly line appears  
below the word trial this is because the IDE does 
not know about the path I've added inside sys.path  
however I can still proceed as The 
Interpreter will know about this path  
to print the output I type print followed 
by trial.names and click the Run button to  
execute the values of Adrian and Maria from the 
names list variable are printed in this video  
you learned how modules can be imported from 
anywhere within your system inserting the path  
name can however be very specific and often 
tricky and confusing don't worry about this  
too much for now it is more important to focus 
on importing files from your current directory  
it is nice to know that importing modules from 
other directories is an option if you need it  
it is good practice though to move the required 
files into the directory that you are working in  
let's explore how to use modules with the 
import statement I have already created a  
file called imports.pi I will now import the 
built-in math module by typing import math  
just to make sure that this code works I'll 
use a print statement I do this by typing  
print importing the math module after this 
I'll run the code the print statement has  
executed most of the modules that you will come 
across especially the built-in modules will not  
have any print statements and they will simply be 
loaded by The Interpreter now that I've imported  
the math module I want to use a function inside 
of it let's choose the square root function sqrt  
to do this I type the words math dot sqrt when 
I type the word math followed by the dot a list  
of functions appears in a drop down menu and you 
can select sqrt from this list I passed 9 as the  
argument to the math.sqrt function assign this 
to a variable called root and then I print it  
the number three the square root of nine 
has been printed to the terminal which is  
the correct answer instead of importing the entire 
math module as we did above there is a better way  
to handle this by directly importing the square 
root function inside the scope of the project  
this will prevent overloading The Interpreter 
by importing the entire math module to do this  
I type from math import sqrt when 
I run this it displays an error  
now I remove the word math from the variable 
declaration and I run the code again this time it  
works next let's discuss something called an alias 
which is an excellent way of importing different  
modules here I sign an alias called m to the 
math module I do this by typing import math as m  
then I type cosine equals m dot I then select 
cos cos from the list of functions after which  
I add the number 0 in parentheses on the next 
line I'll print cosine and then I run the code  
the result is the cosine value of 0 which is one 
this is possible because I used the Alias called m  
if I tried writing math.cose it wouldn't work 
because the math module is now recognized  
as M instead let me remove this code from the 
screen and clear the terminal before we continue  
an alias can also be used for a function that's 
imported for example I can type from math import  
factorial as F to Alias the factorial function 
now I sine F of 10 typed as F opening parenthesis  
the number 10 and a closing parenthesis to a 
variable called factorial 10. I'll print the  
variable and see if it works when we run the 
code we see that it works just fine using an  
alias in this way reduces the effort of typing 
factorial every time after I remove the Alias  
I can import as many functions as I'd like from 
a given module I'm going to import log and sqrt  
I create a variable using the log function 
to find the value of log base 10 of 50.  
I do this by typing x equals log 10 opening 
parenthesis 50 and closing parenthesis and  
again I print the variable on the next line and 
when I click run I'll see whether or not it worked  
once again it worked just fine now what if I want 
to import all the functions inside a given module  
I can remove the functions I added earlier and 
replace them with a star this basically translates  
to import all from the math module when I run 
the code again let's see if it works and it does  
however this practice of using a star is not the 
best approach in certain cases for example this is  
a small file and I know that the log 10 function 
is present inside the math module but when you  
work with a large code base it could be difficult 
to track where the log 10 function came from  
additionally when you're importing other modules 
it may get confusing importing packages is very  
similar to importing modules in Python just like 
you can have imported functions you could also  
import variables and classes from a given module 
now I replace the star with a variable called sum  
variable which may be present inside the given 
module let me try to run the code again since  
the math module doesn't have such a variable it 
throws an error when I print it The Interpreter  
is not able to import some variable from math 
in this video you explore different methods  
that can be used to import modules in Python 
using keywords like import from star and as  
this enables you to use the modular structure of 
python in object-oriented programming in general  
now you should be fairly familiar with how modules 
work let's look at another related Concept in  
Python namespaces and scopes the official python 
documentation defines namespace as mapping from  
names to objects and scope is the textual region 
of a Python program where the namespace is  
directly accessible at this point the dictionary 
with its key value pairs serves as the ideal data  
structure for the mapping of names and objects you 
have also learned how every python file can be a  
module you can view the same module as a place 
where python creates a module object a module  
object contains the names of different attributes 
defined inside it in this way modules are a type  
of namespace name spaces and Scopes can become 
very confusing very quickly and so it is important  
to get as much practice of Scopes as possible to 
ensure a standard of quality there are four main  
types of Scopes that can be defined in Python 
local enclosed Global and built in the practice  
of trying to determine in which scope a certain 
variable belongs is known as scope resolution  
scope resolution follows what is known commonly 
as the legb rule let's explore these local  
this is where the first search for a variable is 
in the local scope enclosed this is defined inside  
an enclosing or nested functions Global is defined 
at the uppermost level or simply outside functions  
and built-in which is the keywords present in 
the built-in module in simpler terms a variable  
declared inside a function is local and the ones 
outside the scope of any function generally are  
global here is an example the outputs for the 
code on screen shows the same variable name Greek  
in different scopes there are three possible 
Declarations of the variable at the global  
level inside the function b or inside the nested 
function C which is called from within B the ID  
function is used here in the print statements 
which Returns the identity of the objects you  
can make some observations from the output 
the ID for the global variable Alpha remains  
same as defined after the code is completely 
executed the ID for the local variable beta  
inside the function B remains unchanged before 
and after the execution of nested function C  
the ID for gamma is assigned only within the 
scope of the nested function and the ID for  
all three variables is different even if they all 
have the same variable name variables in Python  
are implicitly declared when you define them that 
means unlike other programming languages there is  
no special declaration made in Python for the 
variable which specifies its data type what it  
also implies is that a given variable is local not 
Global when it is declared unless stated otherwise  
this contrasts with most other programming 
languages where variables are Global by default so  
when a variable is declared in a global space it 
is also local to that space this can be understood  
with a simple example if you look at the content 
of both of these dictionaries you can see how the  
value for the key country is different in both 
the cases you have also used two special built-in  
functions called locals and globals that list the 
contents of the dictionary inside both of these  
scopes here you can see the output in this example 
you can see the global variable declared remains  
unchanged while Global variables are acceptable 
they are discouraged for a number of reasons  
when you are working with production code the 
project structure can get complex and working  
with global variables can be hard to diagnose 
which lead to what is called the spaghetti code  
other paradigms such as access modifiers 
concurrency and memory allocation are better  
handled with local variables while you were just 
beginning our journey using python it is always a  
good idea to integrate good practices in your code 
there are two keywords that can be used to change  
the scope of the variables Global and non-local 
the global keyword helps us access the global  
variables from within the function non-local is 
a special type of scope defined in Python that  
is used within the nested functions only in the 
condition that it has been defined earlier in  
the enclosed functions now you can write a piece 
of code that will better help you understand the  
idea of scope for an attribute you have already 
created a file called animalfarm.py you will  
be defining a function called D inside which 
you will be creating another nested function e  
let's write the rest of the code you can start 
by defining a couple of variables both of which  
will be called animal the first one inside 
the D function and the second one inside  
the E function note how you had to First declare 
the variable inside the E function as non-local  
you will now add a few more print statements 
for clarification for when you see the outputs  
finally you have called the E function here and 
you can add one more variable animal outside the  
D function this will be a global variable 
you can add a call for the D function and  
a print statement for the global variable 
you can save this file and run the code  
first the global animal variable gets assigned to 
camel then call this function and once inside it  
assign elephant to the local animal then declare 
the inner function e and proceed by printing  
before calling functions animal where the value of 
animal will be the local value which is elephant  
once you are inside the inner function e you use 
the non-local keyword to declare that you are  
going to use the animal variable and you change 
the value to giraffe and here you can see that the  
print statement will give inside nested function 
the value is giraffe which stays consistent even  
after you get out of the inner function so when 
you print after nested function the value Still  
Remains giraffe once the function is fully 
executed come out to see that the value of  
global animal will be camel which you had assigned 
at the beginning so you can see the changes that  
you have made inside are not going to affect the 
value of the global variable let's look at one  
last thing if you comment the local variable out 
this will throw an error you can see there is no  
binding present for non-local animal present 
inside the D function which was required here  
in this video I'll cover the reload 
function that's used with import statements  
the reload function reloads an imported module in 
Python the only precondition is that the argument  
passed to it must be a module that has already 
been successfully imported within the program  
previously you learned how the import statement 
is only loaded once by the python interpreter  
but the reload function lets you import and 
reload it multiple times I'll demonstrate that  
first I create a new file sample.py and I add 
a simple print statement named hello world  
remember that any file in Python can be used 
as a module I'm going to use this file inside  
another new file and the new file is named using 
reloads.py now I import the sample.py module  
I can add the import statement multiple 
times but The Interpreter only loads it once  
if it had been reloaded we would have seen hello 
world several times however I can change this with  
the help of the reload function let me remove 
this code and add the import lib module where  
the reload function sits then I pass the module 
name as an argument to this function note that  
the sample module has been imported more than 
once and I could do it as many times as I want  
now to better demonstrate how the reload 
function can be used I'm creating another  
file called file changes.py this file is going 
to list the content of a particular directory  
in the following code I will be updating 
the contents of the directory and be able  
to monitor the changes using a file that 
I will import since The Interpreter loads  
the file only once the reload function will 
allow us to reload that import and effectively  
update the changes every time without 
stopping the execution of running code  
I begin by importing the built-in OS module and 
I use a function called OS dot Lister inside it  
next I pass the current path as an argument 
by right-clicking the files tab at the top and  
selecting copy path I paste this as an argument to 
the Lister function and add an R before the path  
because I'm looking for a directory and not 
a file I remove file changes.py from here  
I'll save the output from the Lister function into 
a variable called contents on the next line I'll  
add a print function for the contents variable 
before running our program I'll clear the terminal  
to make things clear the return value should list 
the files that are present in the given directory  
you'll notice that it indeed lists all the 
files present in this directory once printed  
I now go back to the reloads.py file and I clear 
the file then I once again import the import lib  
module after this I import file changes and create 
a function called changes as good practice I add  
a try block and used the reload function to 
pass file changes as an argument let me go  
back to the file changes.py file and create a 
function that will print the contents variable  
this is now complete but I'll add 
another print statement for clarity  
I save this file and then I go back to using 
reloads.pi I call this function that I just  
created inside the file changes module and 
because I want to make a try block work I add  
the accept and just pass for now after this 
I execute the code using a for Loop because  
I want to do it more than once I use the range 
function and call the function that I just wrote  
to take some control of the program I'll add 
an input statement here now the program will  
execute five times and every time it will load 
the file changes module and list the contents  
of the directory to make it more interesting I'm 
creating a few text files inside the directory  
now I've returned to using the 
reloads.pi file to run this code  
note that the content on the current directory 
is listed here but I'll now remove the text file  
called text3.txt when I execute the code again by 
hitting enter you'll notice that the particular  
text file has been removed now without changing 
anything else I'll execute the rest of the code  
if I also change the content of file changes.pui 
for example changing the print statement before  
the file names I could see the code reflected 
after I press enter again as I demonstrated the  
reload function can be used for making Dynamic 
changes within your code with the help of import  
statements packages are bundled collections of 
modules in Python serving a specific purpose  
in Python there are currently tens of thousands of 
packages to choose from and in this video you'll  
learn about some of the most popular you can think 
of this collection of packages like a traditional  
real world Library each package is a book or 
magazine and this Library gets bigger every day  
in programming a package is a directory or folder 
and in the same way a module is a file or document  
you import packages in the same way as a 
module using the import statement and like  
with the import statement it's important 
to remember that unless defined correctly  
the import serves no purpose for example 
suppose you want to import a package named Foo  
the import statement on its own will not serve 
any purpose it needs to be in a format like from  
Foo import a where fill is the package and a 
is the module containing the functions you want  
exploring the package's directory structure or 
referring to code blocks online can save time  
to work with packages in Python it's important 
to know that pip is the default package manager  
and the python package index or Pi Pi is the 
package index where you can find and publish  
packages python has an extensive collection of 
packages as the developer starting out it can be  
overwhelming but it's important to understand 
what python is most widely used for today  
the major application areas for python are data 
science Ai and machine learning web Frameworks  
application development Automation and Hardware 
interfacing with this in mind packages can be  
grouped into categories for example built-in 
packages data science machine learning and  
AI web and GUI development let's explore 
each of these briefly now starting with  
built-in packages these are packages that 
don't need to be installed separately and  
can be used as soon as you've installed python 
almost every project uses one or more of these  
built-in packages so it's worth getting to 
know them well the most popular ones are os  
CIS CSV Json import lib re math and ITA tools in 
the world of data science the most popular python  
packages are numpy scipy nltk and pandas these 
are all used for data exploration and manipulation  
other packages like opencv and match plot lib are 
used for image processing and data visualization  
within the world of machine learning or ML and 
artificial intelligence or AI the most popular  
packages are tensorflow Pi torch and Keras pytorch 
and Keras are currently the most popular for deep  
learning and neural network implementation there 
are other packages such as scipy scikit-learn  
and thiano choosing which package to use will 
depend on the scale and scope of the project  
and how familiar you become with a package in 
question okay let's move on to web development  
python today is primarily used for ML Ai and 
web development the most popular packages are  
flask which is a lightweight micro framework 
and Django which is a full stack framework  
other popular web development packages include 
cherry pie pyramid beautiful soup and selenium  
there are also other packages for robotics 
game development and other specialized domains  
for any domain you want to work in you'll 
find several python packages relevant to it  
while no one package may be a perfect 
fit for your current project the open  
source community of python developers 
is working relentlessly to fill the gaps  
as a beginner python coder most functions you 
need will be met by one package to continue  
expanding your knowledge of python packages you 
should think of a project you'd like to create  
and experiment with the packages I've mentioned 
in this video in this video you learned about  
packages in Python you covered built-in packages 
and some of the most popular packages in use today  
python is one of the best languages to use for 
various data science projects and applications  
in this video you'll learn about some of 
the commonly used python libraries in data  
analysis and data science the last decade 
has seen exponential growth in all data  
science areas the demand for data analysis and 
scientists is continually increasing as it's  
a requirement for developers to incorporate 
scientific and data analysis into their code  
python has emerged as one of the most popular 
languages with data scientists one of the main  
reasons for its popularity is the large number 
of different open source packages these have  
been developed by thousands of contributors 
collaborating to provide free usable resources  
many packages are top-rated because they are 
efficient and provide outstanding functionality  
in no particular order of 
preference these packages include  
numpy scipy matte plot lib and scikit-learn as 
an example scikit-learn is used for predictive  
learning and is built on top of other popular 
packages it consists of various supervised and  
unsupervised machine learning algorithms 
for classification regression and svms  
modeling data is the primary focus of this library 
and it provides popular models such as clustering  
feature extraction and selection 
validation and dimensionality reduction  
pandas is an acronym for python data analysis and 
this is a data analysis and a manipulation tool  
it's used primarily for working with data sets 
and provides functions for cleaning analyzing  
and manipulating data using it I can compare 
different columns and find the arithmetic mean  
Max and Min values the primary data structures 
used in pandas are series and data frames  
while series are single dimensional and can be 
compared to a column in a table data frames are  
multi-dimensional and can potentially store tables 
efficiently they are agnostic to the data types  
being stored Panda's most common applications are 
reading CSV files and Json objects and using them  
within python code for faster retrieval pandas 
are known to bring speed and flexibility to data  
analysis pandas library is normally imported by 
the code import pandas as PD numpy stands for  
numerical Python and is a powerful Library forming 
the base for libraries such as scikit-learn scipy  
plotly and matplotlib python scientists use the 
abilities of numpy especially when working in  
scientific domains such as signal image processing 
statistical Computing and Quantum computing  
numpy carries out the calculations needed for 
algebraic areas such as Fourier transforms and  
mattresses the backbone data structure in numpy 
is called ND array or n-dimensional array which  
substitutes the conventional use of lists in 
Python and is a much faster solution than lists  
the dimensions in numpyte are called axes 
and the number of such axes is called a rank  
conventionally numpy is imported with import 
numpy as NP matte plot lib is the visualization  
Library used in Python it can be used to create 
static interactive and animated visualizations  
many third-party tools such as ggplot and 
Seaborn extends the functions of matchplotlib  
these functions are located inside the pi plot 
sub package matplotlib is imported with import  
matplotlib dot Pi plot as PLT an example such as 
libraries 2-0 uses the matte plot lib and numpy  
libraries too for instance display a graphical 
representation of students in a class or the  
distribution of their scores to recap what you've 
learned in this video you should now know about  
the most commonly used python data analysis and 
data science packages artificial intelligence  
or AI is broadly about making machines think 
like humans data science primarily focuses on  
the management and exploration of data which may 
include media such as text audio images and video  
machine learning or ml is a subsection of AI and 
deals with algorithms for training and generating  
insights from data many fields utilize machine 
learning some of the most widely used areas  
are natural language processing deep learning 
sentiment analysis recommender engines computer  
vision and speech recognition with the amount 
of text image and video data available today  
data science and AI in particular are in Greater 
demand than ever python is one of the most popular  
languages used in these domains the reasons 
are syntactical efficiency and readability  
flexibility with different languages 
Frameworks and operating systems  
a welcoming and large community of Developers 
ability to build ml models without having  
to understand the intricacies user-friendly 
debug and testing tools and modular structure  
these all promote the development of many 
primarily open source libraries and Frameworks  
it's important not to get confused with 
the terms packages library and Frameworks  
a package is a collection of modules and 
both library and framework are often used  
interchangeably with packages libraries can 
also be a collection of packages with specific  
purpose whereas the term framework is usually used 
where certain flow and architecture is involved  
it's important to remember that all of these 
pieces of python code are used with the help  
of import statements some of the most popular 
ml libraries in use today are in the areas of  
deep learning and neural networks computer vision 
and image recognition natural language processing  
data visualization and web scraping it's important 
to understand that these are broad categorizations  
most of the libraries associated with them are not 
restricted to a particular field every project is  
unique and should be treated as such the right 
selection of the library can save precious  
time when coding in this video you learned about 
machine learning libraries many fields use machine  
learning and those fields like deep learning 
and neural networks rely on open source machine  
learning libraries that make developers work 
easier these libraries are collections of packages  
and the selection of the right Library can save 
you time when coding so in the future think  
carefully about which Library you should pick for 
a project to make sure that it suits your needs  
web Frameworks are software applications designed 
to provide us with a standard way to build deploy  
and support web applications that we can use 
on the web they help developers to focus on  
application logic and routines by automating 
redundant tasks which helps cut development time  
they also provide easy structuring and default 
models within a reliable stable and easily  
maintainable saving time and effort web Frameworks 
are primarily written in high level code which  
removes the overhead required for understanding 
concepts such as sockets threading and protocols  
as a result time is better spent working 
on application logic instead of routines  
python is a popular framework in web development 
thanks to several features such as good  
documentation abundant libraries and packages 
ease of implementation code reusability a secure  
framework and easy Integrations the different 
Frameworks in Python are efficient and make it  
easy to handle tasks such as form processing 
routing requests connection with databases and  
user authentication they also provide debugging 
and testing tools to handle profiling test  
coverage and test automation Etc there are mainly 
three types of web Frameworks in Python these are  
full stack micro Frameworks and asynchronous 
let's explore each briefly now full stack  
Frameworks are considered a One-Stop solution and 
usually include all the required functionalities  
this can include form generations and 
validators template layouts HTTP request  
handling wsgi interfaces for connection with 
web servers and database connection handling  
some of the most popular python Frameworks are 
Django web 2 pi and pyramid micro Frameworks  
are a lighter version of full Stacks that do 
not offer as many patterns and functionalities  
they are usually used in smaller Web projects 
and building apis flask Auto Dash and Cherry  
Pie are some of the popular micro Frameworks as 
the name suggests asynchronous framework types  
are used to handle a large set of concurrent 
connections they are mainly built using async  
IO networking libraries Growler AIO HTTP and Sanic 
are some of the names you'll encounter choosing a  
framework can depend on many factors this can 
include things like available documentation  
scalability flexibility and integration while this 
categorization is pretty broad it's important to  
remember that each framework in Python has its 
own unique set of features and functionalities  
this can make certain Frameworks more suitable 
than others for a specific project two of the  
most widely used are flask and Django let's 
explore each briefly now Django is a high level  
framework that encourages clean design and Rapid 
development it's a full stack framework that's  
rich in features and libraries it's secure and 
has templating systems and third-party supports  
it primarily gained popularity due to its rapid 
deployment speed you can quickly build scalable  
apps without extensive knowledge of low-level 
programming flask is a micro framework and better  
used for smaller projects it's easy to learn 
simple to use unless a large library of add-ons  
in this lesson you learned about web Frameworks 
and the different types you also learned about  
the different web Frameworks in Python such as 
flask and Django testing is an essential component  
in quality assurance that ensures our software 
applications and websites work as expected for  
example suppose you've built your own website and 
it has a few hundred visitors every day one day  
an article you've published goes viral suddenly 
a million people are visiting your site and the  
website crashes another scenario is online forms 
we've all faced situations where we fill out a  
form and a prompt appears telling us that we have 
made a mistake for example accidentally entering  
letters in space provided for credit card numbers 
or missing special characters and passwords this  
type of data validation is even more critical 
especially in the domains of banking and finance  
in this video you'll learn about testing and it's 
important in the software development life cycle  
but what exactly is testing well software 
testing is a process of evaluating and verifying  
the various software applications and products in 
terms of performance correctness and completeness  
it helps identify bugs gaps in the product defects 
and missing requirements with set expectations  
in the early days of computers software 
developers relied heavily on debugging  
a process for removing and detecting potential 
errors after the 1980s a software grew in size  
several different testing types and products also 
grew in parallel depending on the requirements  
testing was primarily done in the 
later stages of the software life cycle  
now it's evolved to be integrated 
at the early stages as well  
the efficiency of any testing type is dependent on 
how well written it is the ideal testing scenario  
is to have the least tests written to find the 
largest number of defects while software testing  
is important in any scenario the real test of the 
product comes when it's launched to Market there  
it's judged by stakeholders and users we live in 
the internet age products with bugs especially  
in the early stages make consumers lose interest 
very quickly as many alternatives are available  
this is where testing plays an important role and 
here are a few reasons why it can help testing  
helps detect poor designs change inefficient flow 
or functionality address scalability concerns and  
find security vulnerabilities testing helps 
provide a b testing to find the best suitable  
options address compatibility with platforms and 
devices provide Assurance to stakeholders and a  
better experience for end users there are a few 
good practices that must be followed in testing  
to achieve optimal results test code allowing 
reusability of tests tests must be traceable to  
the requirements set tests written must be Purpose 
Driven efficient and allow for repeatability these  
testing techniques can then follow a procedural 
approach according to the type of testing used  
the testing life cycle in general can be broadly 
described as planning preparation execution and  
Reporting the steps involved in achieving this can 
include writing scripts and test cases compiling  
test results correcting defects based on them and 
generating reports from our test results okay so  
you've already learned about test cases they are 
a general set of actions containing steps data  
pre and post conditions written for a specific 
purpose this purpose can improve functionality  
flow and finding defects a well-written test case 
eventually provides good coverage reusability  
better user experience reduces costs 
and increases overall satisfaction as  
the tech industry is ever growing several 
testing categories types told and products  
have evolved which are tailored to best meet 
the requirements of the software in question  
for example a web page will have different 
testing needs than an Android based game  
even among web pages a social media page will 
differ from one say from financial management  
testing can be categorized by several different 
factors for example depending on the amount we  
know about the internal implementation we can call 
it black box or white box testing there are also  
many testing types used in practice these include 
compatibility ad hoc usability and regression  
testing don't worry too much about these terms 
for the moment you'll learn more about them later  
for now I just want you to know that with 
testing there is no one-size-fits-all solution  
when testing products it's also important to 
understand when to stop as no application will  
ever be 100 perfect otherwise a developer may 
feel the product is well tested But realize it's  
full of bugs and flaws as soon as it's released to 
the end users a few metrics can be established for  
this purpose given that there are well written 
test cases in place these include a certain  
number of test Cycles passing percentage of test 
cases time deadlines and time intervals between  
subsequent test failures testing in software 
development can be seen as the anchor of a ship  
or insurance for your vehicle you can hope that 
everything operates smoothly but often it does  
not and while you can aim for Perfection 
there is always potential for human error  
quality assurance today has become an important 
component in the software development life cycles  
much of the credit goes to development of testing 
tools and techniques the question is what type  
of testing should you use in this video you'll 
learn about the types of testing including the  
four main levels or categories of testing which 
is units integration system and acceptance testing  
there are different ways in which you can 
categorize the different test types there are  
white box and black box tests white box testing is 
where the tester has knowledge of the code design  
and functionalities Black Box tests function 
with no such information and the tester has no  
idea about the internal implementation there are 
also other ways to categorize different tests as  
functional non-functional and maintenance 
tests let's explore these functional tests  
are based on the business requirements stated they 
determine if the features and functionalities are  
in line with the expectations non-functional 
tests are more complex to Define and involve  
metrics such as overall performance and quality 
of the product maintenance tests occur when  
the system and its operational environment 
is corrected changed or extended but there  
are also manual and automated testing methods 
that are dependent on the scale of the software  
the most broadly accepted categorization is in 
terms of the levels of testing As you move ahead  
in the software life cycle let's delve deeper 
into these levels of testing four main levels of  
testing are units or component testing integration 
testing system testing and acceptance testing  
the four types of testing levels build on each 
other and have a sequential flow let's explore  
these now in unit or component testing the program 
tests specific individual components by isolating  
them the components are low level which means 
that they are closer to the actual written code  
they often involve use of automation for 
continuous integration given their small sizes  
so you usually write these tests while 
writing the code for example if the code  
is in Python unit tests can be written 
with packages such as Pi test integration  
testing combines the unit tests and tests the 
flow of data from one component to another  
the keyword here is an interface this means 
that you test if the data is correctly fetched  
from a database within the python code 
and if you have sent it to the web page  
there are different approaches to it such as 
top-down bottom-up and sandwich approaches  
your approach depends on what code level 
interfaces you attempt first it builds on the unit  
testing and a tester deals with it next is system 
testing which tests all the software you test it  
against the set requirements and expectations to 
ensure completeness this includes measurements  
of the location of deployed components such 
as reliability performance security and load  
balancing it also measures operability in the 
working environment such as the platform and the  
operating system this is the most important stage 
handled by team of testers it's also the most  
critical stage as the shipping of software to the 
stakeholders and end user happens after this phase  
the final type of testing is acceptance testing 
when the product arrives at this stage it's  
generally considered to be ready for deployment 
it's expected to be bug free and meet the set  
standards the stakeholders in a select few 
end users are involved in acceptance testing  
it normally involves Alpha Beta And regression 
testing one way of approaching this is to give  
pre-written scenarios to the users you use 
the results for improvements and try to find  
bugs that were missed earlier all the different 
testing levels are designed to optimize software  
at different stages the key to testing 
is testing early and testing frequently  
while each of the testing phases is important 
early detection saves time effort and money  
as the coder gets increasingly complex mistakes 
become harder to fix it doesn't necessarily mean  
that unit testing will happen only at the 
beginning and acceptance at a later stage  
there are many testing Cycles where these levels 
are approached iteratively a typical example is  
the agile model here you release different 
versions of the product iteratively and you  
perform acceptance testing every few weeks in 
this video you learned about some of the types  
of testing such as unit testing integration 
testing system testing and acceptance testing  
it's important to remember that the purpose of 
these testing methods is to build a systematic  
approach for testing and identify faults 
and improvements as early as possible  
this results in improved overall 
performance and experience well done
with advancement in technology and increasing 
drivers towards code automation in this video  
you'll learn about test automation packages and 
the importance of automated testing in the past  
machines have substituted human efforts in making 
Goods which helps us save both time and efforts  
in programming the tests chosen for automation are 
the ones that have high repeatability and volume  
predictable environment and data and determinant 
outcomes there are a number of testing types that  
can be automated these include units regression 
and integration an ideal test code must form a  
bridge between the programming calls and the test 
cases python does a fine job in achieving this in  
addition to its clean concise way of coding there 
are some well-written Frameworks in Python and  
some are more well accepted than others the ideal 
steps involved in test automation are usually  
preparing the test environment running the test 
scripts and analyzing the results okay let's now  
examine some important python testing Frameworks 
that have grown in popularity over the years  
first let's explore the built-in testing package 
Pi unit or unitest the unit test framework  
supports test automation independent testing 
modules and aggregation of tests into collections  
the first is pi test a native python library that 
is simple easy to use and reasonably scalable  
I test will be demonstrated later in this course 
it can handle several functional test types such  
as units integration and end-to-end there 
is support for parameterized testing which  
enables us to execute unit tests multiple 
times with different parameters passed  
it can run parallel tests and generate HTML XML or 
plain text reports you can also integrate it with  
other Frameworks like Pi units and nodes 2 and web 
Frameworks like flask and Django while primarily  
used with testing apis it's also well used with 
UI database connections and other web applications  
easy creation and quick bug fixes are why Pi 
test is the most popular testing framework  
for automation next is robot Which is popular 
primarily for its keyword driven development  
capabilities these keywords are used in test 
cases and can be predefined or user defined  
robot is very versatile and used for acceptance 
testing robotic process automation or RPA and  
test driven development it can be used for many 
domains including Android apis and mainframes  
selenium is another open source testing framework 
that has gained popularity over time and is  
primarily driven towards web applications it has 
support for the majority of web browsers and Os  
there are browser-specific web drivers that enable 
testing functionalities like login button clicks  
and filling of forms it allows the tester to 
select the speed and execution of tests and has  
an option to run specific tests or test Suites 
apart from the popular Frameworks Pi test robot  
and selenium there are many more it's important to 
know that a number of these testing Frameworks are  
often used with other tools such as plugins 
widgets extensions test Runners and drivers  
these tools help integrate the software piece 
as being tested and add functionality sometimes  
more than one framework is employed over the code 
being tested in this video you learned about test  
automation packages let's recap quickly automation 
testing is an important reason why the software  
industry is able to move ahead swiftly and more 
smoothly manual testing provides focused attention  
and the ability to handle nuances and complex 
problems with more sophistication this kind of  
testing can't be replaced by automated tests yet 
it's still some time before test scenarios can  
be fully automated but the developments of all 
these Frameworks are in line with that endeavor
in this video I will demonstrate how to use Pi 
test to create simple tests for unit testing  
Pine test is one of the most popular modules for 
unit testing in Python this is because it allows  
you to do simple tests with minimal effort and it 
also has simple clean code with good documentation  
first I create a file called addition dot pi 
next I add a function and pass two variables  
A and B inside it I'm just going to do a simple 
calculation that will return the sum of these two  
variables similarly I create another function 
called sub which will perform the subtraction  
between the two variables second I create another 
file called test Edition dot Pi in which I'm going  
to write my test cases now I import the file 
that consists of the functions that need to be  
tested next I'll also import the pi test module 
after that I Define a couple of test cases with  
the addition and subtraction functions each test 
case should be named test underscore then the name  
of the function to be tested in our case we'll 
have test underscore add and test underscore sub  
I'll use the assert keyword inside these functions 
because tests primarily rely on this keyword  
it checks for conditions in your code and 
expects a Boolean value of true or false  
and the return value is true the test 
passes when it is false the test fails  
let's add assert statements to our tests in our 
first test we'll assert that the addition of 4  
and 5 is 9. and in the second test we'll assert 
that the subtraction of 4 and 5 is negative 1.  
next I make a split screen so 
that I could see both files  
now I run Pi test and I specify the file 
over which I'm going to do the testing  
to do this open a new terminal and enter python 
Dash M Pi test and the name of the test file  
test Edition dot pi I ran the code and both 
tests passed this means that both the assert  
statements have been confirmed to be true four 
plus five is nine and four minus 5 is negative 1.  
these two dots after test Edition dot Pi in the 
terminal also indicate that both tests passed  
now I will intentionally make one of these tests 
fail I do this by changing the negative 1 answer  
to negative 2. I make sure that I have saved the 
file clear my terminal and I'll run the test again  
note that the first test passed but the second one 
didn't also note that where there were previously  
two dots there is now only one dot and an F to 
indicate that the second test failed the ease  
at the start of the lines show where the test 
failed and IT Supplies the possible reason as  
to why it failed I can also write these tests 
without the assert statement and just add pass  
this passes the test regardless of any errors 
when I run the code again it indicates that  
both tests passed you should note that I used 
an equality operator here but I could have used  
less than greater than or keywords such as is 
in or not in all that matters is that the assert  
statement gets a Boolean value I can also add 
multiple assert statements in a single function  
so if I write assert true that should return the 
result and when I run the code again it passes  
both tests but if I make it false it will show 
that one test has failed this indicates that all  
the assert statements within a given function 
should return a true value for the test to pass  
note that using the test underscore prefix for 
both the file name as well as the function name  
is good practice now I'll restore my code and save 
the file if I want to run my test over a specific  
function I just add a double colon at the end of 
the file name and then I write the function name  
I'll clear my terminal first then run my code 
note that only the function I specified has run  
congratulations you now know about simple 
functions in this video you learned that you could  
use Pi test to implement unit testing and how 
to create and use Simple tests for unit testing  
testing has been a relatively recent entry in 
the software development life cycle but its  
importance has been growing as time passes 
software development is time sensitive and  
in the process developers often find testing 
gets squeezed into the time remaining after the  
code is written this doesn't leave enough time to 
test and can lead to the software containing bugs  
that need to be dealt with over time test driven 
development or tdd is an alternative programming  
practice in which the tests are written first and 
the code is written so that the tests will pass  
this differs from the convention of first writing 
the code and testing the application progressively  
tdd follows an iterative approach beginning with 
writing the test cases the initial work requires  
feature and test Planning by the team with slight 
variations let's explore the standard steps  
step one you write a test for a feature that 
fails in Step 2 you write code in accordance  
with the tests step three requires that you 
run the test expecting them to fail in Step  
4 you evaluate the error and refactor the code as 
needed and finally in step 5 you rerun the process  
this process is also called the Red Green refactor 
Cycle red implies the failed tests and green shows  
the passing tests after refactoring the whole 
point of following this cycle is to fail the tests  
and rewrite until you don't have to a feature 
is complete when everything is green and you no  
longer need to rerun you can use a package Library 
such as Pi test when automation becomes a priority  
Pi test only requires writing functions while 
unit test requires classes this means that Pi  
test has the advantage of being easier because 
it requires less effort okay now let's explore  
some of the advantages you gain from tdd writing 
tests first and refactoring code based on it  
ensures the tests cover the code you can now write 
tests with a specific feature and outcome in mind  
the need for such forecasting provides Clarity 
from the beginning the forecasting also plays a  
role in integrating different components where you 
add new features and interfaces in accordance with  
the components that are already there working in 
Cycles over the code gives a developer confidence  
to easily refactor in terms of additional changes 
overall smaller code with early bug fixes code  
extensibility and eventual ease of debugging are 
the primary reasons tdd is growing in acceptance  
finally let's briefly explore some of the 
differences between tdd and traditional  
testing the main difference is that with tdd the 
requirements and standards are highlighted from  
the beginning making it purposeful modern day 
development often employs a combination of both  
these forms of testing depending on the different 
parts and stages of the software development cycle  
there are several subtypes and variations of 
test driven development these include Behavior  
driven acceptance test-driven scaling 
and developer test driven development  
these are all options that can be used 
in the software development process  
congratulations in this video you learned 
about the process of test driven development
in this video you'll learn about how to 
apply the test driven development methodology  
in conventional testing you follow the 
process of writing code and then writing  
test cases to ensure the Integrity of that 
code in test driven development or tdd the  
approach is the other way around and test 
cases are where you must begin your thinking  
the steps involved are as follows right to test 
cases with some functionality in mind write code  
in accordance with the test cases ensuring that 
they pass and refactor code in case the tests  
fail let me demonstrate an example to design 
a test case that checks student enrollment  
with data stored in a database the test needs 
to check the Integrity of the names entered  
first I'll demonstrate how to design the test 
case and then write some code let's say I'm  
checking student enrollment for a class exam 
against the list of names that I already have  
to keep things straightforward I'm going to use a 
python list with the names instead of a database  
I want to make sure that the names I enter 
are on the list and I also want to ensure  
data Integrity which means that I must be sure 
that the names are entered in the correct format  
I've created two files the first is test 
underscore find string which is my testing file  
and the second find string is my main file 
I already have the pi test package installed  
and because this is test driven development I'll 
write my test function first I begin by importing  
a curses module that will help me check the ASCII 
characters that are present then I import the pi  
test module as well as the find string module 
which is my main file I Define a function named  
test underscore is present and I add an assert 
statement to check if the is present function  
works because I'm going to use it to validate my 
data entry contrary to the conventional approach  
of writing code I first write test underscore 
find string Dot py and then I add the test  
function named test underscore is present in 
accordance with the test I create another file  
named file string dot py in which I'll write the 
is present function I Define the function named  
is present and I pass an argument called person in 
it then I make a list of names written as values  
after that I create a simple if else condition to 
check if the past argument is present inside the  
list so the function called is present will check 
if the name parts is present in the list let me  
test my code note that the test has passed because 
the name Al is in the list but this doesn't ensure  
the integrative entries I may add for example I 
might not want numeric characters in the names  
to address this issue I write another function 
named test underscore no digit I'm going to update  
some of the code in my main program findstring.py 
in accordance with the newly added test  
to do this I create a function called No digit 
that matches my tests and again I create a simple  
if else condition I run the code and you'll note 
that one of the tests have passed and the other  
one has failed so the name owl passed because 
it's on the list of names but the value of N7  
didn't pass because it contains a numeric 
character I could also add more test cases  
and modify my code so that it's suitable for the 
test cases and I can repeat the cycle until I have  
no more failed tests congratulations you've now 
explored the test driven development methodology
you've reached the end of this module on python 
modules packages libraries and tools great work  
during this module you learned that python 
is a powerful language that allows you to  
build amazing things but it can gain even more 
functionality with the use of modules libraries  
and tools you may remember that we started with 
modules and learned that they are the building  
blocks for adding functionality to your code so 
you don't need to continually redo everything  
next we explored some of the commonly used python 
libraries in data analysis and data science and  
lastly you discover that testing as a tool is 
an essential component in quality assurance that  
ensures your software applications and websites 
work as expected it's now time to recap the key  
lessons you learned and the skills that you gained 
with that in mind let's summarize the key points  
you learned in this module you should now be 
able to explain what modules are in Python and  
why they are used identify the different types 
of modules and explain where they can be found  
explain how to access built-in and user-defined 
modules from different locations and use import  
statements to access modules from different 
directories you should also be able to create  
packages from the python package into X using pip 
write modules using import statements and explain  
and use the reload function in Python you have now 
learned that python has an extensive collection of  
packages and should be able to describe typical 
module use cases differentiate between built-in  
and user-defined python packages list some popular 
python packages and list some common python  
libraries using data analysis and data science 
in the module you also learned about libraries  
Frameworks and testing you should therefore also 
be able to recognize popular python libraries  
using machine learning and artificial intelligence 
explain big data and Analysis with python to find  
python web Frameworks and list different types 
of web Frameworks describe testing and explain  
the different types of testing list four main 
levels or categories of testing describe testing  
packages in Python such as Pi test selenium robot 
and explore the importance of automated testing  
and you should now be able to explain test-driven 
developments tdd methodology and list the features  
of test driven development this module was an 
introduction to python modules libraries and tools  
this knowledge enables you to extend the 
ability of your programming code in this  
course you were introduced to the foundations of 
python development let's do a brief recap of what  
you covered module one was getting started with 
python in this first module you learned about  
the different ways developers used python in the 
real world and discovered the rationale for the  
existence of python you checked out your hardware 
and software by running Visual Studio code and  
carrying out operating system environmental 
checks identifying any required dependencies  
you explored variables and data types and 
worked with strings casting and data files  
this led you to the section on control flow 
and conditionals where you got to use Python  
operators and build looping and flow controls into 
your code in module 2 you moved on to some core  
programming skills with python including exploring 
functions and data structures Scopes lists tuples  
sets and dictionaries and quarks with all that 
coding built it was time to check for errors  
you finished module 2 by examining errors 
exceptions and file handling and considering  
approaches to error handling nearly halfway 
through the course on module 3 you discovered  
all about the paradigms of functional and 
object-oriented programming and Associated  
logical Concepts we also had an introduction to 
algorithms and to python classes and instances  
nearly at the course end in module 4 you learned 
how you could boost your coding environment by  
using modules libraries and tools in Python you 
also learned about the different types of testing  
and how to write a test well done on completing 
this course recap it's almost time to put your  
knowledge to the test in the graded assessment 
are you ready to display all your python abilities  
congratulations on completing the programming and 
python course you've worked hard to get here and  
acquired a lot of important skills during the 
course you should now have a great Foundation  
of back-end web development skills this is the 
base for you to continue building on in the future  
and you've also demonstrated your skill sets in 
the graded assessment following completion of this  
first course you should now be able to complete 
basic programming with python distinguish between  
the programming paradigms of procedural functional 
and object-oriented programming demonstrates how  
to use modules packages and libraries and work 
within a test driven development environment  
so what are the next steps well this is one course 
in the back end developer professional certificate  
while you've established a good foundation so far 
there's still more for you to learn so if you've  
enjoyed this course and want to discover more 
why not enroll in the other courses throughout  
each of these courses you'll continue to develop 
your skill sets whether you're just starting out  
as a technical professional or student this 
project will equip you with the knowledge  
of back-end development practices as used in 
many business areas such as web development  
artificial intelligence machine learning 
data analytics and many other applications  
you'll have written a portfolio of python code 
that will demonstrate your skills to potential  
employers this shows employees that you are 
self-driven and innovative it also speaks  
volumes about you as an individual and your drive 
to continue your growth once you've completed all  
the courses in this certificate you'll receive a 
Coursera certification for backend developer these  
certifications provide globally recognized and 
Industry endorsed evidence of mastering technical  
skills congratulations once again on reaching the 
end of this course it's been a pleasure to embark  
on this Voyage of Discovery with you best of luck 
and do continue to follow your Learning Journey