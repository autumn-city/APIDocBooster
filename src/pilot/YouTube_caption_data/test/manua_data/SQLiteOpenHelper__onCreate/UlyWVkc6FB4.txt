[MUSIC PLAYING]
SPEAKER: Hello, everyone.
Welcome back to Android
developer fundamental course.
So now that you have seen
how we can use storing data
as files, and the
shared reference
for the persistent
storage, now it's
time to learn about
some database.
That too, also, is
SQLite database.
In this particular
section, we're
going to learn
about what exactly
is SQLite database, what
exactly is a cursor class, what
are content values,
and how exactly we can
implement the SQLite database.
So what exactly is
SQLite database?
Well, SQLite database
is a database only,
but it's a versatile database
for your mobile operating
system.
It's not being just used by
Android operating system.
It will be used by other
mobile operating systems,
such as BlackBerry, iOS, or any
other mobile operating system
you see out there, because it's
a very light database which
gives you a structured data ,
to store your data persistently.
Accessing, creating, updating,
deletion, or insertion
is pretty easy in this database.
And you get the RDBMS
database-- what that is is you
get to save in rows
and columns here.
So when we talk about the
components of SQLite database,
it contains at the top
SQLiteOpenHelper clause.
And inside the
SQLiteOpenHelper ,
class you will be creating
your SQLite database.
So you will see how exactly we
implement this whole structure
So let us talk about
SQLiteOpenHelper class.
SQLiteOpenHelper
class is the class
which is responsible for
creating and upgrading
your database.
So this is the
class which you need
to extend inside your
own class to make
a database for your application.
Under this class only, you will
be creating your own database
classes.
This is the class
which will be used
to execute all your requests
and manages all your databases.
Now let's just talk
about cursor class.
What is a cursor class?
Cursor class is just like
the reserve set in your Java.
It saves the data in the
form of rows and columns.
Whenever you make a
query to your database,
the result which comes back is
in the form of cursor class--
in the data type, cusor class.
So it provides you
a very smooth way
to interact with your
rows and columns,
or the data which you have
got from your database.
You have methods here like
moveToNext or moveToFirst.
So you can check out whether
you've got the data then
only move to next, or if
you don't got the data
it will return you to null.
Think it over as
areas of rows It
will provide you the
rows of your tables.
When we talk about
cursor, you can create
the subclasses of cursor, also.
There are a few
subclasses of cursor
which you can create,
like SQLite cursor.
It exposes the database from
a query on a SQLite database
only.
So it's the general
cursor which we use,
which gives you the access
of your SQLise database only.
MatrixCursor gives
you the access
of a mutable cursor, which
can be changed dynamically.
So there are some
common operations
which you can
implement in a cursor,
like getCount, to get the
number of rows in a cursor;
getColumnNames, it gives you
the string array with the column
names; getPosition will give
you the position of the cursor;
moveToFirst,
moveToNext, again, is
used to iterate
through the cursor,
or close will release
through all the resources
which the cursor was using.
So how exactly do you
process the cursor?
Well, you will be, of course,
passing a query, db.rawQuery.
We will talk about what
exactly rawQuery is in a bit.
But this is a database query,
so we'll talk about it.
But once you
implement this query,
it will return
your cursor object.
And once you get
the cursor object,
you will save it in
any cursor object.
And then you will
iterate through it
with the help of a loop--
a wide loop, let's suppose.
And then you will check
out if it can move to next.
If there is a there is a data
returned back from that query,
then it cannot move to next, and
then you can do something with
that data.
And finally, you need
to close your cursor.
Now, what are ContentValues?
If you want to pass
the data, or if you
want to insert the data
inside your database,
how would you do that?
One way is, provide the values
as the variables-- maybe
string variables, integer
variables, whatever the value
you are supposed to pass.
Or you can use the
ContentValue class.
Now, let us see how exactly
we can use the ContentValue.
First, you will be creating the
object of the ContentValues.
And then you will be
using the method put.
You will be using the key--
that will be the column name--
and the value corresponding
to that column, what
you want to see.
And similarly, the second column
name and the corresponding
value-- what you want to pass.
At the end, from
your database object,
you will use the insert method.
Again, we will talk about
this insert in a bit.
You will use insert--
db.insert-- and pass
the table name--
whatever the table
you want to update--
and then you will pass the
values as a third parameter.
We will talk about the
second parameter also--
that is called
"null column hack"--
in a bit.
Now, let us see how exactly
we can implement our SQLite
database.
First, we are going to
create our data model class.
A data model class
will be the class
which will provide me the data.
It can be any class that
has getter or setter methods,
or it can be a simple
Java POJO  classes--
plain Java objects.
And then you will
be subclassing,
or you will be creating a class
by extending a class named
SQLiteOpenHelper,
because this is
the class which is responsible
for creating your databases.
Then inside that,
you will be providing
some constant for the table
and database, like database
name, table name, or
database version--
things like that, right?
And then because
SQLiteOpenHelper class
is an abstract class, you have
to implement to abstract method
here.
Those are onCreate
and onUpgrade.
onCreate is responsible
for creating your tables
inside your SQLite
database, and onUpgrade
will be responsible for
upgrading your database
if you do make any changes.
And you can implement all
the predefined methods,
which are already provided
by SQLiteOpenHelper class.
For querying, we have query.
For insert, we have insert.
For delete, we have delete,
and update and count, too.
After you define your
SQLiteOpenHelper class,
then you have to get to the
activity-- your main activity
or in whichsoever activity you
want to access your database.
You have to create the instance
of your SQLiteOpenHelper class.
And from there, you call all the
methods or all the operations
whatever the operation you
want to perform-- maybe
insert, maybe query, or
maybe delete or update.
Now, let's just
discuss about each one
of those points in a brief.
How can we create
our data model class?
Well, it will be a
simple Java class
with the getters
and setters, which
I can use inside my database to
get the data or set the data.
Then, I will be
creating a subclass
using SQLiteOpenHelper class.
That's how I will be doing it.
I will be treating any class--
let's say my own class-- extend
SQLiteOpenHelper class.
And then in the
constructor off it,
the very first statement I
need to pass is the super.
That is, I have to call the
parent class constructor-- that
is SQLiteOpenHelper
class constructor.
And then as you
don't do that, it
will give you an
error, because you
have to pass the values to
your parent class first.
So what are the arguments
you need to pass here?
The first argument
is a context object,
which you can get
from variables you
will be creating in the instance
of this class in an activity,
maybe.
Next is your database name.
Whatever the database name
you have already defined,
you must have already given
the constant at the top,
before creating the constructor.
So you must have already
defined the database name.
Third is your cursor
factory object.
What exactly that
is, if you have
a subclass of cursor object,
then you use that object here.
Otherwise, if you want
to use the default one,
just put in "null."
And last is the version
of the database.
If there is any
change of version--
let's say today
in your database,
there are only two columns.
Tomorrow, you decide to
include one more column.
Then you might want to change
the database version name.
And once you change the
database version name,
SQLite will know that, OK,
previous database version
was different.
The new one is different.
So it will automatically
call a callback method,
which I told you in the
starting, on upgrade.
And on upgrade, you
will provide the code
to handle whenever
the database gets
updated, what you need to do.
You might want to
alter the table
or you might want to drop
the whole complete table
and start it again.
We'll see that.
So this is how you can provide
the constant for a table.
Like you can provide database
version, database name,
table name.
If you want to provide the
column names as constant,
then you can provide the
column names also as constants.
After you provide the
constants for that,
then you have to also
provide the query
for creating your first
table inside the database.
So how can we do that?
We all know that the
query for creating a table
is createTable.
You must have already declared
the table name at the top.
So you are going to use
or concatenate that.
And then your IDs or your column
names, and then the type--
which type you want.
Whether integer,
or if you want to make
it parameter key.
And then the other attributes,
other columns, and accordingly,
the type you want to declare--
whether text or
varchar will also work.
And then that query you have
to execute inside the callback
method onCreate, which
you have to override
once you extend a class with
the SQLiteOpenHelper class.
So that query you have to
execute inside the onCreate.
Either you can
execute it directly--
you can put the whole query
directly inside a db.exeSQL.
exeSQL is the method which will
be used to execute all your DML
queries.
Either you can directly
put the query here,
or you can put the
query in at the top,
and then use it as a
string variable here.
Now, let us talk
about onUpgrade.
Like I told you, if you
decide to change the version
at the later stages-- let's
say instead of two columns,
now you have three or
four more columns--
now you have to change
the version at the top.
As soon as you change the
version, automatically,
onUpgrade gets called.
And inside this,
you can put a code.
Either you want to
alter the table,
or you want to drop the whole
table which was previously
used by the user.
And again, pass the
control back to onCreate,
because in onCreate, there will
be a new table created for you.
There are some
optional methods, also,
which you can take a look at,
like onDowngrade, onConfigure,
or onOpen.
They are optional, so you
don't have to override them.
But according to your
need, you can always
override them and use them
inside your SQLiteOpenHelper
class.
Now, let's let us about
database operations.
What are database operations?
Yeah, you guessed it right.
Like querying-- fetching the
data from that database--
inserting the data
into the database--
or updating any data which
is already in the database,
or deleting some data
from the database.
So SQLiteOpenHelper class
already provides you
with all these methods.
You just have to
know how to use them.
Let us talk about
query method first.
With the help of
query method, you
can fetch the data
from the database.
It totally depends
upon you whether you
want the whole thing or
you want the data according
to the where class,
or a particular
data-- a particular
rule or set of rules.
For that, accordingly, your
query statement will be change.
We're going to see what other
different query statements
you can use.
So there are two types of
query methods you can use.
One is your rawQuery,
another one is your query.
You will be using
rawQuery when data
is totally under your control
and supplied by your app only.
And for any other queries, you
will be using the normal query
method.
We're going to take a
look at both of them.
Let's just talk about the
rawQuery method first.
Inside rawQuery, the first
parameter will be the string.
And that string is nothing
but the query of your SQL.
Like, if you want to
select the whole table,
select star from the table name.
Now, if you want to select a
particular row or set of rows,
then your query will change.
Select star from table where
column name equals to this,
or where column name
is less than this.
Accordingly, the
query will change.
And you can directly
pass the values--
your where class
or where values--
inside the query by
concatenating it,
or you can use the second
argument as selection argument,
where you pass the
values as an array.
So this is how it will
look in your code.
You will be providing a query.
Let's say first time, providing
select star from the table
name, where the order is by the
key, and in the ascending order
I'm limiting the
position from one.
So I'm passing this whole
query inside my database--
inside my row rawQuery.
And this whole thing will be
returning me a cursor object.
Now, let us talk about
the query method.
In query method, you don't even
have to remember the SQL query.
All the values you will be
passing as the parameter.
For example, let's say you want
to update a particular table,
you will be passing
the table name.
You want to get the
particular columns,
you will be passing
the columns also.
And if you want to if you
want to put the where values,
then you can pass the
selection arguments.
And if you want to group them
in groupBy or order them,
all those values
you can pass here.
So this is how it
looks like in the code.
You will be again using a SQLite
database object dot query,
and the table name
you want to update,
the columns you want to select
or you want to see, and where--
which kind of column
you want to see,
that will be my where
class-- and what
are the values of those
where clause-- that is
where arguments.
And other I'm putting "null."
But you can always
put the orderBy
and having other
parameter values also.
Let us talk about insert,
delete, update, and count
queries now.
First, let us talk
about insert method.
Insert method is used to insert
the data inside your table.
It will be containing
three arguments.
First will be table.
Second will be your
null column hack.
That will be a string which
will be generally putting null.
And the third will be
your content values.
You know the table
name and the data.
What you want to actually
put inside your table
will be passed with the help
of our class contentValue,
which we already discussed.
Here the data will be passed
in the form of key value pairs,
and we already know
in which column
I have to enter which data.
So here's a small example.
So inside the WORD_LIST_TABLE,
I'm putting some values here.
And the values object
must be having some values
to insert into the
respective columns.
So this is how I can use
the delete query to delete
any data from my table.
So I will put the
table name, then where
class and then pass the
argument of the where class.
Pretty simple.
So this is how it looks like.
If I want to delete anything
from WORD_LIST_TABLE, at which
row I want to delete, and pass
the argument in the wildcards.
And our next argument will
be the value of that ID.
So if I pass the value
as, let's say, three,
the third row will get
deleted from my table.
Same goes with
your update, also.
In update there will be a
table name and the values
you want to update--
the new values--
and where exactly.
The where class will be there--
in which rows you
want to update it.
And the selection, or the
values of that where class.
So this is how it will
look like in action.
You will create a
ContentValue object
and pass the new values
in that value object,
and then invoke the updateQuery
from your SQLite database
object.
And pass the table name,
pass the new content values,
where exactly you want
to update, maybe ID,
and then pass the
value of that ID--
at which ID you want to update.
Always put all your
database operations
in try and catch blocks,
because there can be exceptions.
There can be a SQLite exception
or a syntax error exception.
So to avoid all
those exceptions,
always try to put whatever the
operations of your database you
are using, put them
in try and catch.
And always validate the
user inputs and SQL queries.
If you are taking
any inputs from user,
try to validate them at the
time of coding itself.
So that's how you create
your SQLiteOpenHelper class.
Now your SQLiteOpenHelper class.
Your database is ready.
All you have to do is
instantiate that OpenHelper
class inside your activity
and access your database.
How do we do that?
So inside your main activity,
or any other activity,
you will be initializing the
object of that SQLiteOpenHelper
class.
And if you remember, we pass
the context object there,
so you will be passing this
there, because activity
contains the context object.
Now let us take a look at
high-level architecture
of SQLite database.
So what goes under the hood?
Well, let's say you
want to populate
the data into a RecyclerView
from your SQLite database.
How would you do that?
Well, there will be a
RecyclerView, of course.
And to update your RecyclerView,
will be adapter class.
That also we know.
And inside that
adapter, there will
be a ViewHolder to initialize
each component just for once.
We already know that.
These are the components
of your RecylcerView.
Now what we need to know
is if I'm getting the data
from the SQLite database.
Previously we were
getting the dummy data.
Now I'm not getting
the dummy data.
I'm getting the data
from my SQLite database.
So how can I create it?
First, I will be creating
my SQLiteOpenHelper class.
And inside the
SQLiteOpenHelper class,
I will be putting a database--
I will be creating
that whole structure.
There will be
onCreate, there will
be onUpgrade, insert query will
be there, and update, delete--
all those queries will be
there inside one class.
That will be the subclass
of SQLiteOpenHelper class.
And then, I will use that
subclass inside the adapter.
And in return, once
the data is fresh,
adapter will populate
it to the Recycler.
Now, always use
transactions when
you have multiple
operations to perform--
like you have batch
statements to perform-- more
than one operation to perform.
Like, insertion, deletion,
or updating at the same time.
You can even nest
your queries while you
are doing the transaction.
So that's how you
use the transaction.
You first begin the
transaction on the database.
After that, you can put all the
queries-- maybe insert, maybe
delete, a bunch of
queries-- put them together
and add then put
db.setTransactionSuccessful.
Once you do that, all the batch
statements, all those queries,
will run together and
make your data consistent.
The integrity of the
data will remain intact.
And after that, finally,
you end the transaction.
Now, let us talk
about if you want
to get the backup
application with the cloud.
How can you do that?
Well, all you've got to
do when you are taking
the backup of your application
is, in the manifest file,
where your application
tag is, you
have to provide
an attribute known
as "allow backup as true."
Now, just putting
that "true" will not
take the backup, of course.
Inside the java class,
inside your package--
that is, development
package-- you have to extend
or you have to
subclass or you have
to create a subclass which will
be extending your backup agent
helper class.
And there you have to
connect to the cloud.
And once you
connect to the cloud
and pass the values which you
want to save to the cloud,
your backup will be created
in the cloud itself.
It does sound a little
bit complicated,
but once you get into it, once
you start implementing it,
it's pretty easy.
To learn more about your
SQLiteOpenHelper class
and cursor classes or
ContentValue, please
follow the following links.
Next, we're going to look at
the concept and the practicals
in our guidebook.
And we are also going to see a
small demo on SQLite database.
Thank you.
[MUSIC PLAYING]