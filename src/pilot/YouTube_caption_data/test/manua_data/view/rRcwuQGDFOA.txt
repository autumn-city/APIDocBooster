Hey Guys! In this video, I'm gonna show you how you can count
coins in an image using Python and OpenCV
So let's begin !
First we'll be importing three libraries
one is OpenCV
second is
Numpy, we'll see if needed or not
third one is matplotlib
Then we will read the image
so here we will use
cv2.imread() command to
read the image
then what we will do is ,we will
convert this image to a grayscale image
To display our we will use 
matplotlib's
plt.imshow() function
Now since our image is 
grayscale image so
we will be using camp = 'gray'
Now you can see we 
displayed our image
To count
the coins in our image,we
will have to detect the edges
But before detecting the edges 
we'll have to
make the images blur,
in order to avoid detecting 
the noises
So we'll be using GaussianBlur() function
So..
here the first parameter is
nothing but our input image
and the secong parameter is
the size of the kernel window
which will
hover over the entire image 
and calculate the
central pixel value using 
Gaussian algorithm
and the zero (third argument) is the
standard deviation, so here
if we keep this value as zero
it will calculate
the standard deviation
on its own
so we don't need to worry about the calculation
of standard deviation
If we increase the size of
this kernel
the image would become more blur
So let's see how our image
shows up after making
it blur
Here you see we have blurred
our image. Now we
will be using Canny edge detector
algorithm for detecting
the edges
So here the first parameter
is our input image
which is this one. So we
will be using this image
and not this or
the first image
because we don't want to 
capture noise
we only want to
capture the edges
So this is our first parameter
second and
the third parameter is the
minimum
value and the upper 
value of threshold
Our Canny edge detector 
will calculate
the values
of the edges and if any
edge has a value < 30
it won't be considered
as an edge and if
any edge has a value
above 150
it will be counted as a 
sure edge
And any value
that lies between 30 and 150
will be considered an edge (or not)
depending on if it's
connected to an edge
which has value > 150
Alright? and ..
The fourth parameter is
the kernel size of the Sobel
Sobel filter which will be
calculating (detecting) the edge
3 is the default value
Now we will see the output
So you can see we have 
successfully detected the edges
Now let's proceed further
We can that the edges are 
not connected to each other
So we need to connect the edges
i.e we will have to make 
the edges thicker,
more visible / more connected
to each other, to fill in the gaps
So we will be using dilate 
function in OpenCV
So...
Our input image
size of the kernel
and the number of iterations
Now if we see
the edges are
more clear now
So what this kernel size and dilate
function does is
it will move this kernel over
the entire image
and if under that window
any white pixel falls, 
so it will
make the other pixels (under the 
window) white as well
 
We repeat this process twice, hence
iterations = 2. So we can see
the edges are more clear now
Now the next step is to
calculate the contours
Now we will find the
contours in the image
First parameter is our 
input image. Second paramter is
cv2.RETR_EXTERNAL
third paramter is
cv2.CHAIN_APPROX
Simple or None, we will use NONE
 
The second parameter RETR_EXTERNAL
means that we will be considering
only the external contours
 
and not the internal ones and
CHAIN_APPROX_NONE is, how we
will be calculating the contours?
It means that we will be considering
each and every point
of the edges
to calculate our contour
Now once our contour has 
been calculated
we'll draw the contour on our image
So before drawing contours on our image
we will have to convert our input 
image into RGB image
because cv2 reads image in BGR format
and
matplotlib reads image
in RGB format. So we will have to
convert BGR into RGB
In order to know the difference
b/w BGR and RGB
you can refer one my (previous) videos
Now we will
draw the contours on our image
First parameter will be out input image
second parameter will be the contour
third will be how many contours 
we want to draw
So we want to draw all the contours
and fourth parameter will be
the color of the contour, so
we will consider
green color and the last
parameter is thickness
So let's
display our image
plt.imshow() function
 
So we won't be using
cmap. Here you can see
we have
drawn the contours
So let's find the coins
in the image.I'll just write here 
a  simple statement
statement. "Coins in the image: "
24. So we have counted 24
coins in this image. So..
let's verify it.
1 2 3 4 5 6 7
8 9 10 11 12 13
14 15 16 17 18 19 20 21 22
23 24. So we have
successfully counted right
number of coins
in our image !
I hope you found this video helpful
Don't forget to 'Subscribe'. 
Thank you very much :)