hey guys this is shrini and in this
video let's cover a topic that
a few of you actually requested for and
this
is how to compare uh two images
in a quantifiable way right i mean in
the past i made videos on key points and
descriptors
but the question is how do we quantify
is this image like 34
or what value can we give to
consistently compare a couple of images
okay for that i'm going to use uh shift
or orb
and ssim metrics okay if you know what
they are then
obviously go ahead and watch other
videos of mine
but if you really would like to learn a
bit more about how
are we quickly implementing this with a
few lines of code just go ahead and
watch this video i promise to not make
this
very long okay so it's worth your time
so let's jump into the code and
get to it okay so here we have these few
lines again as usual i'm going to share
this file with you look for the
description
you know you'll find the github link and
you can download this
and all other you know code of mine that
i've generated as part of this video
tutorial so please do subscribe
okay okay so here
let's define the problem i have a couple
of images okay the same images you saw
on the opening screen
i have for example this warped monkey
and then this rotated monkey images
and if i want to compare these two like
what is the quantitative value and later
on again i'll also
open a few other images like scientific
images
i have a very nice scanning electron
microscope image here back scattered
image
and here is artificially added noise but
pretty much the same image so what type
of values do we expect using exactly the
same approach right now we can say okay
this is
what percentage are these images similar
and of course
i have another image that's completely
resized and blurred
now we'll see you know what type of
values can we actually expect
okay so this is uh this is the goal and
in fact i also have another image that's
completely different
uh compared to everything else so
uh again so this is the plan okay so
uh one of the metrics there are many
metrics that claim to compare these
well i shouldn't say claim but that does
uh you know
try to compare features or different
images but the ones i
totally rely on are two one is
structural
similarity this is part of psychic image
metrics go ahead and look at the
documentation again
this is not a tutorial about structural
similarities so we're not going to cover
the
you know math side of it but this is one
of the
ones that i'm going to use and the other
one is open in opencv
we have a orb key point descriptor
it used to be sift i mean i used to use
sift quite a bit but
they pulled it in opencv too you don't
have it you know available
anymore i guess because the original
authors
don't want it to give it away for free
for whatever reason not blaming them but
it's not available anymore okay so what
we're going to do
is uh orb orb
which is a key point uh you know locator
and descriptor right i mean it tells us
hey these points are similar in these
two images and
they tell us exactly where the locations
are and also describes them and please
watch my video on these this specific
topic where i talked about homography
and
uh other stuff but let's get back here
so
orb is going to give us the key points
and describes them it also describes
them so
uh i create a function right here so i
can apply it on multiple images right
later on
so all it's doing is from opencv we are
creating an object
for orb and i'm going to apply that
and detect and compute on my image
number one which i'm going to supply
pretty
soon and image number two right so i
have key points and descriptors
corresponding to each image
very simple this simple and then once i
have the key points and descriptors
now i'm going to perform a brute force
matcher
okay again if none of these make sense
you really have to go back and read a
bit of documentation about
brute force matching and key point
descriptors
but to use this it's very simple okay so
now we are defining a
brute force matcher object now okay
remember
we defined an arb object and we applied
that onto our images now i'm going to
define a brute force matcher and then
i'm going to do something with this key
points in a second
okay so the brute force uh matcher is
going to be applied onto our descriptor
a and descriptor b
descriptor a and descriptor b right i'm
not just looking at key points i don't
care about key points because now i want
to see
if the uh images are similar so i'm only
looking at the descriptors corresponding
to those key points okay
and i'm going to match them so that's
what brute force matcher is and what it
gives you is it's almost like a
similarity
numbers and if the if the
number is basically the range goes from
0 to 100 okay i believe
zero is perfect match and 100 is like
not similar
in in these matches so very good matches
have like lower values
so what i'm going to do is now i'm going
to extract similar regions where i set a
threshold of what i called
acceptable similarity so in this case i
just say okay show me all the matches
where the distance
within my match.distance okay is less
than 50.
it's it's just 50 because it's halfway
between 0 to 100 it's up to you what you
want to choose
and uh that's that's it
after that to quantify that into a
similarity
value all i'm trying to do here is look
at how
uh how many of these regions follow this
criteria of
distance less than 50 divide that by the
total number of matches
right if i have only 20 of them below
this threshold of 50
and i have total 100 of these then i
have a 20
match between these two that's it that's
that's pretty much it so this is
using orb descriptor okay and then
a structural structural similarity is
going to give you a number
okay again look at the documentation for
structure structural similarity
but uh the only thing with this is both
images need to be of same dimensions so
you have to resize it if you're trying
to compare images that are of different
dimensions
but otherwise structural similarity
again it's returning your similarity
and difference and structural similarity
again
very simple just your reference image or
image one and image two
and uh uh similarity index okay
uh right there so uh
once we we just established what we are
trying to do now let's define two images
these two images
are the monkey distorted and rotated so
all i'm doing is just go ahead and
reading
sorry i should run this entire entire
code okay all the way up to this
so now that we define our functions we
just need to apply the functions onto
our images so we need to read these two
images
these are the monkey images so let's
start with them and they both are
same size and now orb similarity is
we just defined the function i just need
to provide these two images
as inputs and let's go ahead and print
out what it
tells us so it's saying that the orb
similarity is 0.36 you can think of this
as 36 percent
if you just uh not change this 50 by the
way if i change this
to i don't know 80 for example
then let's run everything up to this
point right
then obviously the value is going to go
up right so now my similarity is 99
between these two images so now it's
it's it comes down to you
what your application is what you think
is the right cutoff value is here all
i'm
showing you is how to set this and it
comes down to you
uh you know defining your your specific
threshold there
so let's get back to 50. that's a
comfortable point for me
and we looked at orb similarity let's do
this one more time
okay and then after this let's look at
structural similarity
okay 36 percent now structural
similarity it's just uh
uh let's not resize because these images
are of same size in this case
structure similarity uh again we already
imported the library
so it's given me 0.187 okay of course
it's not going to be
same as orb this is a completely
different process
but now you know at least a couple of
ways to
check this similarity let's go ahead and
run these uh
all of these load all of these images
and these are the ones i just showed you
right
the noisy uh so image one versus so
let's go ahead and do image one versus
image one
same image or they're similar obviously
they should be
if you do that your orb similarity is
one that means hundred percent
okay now it gives you an idea of what
the reference is
and let's also look at structural
similarity which should be
oh sorry i can change my image number so
let's go ahead and do image one and
image one
and structure similarity should be also
one okay because we are
doing exactly the same image now uh the
same image versus the noisy image
okay so now we are just doing
this let's run all these lines
so um for orb i'm getting eighty percent
and uh
ssim i keep calling eighty percent a
value of point eight
and uh for structural similarity i'm
getting a value of 0.24 that kind of
gives you an
idea of what the range is you know in
general so
structural similarity it completely went
down from 1
to 0.24 and the only difference between
these two images
is this one has about five sigma uh
noise
that's pretty much it now let's compare
the smooth to one which is image number
three i believe
image one versus image three okay so
let's do a couple more and then i
think you'll have enough information so
let's
run these again and it says
as you can see input images must have
same dimensions because my blurred image
is much smaller than the other images
as you can see and the edges are crappy
and everything okay so now let's go
ahead and resize
this image and let's run this one more
time
i thought i'm resizing it uh image sorry
resize image three i was resizing image
four
okay uh third time
is a charm so let's do that
okay i think i'm i have to focus here uh
resize uh image
three and oh my god
too many things to change that's what
happens when you don't write the code in
an efficient way where you have to
change the same thing
multiple times okay so if this doesn't
work out i don't know what okay so there
you go
so here it says uh similarity of orb is
0.33 but then the structural similarity
is 60
five so when i resize this it's it it
it's it's it's just looking at the
structural similarity right between
these two so once we resize apparently
it thinks
uh it it's it's uh similar so
i if if you're trying to follow this
method i definitely recommend using
these two
parameters when you're looking at
structural similarity maybe you want to
take an
average maybe you want to write another
function to say
if orb is this and if ssim is this
then okay i want to say that this these
are similar or
now i'll leave it to you how to use
these two but you can see how these two
are
kind of different they're looking at
different aspects and they're giving you
these uh
you know these these uh numbers out
there okay so i hope i hope this answers
you guys questions that you left in
under comments
so if you have any such questions please
do leave here unless
unless it's a humongous project for me
if it is relatively easy for me to
explain
i'll record a video for you otherwise
i'll just leave like a comment or
something but please do engage please do
practice and subscribe to my channel
and thank you very much very much for
watching these videos and let's meet
again in the next video
talking a different topic thank you