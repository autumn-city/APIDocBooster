all right so my name is Yahya and in this
video I will be explaining how to go
from a Keras model all the way to an
Android mobile application, obviously a
Keras model you cannot deploy it on an
Android application simply because it's
not supported and the only way to put
some like machine learning or AI model
on an Android phone is to have it either
a TensorFlow model or TensorFlow lite.
now what I've been working with is
basically tensor flow model and
obviously I'm not that expert in the
tensor flow because it's not I mean
compared to Keras, Keras is way simpler. so what I did i've been working with Keras
models I have developed multiple models
using Keras and then the next step is to
deploy this on android phone, and
the first step is to convert this Keras
model into a TensorFlow model and then
the TensorFlow model later on we need
to basically put it or include it inside
the android application and some sort of
assets, and then, later on, we can do some
inferences using this model inference
means i'm going to do some prediction
using this pre-trained model so let's
start with the first step which is
converting a Keras model into a TensorFlow
model so this starts I have this
basically, code and I didn't write it
from scratch I've been searching for
like a couple of weeks how to do that so
what you need is basically a built model
so testing in my case this is
a simple basic neural net model and this
".h5" indicates that this is a Keras-based
model. and make sure you have this
"py" file which is show graph, this is
important for the conversion I will
include it in the description don't
worry about that, so what do I want to do
I want to convert this "h5" file
into a ProtoBuff file or a PB file so
that it is applicable for the Android so
let's get started first of all I'm using
the Spyder software, which is part of anaconda
what I will do is I will make sure that
this directory is changed so that it
includes this show graph so I'll just go
ahead and include this path here
so I'll just do that and then I
will start importing
few libraries, now this is
very important if you are using batch normalization
in your development of the
model while you're developing the model
you need to set the learning rate phase to
zero otherwise you may face some errors
so that's what I will do in the
beginning so write this around this part
and then in the path here I need to
include the folder where I saved my
model obviously this is an old thing so
I need to include the new path
which is this one so this is the path
you know and I just paste that, the main
thing why I put this "r" because
sometimes you get some errors when you
want to load the model, so you need to
put the raw file or the raw format out
of this, so after you put the path you need
to put the model know the path obviously
can put this all in one line but I just
did it in two steps because sometimes I
used to have like a folder and it has
multiple models but it doesn't matter to
be honest. and then to load the model we
use the Keras model, Load model and then
sometimes it was giving me some errors
usually how I load the model I just
loaded using this part now sometimes it
it was giving me some errors and it was
telling me like compilation errors the
main problem is that when I was building
the model I was using a specified
version or like my own compilation
technique so usually if you want to
disable this part you can simply set the
compile to false
and then model.summary to show the
model summary which is just information
about the model what layers you
included and so on. so I'll just go ahead
and undo that okay and if you check here
it just takes a few seconds to build to
load the model on the right-hand side here.
and then I'm expecting like few
neural-net layers this is just a basic
thing that yeah of course there was a
warning messages but don't worry about
that so basically this is the neural net that I've been building. obviously, it has
many layers like starting from this layer
all the way to a dense layer which is
like one layer. and basically this this
this thing I was doing a regression problem
so the output is just like
numbers right so yeah now the following
step is very very important
because I need to know what is the model
output like what is the name of the
layer and what is the name of the layer
of the input layer this is very
important later on because when you want
to use a tensor flow model you have to
tell it exactly what is the output Node
what is the input node names so you
need to tell them the names so that
later on you can make inferences and we
can make prediction using this model, so
I'll just go ahead and run this these
two lines and then I need to store these
numbers this is very important so once I
do that, so it tells me that model output
it has this sensor flow and the name of
it is dense_8 whatever just make
sure we take all of it with the with the
":0" this is because you have to
take it exactly as it is right that's
how it worked for me, I'll be just
storing it here just in case and then
the input that's the name of it it's
just dense one right that's in my case
so I'm just gonna store that, now if you
look here I actually trained multiple
models this one was like CNN LSTM model
and the output layer was a softmax
function softmax function and the input
layer was a convolutional layer so I was
storing the names here, in this case I
need to store the names for this model
that I just trained so this is the input
and this is the output this is very very
important to be honest because when I
was building my own android application I
had to put it exactly as it is otherwise
it was giving me a bunch of errors, okay
so this part is done the next step is to
freeze freeze the model so which is
going from a Keras to like a PB file
which is a TensorFlow graph, okay so
you don't have to understand this much
you can just apply it blindly and it
works, so we don't have to think about it
so you can
do that just make sure that this show graph function
which is this thing
is in the same directory otherwise it
will give you some errors, so let's just
go ahead and do that
skip to this part quickly and then I'll
be just running that part, okay up until
this point, all right up until this
point let me just run that this is just
creating a function so this is a freeze
session function and this is
basically, you give it a Keras model it
basically, it checks the back-end which
is TensorFlow and then it freezes the
session right,
to call this function we
call it a freeze session so this is just
basically calling this defined function
right, so when you're calling it you just
getting the K the back end which is the
Keras based which is like TensorFlow
you are getting  TensorFlow graph out of it
and then you are going to output
something out of this I'm not sure about
the details but basically this is how it works
now before you run this part you
need to understand where you are saving
the TensorFlow because basically this
is just applying this function so I
can easily apply that it's fine, and of
course it takes some time this is the
actual process so this is done so the
TensorFlow graph is basically converted
which is nice so it's done that the next
step is to save it as a PB file so I
need to save it in the same directory so
I have the same variable which is "path"
which is basically the whole thing which is good that's why I did it like it like separatly
then what I will do I will create a PP file with
almost the same name except that I will
be adding like like a TF tensorflow
like extension before I finish it so you
don't have to do that to be honest it's
obvious from the PB that this is a TensorFlow
but anyways so the same model our
version B tester flow so that's it
basically I need to do that and you can
do that and then once you run this part
it just takes some time to run it don't
worry this is just some output message
it tells you that this is done successfully
and if you go to the folder, you
will see that this is the TensorFlow
model so this is done right, the next
step is to apply this in an Android
development which is I am having it
right here so I can start doing that but
let's skip this for now let's actually
postpone it and let's make sure that
this converted model is converted 
successfully so what I'll be doing is
that I need to test it as a tensorflow
model so it's like I don't have this
Keras anymore I have this TensorFlow
model and what I want to do is I want to
do some prediction using this model, just
to confirm that it is doing the job that
is supposed to do right, so to do this
this is again to be honest this is
totally optional you don't have to do
this part you can skip a few few minutes
out of this ahead and then go to jump
into the Android development if you want to
but to be honest for me I would like
to do this just to double-check, so
in order to do this, in order to do some
sort of prediction you need to first of
all tell it where is the PB file so this
is basically where the PB file is
located which is in the same folder path
and then this is the name of the file PB
and basically, this is just importing it
importing the TensorFlow graph right so
that is this step so when you import
this tensor flow graph now it's in the
memory and waiting for you to use it, and
don't worry about these warnings
it's fine now this step is
again this is kind of like repetition
just to know the names it's really
written up there but like running it
from here is quite quick, now obviously
if you basically close this and
you start it from here like loading the TensorFlow, obviously, this part won't
work because this needs Keras anyways
these information whether the output name
and the input name you already have written it so it doesn't matter anyways
now in order to
make a prediction you have to
create like a session so this session is
based on the output node of this trained model
and the output node in this case
is Dense_8 that's the name of it
so I just need to copy paste it here, and
note that in if the model was built in
originally in TensorFlow, you'll just put this as it is but since the model is built-in
Keras the graph includes the word "import"
before the names of the input and the output,
make sure you put the "import"
and "/" before the actual name of
the of the output node, so once you do
that you run it then you successfully
get a session out of this graph and the
next step would be to use the dataset
for prediction right so in this case
I have some data set and let me just
confirm what do I have in this case so
yeah ok so I just have a few information
about this so I'll just go ahead and
load this this is obviously will be
totally different in your case I'm just
having some data to test it right so
depends on your case, now this thing is
important because you need to rename
this exactly as it was for the for the
input so the input it was something like
this right so it was I think some basic
layer is not an LSTMM input, the
input is just a basic dense layer so
just go ahead and do that oh and the
shape is ok, the shape is something by 6
so it's expecting 6 points I have to
make sure that the input and the actual
data that I'm testing is exactly as it
is so anyways you do that and obviously
this won't work it will give me a bunch
of errors so let me just not do that,
because I have multiple models and it's
sometimes it gets confusing so what I
want I want this thing right here so I
want this because it has to be like like
six rows I guess no six columns six
columns one row six columns that's the
shape of my input
the model can do the prediction, now what
now I think I have to reshape this into
wait, I can just double check using
"numpy.shape" of test data just to get
the shape of this guy so it has to match
this thing obviously, so obviously it's
not matching it so I need to do I like a
conversion kind of kind of a conversion
right so yeah okay I think I have that
I've done that here so yeah here this is
line so this ".reshape" reshapes it
from 6x nothing which is
basically like like one dimensional, into
two-dimensional so let me show you what
this does first, so if you do that so
"numpy.shape" and if you convert that
you will have a shape which is 6 x1 or
1 x6 yeah so this gets 1 x 6 so it
matches the input shape so it doesn't
give you errors this is very important
the input to the trained model has to
be exactly the same shape as the input
of the other of the data that you're
feeding otherwise it will get bunch of errors
anyways I have this match, double
which is cross-matched good I'll be
running that to make prediction
basically, so this is very simple you
feed it with some like 6 numbers of data
and it gives you some prediction, to get
the actual value of the prediction you
can skip all of this and obviously there
are some math behind this which is like
getting the maximum out of this but you
can just show the prediction so you can
skip all of this to be honest because
this was using softmax output so you can
just type in predictions and enter, and
it tells you the output since the output is
just one node it tells you that it's just 5.7
that's it that's basically my output, which is 5 to 5.7 that's the predicted  output
so simply you can
ignore all of this is if you're
using a softmax function because if the
the last layer is not like one node
like if they have like eight or
like ten maybe you're doing some
classification problem so you need to
know which note has the highest like
number like probability and
then need to know what's the maximum of this
and what's the confidence and so on,
so this part is all not needed in this
part since I'm doing regression problem
so that's basically it so when you write
this prediction you feed it with the
test data that you want to try, and then
you tell it you're feeding this test
data to which node so you're feeding it
to the input node right with this name,
and that's it so if you want to test
using a different data maybe I would try
something else so let's just go ahead
and try this which is like a different
thing hopefully we should get a
different number right of course this is
not the best model but yeah there is something
so let me just run this part
and of course, should take some time to
do the prediction but it works right let
me just make sure that this prediction
is a different number though, let's just
yeah of course it's different previously
was five point seven so this time is 6.9 so we're sure that the model
is predicting at least different numbers
not the way to like to check whether the
model is accurate or not is to compare
it with the actual thing obviously this
speed it was supposed to be a seven and
this speed is supposed to be like 5.7
I think this was supposed to be
maybe like 5.5 so obviously
the model is not doing an accurate
prediction but yeah the main purpose
here is to show you how to convert Keras
two tensorflow and then from tensorflow
to Android, now the next step would be to
use the specific model inside the Android studio right
so actually let's
do that