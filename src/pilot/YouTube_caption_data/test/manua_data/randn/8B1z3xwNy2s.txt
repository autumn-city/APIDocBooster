Hi everyone. In this video, we are going 
to talk about random seed both in NumPy  
and also Random module in python programming 
language. So, as always, please stay tuned.  
Okay first of all, let's talk about what is random 
seed? For example, suppose that you want to roll  
a dice for two times. And remember that rolling 
a dice is like generating random integer numbers  
between one to six. So, if I want to generate 
random integer numbers. So, first of all I want to  
use NumPy. So I import NumPy package as np and 
then I type np.random because I want to use  
the random section of that NumPy package and 
then I type randint. Because I want to generate  
a random integer number. And then because I want 
to generate random integer numbers between one to  
six, because you want to roll a dice, I pass one 
and seven. But maybe you ask why seven? Because  
the second parameter is exclusive! If you want 
to generate numbers between one to six you should  
type 1 to 7. Because this second parameter which 
is 7 is exclusive. And because in this example, I  
mean rolling a dice, we want to roll the dice for 
two times, I should pass another argument which  
is size and I want to pass two. I mean we want to 
generate random integer number or let's say roll a  
dice for two times. And then I put all the stuff 
in a variable called x. And if I print x and if  
I run the code. You can see here is the output. 
Five six. It's like rolling a dice for 2 times  
and seeing 5 first and then 6. But if I run the 
code again you can see the result is going to be  
different. For example: 1 1. And if I run the code 
again, you can see the result is again different.  
If I run the code again, you can see the result is 
again different. And what is the reason? Remember  
that we are generating random integer numbers. So, 
for example when you are rolling the dice, it is  
totally random. You cannot predict what is going 
to happen. And here it is totally random. So,  
when you run the code you are going to get another 
result. But suppose that I want to share this code  
to my friend and he wants to get the exact same 
results as do I. So, as you can see, the process  
is totally random and it is not possible. But we 
can use random seed to make this process possible!  
So, here I type np.random.seed and for example if 
I pass 0 and if I run the code. You can see the  
result is five six. And if I run the code again 
you can see again the result is 5 6. And if I  
share this code to my friend and he runs the code 
again he's going to get 5 6. Why? Because both  
of us has set the random seed to 0. Okay let's 
explain it this way! The random seed is like the  
initial point or the start point of an algorithm! 
For example, if you set the initial point to zero,  
for rolling a dice for two times, you will get 
five six. But if you set the random seed to eight,  
you will get four and five. And again, for example 
if you set the random seed, I mean the initial  
point, to 137 then you will get six and four. So 
as long as I and my friend and also anyone else,  
sets the random seed to zero for generating 
two random integer numbers between one to six  
we are going to get five and six. So, as you can 
see random seed acts like the initial points or  
the starting point of an algorithm. So, as you 
can see, we can control the process of generating  
random integer numbers and so we can see that 
it is not totally random. So it is called pseudo  
random number generation and not totally! Because 
they're not totally random. And we can control it.  
How can we control it? By passing a random seed, 
which acts like the initial point of an algorithm.  
Okay now let's talk about the random seed 
in a Random module in python and after that  
we're going to take a very good example to better 
clarify all the stuff. So, first of all we should  
import random package. So again for example 
suppose that we want to generate two random  
integer numbers between one to six! In order 
to do so for example, we create an empty list  
and then we want to use the for loop to generate 
two random integer numbers and add it to that x,  
I mean the list. So I simply type for i in range 
of two, because I want to generate two numbers,  
and then I type random.randint because I want 
to use the randint function from that random  
package and for example I want to generate random 
integer numbers between one to six. But maybe you  
ask why we didn't write one to seven? Because 
here in Random module, despite the NumPy module,  
the second parameter is inclusive. But if you 
remember in NumPy was exclusive! But here it  
is inclusive. For example, I want to call the 
generated number for example ‘a.’ And then I  
want to append to that list, I mean x, the number 
that we have just generated which is “a”. And here  
if I print x and if I run the code, you can see 
here is the result. And if I run the code again  
you can see we are going to get different 
results. Why? Because it's a random process.  
So, in order to generate reproduceable random 
numbers I should use the random seed. So I simply  
type random.seed and for example I want to pass 
zero to this random seed. And if I run the code,  
you can see here is the result. And if you run 
the code again and again you will get four four,  
because you have set random seed to zero. 
But maybe you ask what the hell is this?!  
When we set the random seed to zero in NumPy 
module, we get five six! But when we set  
the random seed to zero in random module, we get 
four four! But this is very natural and normal.  
Why? Because it's like two different algorithms. 
If you give the first algorithm zero and also  
give zero to the second algorithm, the outputs of 
these two algorithms are not going to be the same.  
Suppose that I'm a teacher and I have a class with 
30 students, and I want all these students to do  
this homework: I want them to generate 1000 random 
numbers between 1 to 6 and finally calculate the  
mean of these data. But because I want to be able 
to check the answers, I will say okay everybody,  
use NumPy package and also set the random seed 
to eight. Because as long as anybody sets the  
random seed to eight in NumPy package, you're 
going to get the same results. And finally,  
I can check the answers. Okay for doing 
so, we should import NumPy package as np.  
Then we need to say np.random.seed and 
we want to set the random seed to eight.  
Then I type np.random.randint and because I want 
to generate random integer numbers between one to  
six, I should pass one to seven to NumPy. And here 
I want to type size equal to one thousand. Because  
I want to generate one thousand numbers. And 
I put all the stuff in a variable called ‘x’.  
And finally, I want to print the mean of this 
data, which is ‘x.’ So, if I run the code you  
can see the result is 3.493. But remember if you 
delete this line, and if you run the code again,  
you can see the result is going to be 
different. So, if I run the code again  
you can see the result is different. So, as 
you can see as a teacher, I cannot check the  
answers if I don't tell the students Okay set 
the random seed to this number. So, because I  
want to be able to check the answers, I tell the 
students okay set the random seed to this number.