The benefit of using a ContextWrapper is that it lets you “modify behavior without changing the original Context”.  For example, if you have an activity called myActivity then can create a View with a different theme than myActivity:
ContextWrapper is really useful to work around device/version specific problems or to apply one-off customizations to components such as Views that require a context. 
So although this (for Activity) and getBaseContext() both give the activity context, they  (a) do not refer to the same object (this != getBaseContext()) and  (b) calling context through this is slightly less efficient, as the calls go through an extra level of indirection. 
getContext() and getBaseContext()  is most probably same .these are reffered only current activity which is live. 
ContextWrapper is really powerful because it lets you override most functions provided by Context including code to access resources (e.g.  openFileInput(), getString()), interact with other components (e.g. sendBroadcast(), registerReceiver()), requests permissions (e.g. checkCallingOrSelfPermission()) and resolving file system locations (e.g. getFilesDir()).
