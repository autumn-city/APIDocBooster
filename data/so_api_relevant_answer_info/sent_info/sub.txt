Sub-queries are the logically correct way to solve problems of the form, "Get facts from A, conditional on facts from B".
In such instances, it makes more logical sense to stick B in a sub-query than to do a join.
Some optimisers suck lemons when given a join vs a sub-query, and some suck lemons the other way, and this is optimiser-specific, DBMS-version-specific and query-specific.
Subqueries are generally used to return a single row as an atomic value, though they may be used to compare values against multiple rows with the IN keyword.
A simple sub-query could be used as a search condition.
Note that using a normal value operator on the results of a sub-query requires that only one field must be returned.
In most cases JOINs are faster than sub-queries and it is very rare for a sub-query to be faster.
In JOINs RDBMS can create an execution plan that is better for your query and can predict what data should be loaded to be processed and save time, unlike the sub-query where it will run all the queries and load all their data to do the processing.
The good thing in sub-queries is that they are more readable than JOINs: that's why most new SQL people prefer them; it is the easy way; but when it comes to performance, JOINS are better in most cases even though they are not hard to read too.
PostgreSQL can rewrite a subquery to a join or a join to a subquery when it thinks one is faster than the other.
First of all, to compare the two first you should distinguish queries with subqueries to:
a class of subqueries that always have corresponding equivalent query written with joins
a class of subqueries that can not be rewritten using joins
For the first class of queries a good RDBMS will see joins and subqueries as equivalent and will produce same query plans.
Still, sometimes it does not, but this does not mean that joins will always win - I had cases when using subqueries in mysql improved performance.
(For example if there is something preventing mysql planner to correctly estimate the cost and if the planner doesn't see the join-variant and subquery-variant as same then subqueries can outperform the joins by forcing a certain path).
Conclusion is that you should test your queries for both join and subquery variants if you want to be sure which one will perform better.
For the second class the comparison makes no sense as those queries can not be rewritten using joins and in these cases subqueries are natural way to do the required tasks and you should not discriminate against them.
Many Transact-SQL statements that include subqueries can be alternatively formulated as joins.
Other questions can be posed only with subqueries.
In Transact-SQL, there is usually no performance difference between a statement that includes a subquery and a semantically equivalent version that does not.
I say: Creating functions for subqueries eliminate the problem of cluttter and allows you to implement additional logic to subqueries.
So I recommend creating functions for subqueries whenever possible.
These days, many dbs can optimize subqueries and joins.
If there is not much difference in performance, I prefer to use subquery as they are simple and easier to understand.
I was also under the impression that JOIN is always better than a sub-query in MySQL, but EXPLAIN is a better way to make a judgment.
Here is an example where sub queries work better than JOINs.
Here is my query with 3 sub-queries:
Once we changed it to use a sub-query it worked fine.
So I think the join and sub query statements are working fine and it depends on the data and the situation.
Subqueries have ability to calculate aggregation functions on a fly.
1) Using Subqueries:
Taken from the MySQL manual ([13.2.10.11 Rewriting Subqueries as Joins (hyper-link)]):
A LEFT [OUTER] JOIN can be faster than an equivalent subquery because the server might be able to optimize it better—a fact that is not specific to MySQL Server alone.
So subqueries can be slower than LEFT [OUTER] JOIN, but in my opinion their strength is slightly higher readability.
Using a subquery:
It seems that in some cases a sub-query is the safest way to go, besides any performance issues.
But in the case that a table has more than 100,000 records then a subquery is best result.
In the year 2010 I would have joined the author of this questions and would have strongly voted for JOIN, but with much more experience (especially in MySQL) I can state: Yes subqueries can be better.
I've read multiple answers here; some stated subqueries are faster, but it lacked a good explanation.
First of all, let me say the most important: There are different forms of sub-queries
If you use sub-queries, you should be aware of how the DB-Server executes the sub-query.
Especially if the sub-query is evaluated once or for every row!
In some cases a subquery helps optimizing a query, but a newer version of the DB-Server might make the optimization obsolete.
Be aware that a sub-query is executed for every resulting row from foo.
However, if the sub-query has no reference to foo it can be optimized by the DB-server as static content and could be evaluated only once.
If not, your query will become very, very slow on huge datasets because it will execute the sub-query for every row in foo, not just the results like in the select-type.
We combine JOIN with a sub-query.
And here we get the real strength of sub-queries.
You can nest sub-queries in multiple levels.
Sub-queries are no replacement for a JOIN and you should not use them like this (although possible).
In my humble opinion, the correct use of a sub-query is the use as a quick replacement of CREATE TEMPORARY TABLE .... A good sub-query reduces a dataset in a way you cannot accomplish in an ON statement of a JOIN.
If a sub-query has one of the keywords GROUP BY or DISTINCT and is preferably not situated in the select fields or the where statement, then it might improve performance a lot.
I just thinking about the same problem, but I am using subquery in the FROM part.
Second time just for testing, I rewrite to sub-select against the JOIN.
LEFT JOIN runtime: 1.12s
SUB-SELECT runtime: 0.06s
18 times faster the subselect than the join!
The subselect looks terrible but the result ...
The more data tables have, the subqueries are slower.
The less data tables have, the subqueries have equivalent speed as joins.
The subqueries are simpler, easier to understand, and easier to read.
Most of the web and app frameworks and their "ORM"s and "Active record"s generate queries with subqueries, because with subqueries are easier to split responsibility, maintain code, etc.
For smaller web sites or apps subqueries are OK, but for larger web sites and apps you will often have to rewrite generated queries to join queries, especial if a query uses many subqueries in the query.
Some people say "some RDBMS can rewrite a subquery to a join or a join to a subquery when it thinks one is faster than the other.
", but this statement applies to simple cases, surely not for complicated queries with subqueries which actually cause a problems in performance.
Subquery runs the internal queries first and then from the result set again filter out the actual results.
The best strategy is that you should test both the join solution and the subquery solution to get the optimized solution.
The general idea about sub queries vs joins is the path the evaluation of the larger query takes.
In order to perform the larger query, every individual subquery has to be executed first, and then the resultset is stored as a temporary table that the larger query interacts with.
Implementing something like this in Git would be a substantial effort and it would mean that the integrity of the clientside repository could no longer be guaranteed.
You can glue them back together using [Git Submodules (hyper-link)].
If you never plan to interact with the repository from which you cloned, you can do a full git clone and rewrite your repository using git filter-branch --subdirectory-filter.
You will now have files "checked out" for some/dir and another/sub/tree on your file system (with those paths still), and no other paths present.
It's not possible to clone subdirectory only with Git, but below are few workarounds.
Here's a shell script I wrote for the use case of a single subdirectory sparse checkout
I think this command is meant to manage a settings file that says "I only care about these subtrees" so that future commands will only affect those subtrees.
Imagine if [submodules were treated exactly like regular directories (hyper-link)]: just request a tree SHA, and a [DNS-like mechanism resolves your request (hyper-link)], first looking on your [local ~/.git (hyper-link)], then first to closer servers (your enterprise's mirror / cache) and ending up on GitHub.
you then edit the .git/info/sparse-checkout
and add the folder names (one per line) with /* at the end to get subfolders and files
Also, if you want to simply download all sub directories just use
The same holds true if the files are in a subdirectory - put an __init__.py in the subdirectory as well, and then use regular import statements, with dot notation.
if not using a subdirectory:
to import from sub directory the directory should contain
This will help you check if the string contains substring or not
Inside the [] can either be a literal substring, an index, or a regex:
Since nil is functionally the same as false and any substring returned from [] is true you can use the logic as if you use the method .include?
Just make sure you don't confuse an index with a sub string:
How to check whether a string contains a substring in Ruby?
By default du will recursively give you the disk usage of each sub-directory.
To display current directory's files and subdirectories sizes recursively:
To display the same size information but without printing their sub directories recursively (which can be a huge list), just use the --max-depth option:
did not match the sum of disk usage of each sub-directory, when I used
du have another useful option:  -S, --separate-dirs telling du not include size of subdirectories - handy on some occasions.
Example 2 - shows the file sizes and subdirectories in directory:
The result in in bytes taking all sub directories into account.
-R, --recursive
         list subdirectories recursively
Add some JavaScript to prevent the submenu from closing when the parent dropdown is open.
The dropdown-submenu has been removed in Bootstrap 3 RC.
"Submenus just don't have much of a place on the web right now, especially the mobile web.
navbar submenu on hover:
[Navbar submenu dropdown hover (hyper-link)]
[Navbar submenu dropdown hover (right aligned) (hyper-link)]
[Navbar submenu dropdown click (right aligned) (hyper-link)]
[Navbar dropdown hover (no submenu) (hyper-link)]
But i hope Bootstrap add the subs feature back ASAP.
Until today (9 jan 2014) the Bootstrap 3 still not support sub menu dropdown.
I hope this is the way out for anyone who want navigation menu with multilevel sub menu.
update 2015-02-17 Smart menus are now fully support Bootstrap element style for submenu.
With Bootstrap 5, it's now very easy to implement dropdown submenu without using any javascript code thanks to the new autoClose option.
You can either use a .dockerignore file to exclude the subdirectory, or you could COPY all the files then do a RUN rm bla to remove the subdirectory.
If you want to have subdirectories ignored by docker-compose but persistent, you can do the following in docker-compose.yml:
Not particular about this question, but for example, if the source array was double[] and we wanted to take average() of the sub-array:
If you are developing on a linux or a mac box, a workaround would be, to create subfolders  which include symbolic links to your layoutfiles.
But you could although select them by using the sub-folders.
I think the most elegant solution to this problem (given that subfolders are not allowed) is to prepend the file names with the name of the folder you would have placed it inside of.
It's not exactly a sub-folder, but may separte parts of your application.
The trick is to use gradle's ability to [merge multiple resource folders (hyper-link)], and set the res folder as well as the nested subfolders in the sourceSets block.
Notice that the subfolders are declared first.
That, I think, is as close as you can get to having subfolders for the layout folder.
I submitted a patch at [https://android-review.googlesource.com/#/c/157971/ (hyper-link)] to try to help resolve things.
I use [Android File Grouping (hyper-link)] plugin for Android Studio.It doesn't really allows you to create sub-folders, but it can DISPLAY your files and resources AS they are in different folders.
I am able to achieve subfolders by following the [top answer (hyper-link)] to this question.
However, as the project grows bigger, you will have many sub-folders:
So when we input "app/src/main/res/layouts/", it will return all the subfolders' name as an array, which will be exactly the same as:
It's applied to all build type and product flavor and not only can be use for layout, you can also add subfolder for any other resources type such as drawable.
For example, I want to create subfolder named activity for layout, add a string by any name in resDirs variable such as layouts, then the layout xml file should be put in res\layouts\activity\layout\xxx.xml.
If I want to create subfolder named selectors for drawable, add a string by any name in resDirs variable such as drawables, then the drawable xml file should be put in res\drawables\selectors\drawable\xxx.xml.
All subfolder created by you such as activity or selectors are regarded as the same as res folder.
then each subfolder of your new res folder can be something relating to each particular screen or something in your app, and each folder will have their own layout / drawable / values etc keeping things organised and you dont have to update the gradle file manually like some of these other answers require (Just sync your gradle each time you add a new resource folder so it knows about it, and make sure to add the relevant subfolders before adding your xml files).
Step 2: Open the layout folder and create the subfolders directly: layout_1, layout_2 ...
Step 3: open layout_1 create folder layout (note: mandatory name is layout), open layout_2 folder create layout subdirectory (note: mandatory name is layout) ...
Step 4: Copy the xml files into the layout subdirectories in layout_1 and layout_2
In order to create subfolders you should use this menu: New > Folder > Res Folder.
Cannot have subdirectories (easily) but you can have additional resource folders.
The path that is declared as an element of the array is the one that contains the resource types, that is, the resource types are all the subdirectories that a res folder contains normally such as color, drawable, layout, values, etc.
An example would be to use the path "src/flavor/res/values/strings-ES" but observe that the practice hierarchy has to have the subdirectory values:
The framework recognizes resources precisely by type, that is why normally known subdirectories cannot be omitted.
The performance of CTEs and subqueries should, in theory, be the same since both provide the same information to the query optimizer.
Unfortunately, SQL Server does not seem to take advantage of this basic optimization method (you might call this common subquery elimination).
Also, if you have a complicated CTE (subquery) that is used more than once, then storing it in a temporary table will often give a performance boost.
There are certainly cases when you can unravel CTEs or remove subqueries and replace them with a #temp table and reduce duration.
There is no predictable way to know when a query may tip in favor of one approach or another - just know that, in theory, the same semantics for a CTE or a single subquery should execute the exact same.
Personally I rank them CTE, then subquery, with #temp table being a last resort.
CTE is just syntax so in theory it is just a subquery.
mkdir -p will create all subfolders and will not complain when a folder already exists.
All hierarchy of SubjectArea objects will have correct class.
get() method of the service will return a Promise of an array already cast as SubjectArea objects (whole hierarchy)
I always thought sorting on group and sub group is a little bit complicated to understand.
A version that avoids creating a sub-process:
This will create a subshell (which means that variable values will be lost when the while loop exits):
-maxdepth 1 -mindepth 1 -type d :
Only find directories with a maximum recursive depth of 1 (only the subdirectories of $1) and minimum depth of 1 (excludes current folder .)
It will download all files and subfolders in ddd directory
However, unlike ‘-nd’, ‘--cut-dirs’ does not lose with subdirectories—for instance, with ‘-nH --cut-dirs=1’, a beta/ subdirectory will be placed to xemacs/beta, as one would expect.
If you need more information about submodules (or git in general) [ProGit (hyper-link)] is pretty useful.
submodule: drop the top-level requirement
Use the new rev-parse --prefix option to process all paths given to the submodule command, dropping the requirement that it be run from the top-level of the repository.
Since the interpretation of a relative submodule URL depends on whether or not "remote.origin.url" is configured, explicitly block relative URLs in "git submodule add" when not at the top level of the working tree.
This makes 'git rev-parse' behave as if it were invoked from the specified subdirectory of a repository, with the difference that any file paths which it prints are prefixed with the full path from the top of the working tree.
I had a subproject with a few files in it that I had so far just copied around instead of checking into their own git repo.
I created a repo in the subfolder, was able to commit, push, etc just fine.
But in the parent repo the subfolder wasn't treated as a submodule, and its files were still being tracked by the parent repo - no good.
To get out of this mess I had to [tell Git to stop tracking the subfolder (hyper-link)] (without deleting the files):
Then I had to tell it there was a submodule there (which you can't do if anything there is currently being tracked by git):
Ideally, the existing repo is moved out to its own directory, free of any parent git modules, committed and pushed, and then added as a submodule like:
That will clone the git repo in as a submodule - which involves the standard cloning steps, but also several other more obscure config steps that git takes on your behalf to get that submodule to work.
It will be very difficult for them to replicate the structure you have on your machine so long as you have a full .git dir in a subfolder of a dir that contains its own .git dir.
So, move, push, git add submodule, is the cleanest option.
See this as well - [difference between .gitmodules and specifying submodules in .git/config?
DEST is the path to the directory containing your submodules.
Extracting several substrings:
Here is a  regex_subst() function.
REGEXEXTRACT: Extracts matching substrings according to a regular expression.
SUBSTITUTE: Replaces existing text with new text in a string.
I had no luck getting tar to exclude a 5 Gigabyte subdirectory a few levels deep.
(NOTE: Here is the post I originally used that helped me [https://superuser.com/questions/312301/unix-zip-directory-but-excluded-specific-subdirectories-and-everything-within-t (hyper-link)])
Example:A directory with a single subdirectory containing a file of the same name (data.txt)
Applies to the directory where .gitfile is located and all its subdirectories.
Patterns affect the directory and all its subdirectories.
Patterns affect the directory and all its subdirectories.
There are two major differences between Observer/Observable and Publisher/Subscriber patterns:
The Publisher/Subscriber pattern is mostly implemented in an asynchronous way (using message queue).
Whereas, in Publisher/Subscriber, publishers and subscribers don't need to know each other.
As you mentioned correctly, data binding is a generic term and it can be implemented using either Observer/Observable or Publisher/Subscriber method.
In .net, the observable can expose an event and the observer subscribes to that event with an "event handler" shaped hook.
Another name (perhaps with more "broadcast" semantics) of the Observable/Observer pattern, which usually implies a more "dynamic" flavor - observers can subscribe or unsubscribe to notifications and one observable can "shout out" to multiple observers.
In .NET, one can use the standard events for this, since events are a form of MulticastDelegate, and so can support delivery of events to multiple subscribers, and also support unsubscription.
Pub/Sub has a slightly different meaning in certain contexts, usually involving more "anonymity" between event and eventer, which can be facilitated by any number of abstractions, usually involving some "middle man" (such as a message queue) who knows all parties, but the individual parties don't know about each other.
The observer is implicit, usually created by the framework, and subscribes to these notifications via some binding syntax to specifically identify an object and property, and the "event handler" just copies the new value over, potentially triggering any update or refresh logic.
I agree with your conclusion about both patterns, nevertheless, for me, I use Observable when I'm in the same process and I use the Pub/Sub in inter-process scenarios, where all parties only know the common channel but not the parties.
I am a bit amused that all the answers here were trying to explain the subtle difference between Observer and Pub/Sub patterns without giving any concrete examples.
The Observer is a design pattern where an object (known as a subject) maintains a list of objects depending on it (observers), automatically notifying them of any changes to state.
see [this pubsub example (hyper-link)] for details.
and people call this variation as pub/sub.
will do a RECURSIVE (meaning the directory and all it's sub-directories) search for the search_string.
You can specify -R for "recursive", which means the program searches in all subfolders, and their subfolders, and their subfolder's subfolders, etc.
Why not do a recursive search to find all instances in sub directories:
It will recursively check inside subdirectories too.
So you can search in a subset of the files for many directories, just providing the paths at the end.
Does React re-render all components and sub-components every time setState is called?
By default, shouldComponentUpdate always returns true to prevent
  subtle bugs when the state is mutated in place, but if you are careful to
  always treat the state as immutable and to read-only from props and state
  in render() then you can override shouldComponentUpdate with an
  implementation that compares the old props and state to their
  replacements.
There is a well-known instance of this in the Git repository itself, which is collectively known in the Git community as "[the coolest merge ever (hyper-link)]" (after the subject line Linus Torvalds used in the e-mail to the Git mailinglist which describes this merge).
In particular, I guess nowadays one would use a gitk submodule, in that specific case.
Note: Since this was originally written in 2009, git has added the subtree merge mentioned in the answer below.
It results in unmodified history of the subtree being imported into your repo plus one merge commit to move the merged repository to the subdirectory.
Git figures out on its own where the roots are before doing the merge, so you don't need to specify the prefix on subsequent merges.
The downside is that in the merged history the files are unprefixed (not in a subdirectory).
Original source was from [github's "Subtree Merge" help article (hyper-link)].
The subtree was too complicated for me and the other solutions didn't work.
Based [on this article (hyper-link)], using subtree is what worked for me and only applicable history was transferred.
in your source repository split subfolder into a new branch
git subtree split --prefix=<source-path-to-merge> -b subtree-split-result
Clean up by deleting the subtree-split-result branch
git branch -D subtree-split-result
[git-subtree (hyper-link)] is a script designed for exactly this use case of merging multiple repositories into one while preserving history (and/or splitting history of subtrees, though that seems to be irrelevant to this question).
To merge a repository <repo> at revision <rev> as subdirectory <prefix>, use git subtree add as follows:
git-subtree implements the [subtree merge strategy (hyper-link)] in a more user friendly manner.
The downside is that in the merged history the files are unprefixed (not in a subdirectory).
I can suggest another solution (alternative to [git-submodules (hyper-link)]) for your problem - [gil (git links) tool (hyper-link)]
Also it provides a solution to the [git recursive submodules dependency problem (hyper-link)].
More about [git recursive submodules dependency problem (hyper-link)].
An example of merging 2 big repositories, putting one of them into a subdirectory: [https://gist.github.com/x-yuri/9890ab1079cf4357d6f269d073fd9731 (hyper-link)]
Lastly, in: git filter-repo --to-subdirectory-filter a, a is the name you are giving to the root folder for the repo that you will be importing.
Then, in the subsequent service, I rely on the previously committed image, which has all of the data stored at mounted locations.
With a nested sub navigation.
Directive for the sub navigation
template for the sub navigation
Directive for a Sub Area
For subsections it's as easy as leveraging strings in ng-include:
Or you can create an object in case you have links to sub pages all over the place:
Then on my sub pages which I need to have nested frames.
So you write a setup.py to copy (install) the whole app package and subpackages to the target system's python folders, and main.py to target system's script folders.
Is it "package_head.subfolder.module_name" or what?
I do the relative imports as  from ..sub2 import mod2
and then, if I want to run mod1.py then I go to the parent directory of app and run the module using the python -m switch as  python -m app.sub1.mod1.
The sub contains one tag that matches that description.
The second line looks for a package called package.subpackage and imports module from that package.
If you only want to import the particular object attribute1, just do from package.subpackage.module import attribute1 and be done with it.
You need never worry about the long package.subpackage.module once you've imported the name you want from it.
If you do want to have access to the module to access other names later, then you can do from package.subpackage import module and, as you've seen you can then do module.attribute1 and so on as much as you like.
If you don't like typing package.subpackage even twice, you can just manually create a local reference to attribute1:
Example for how a super class method is called from a sub class method
Angular 2 official documentation provides an explanation for when to unsubscribe and when it can be safely ignored.
Notice that we capture the subscription and unsubscribe when the AstronautComponent is destroyed.
If by calling someObservable.subscribe(), you start holding up some resource that must be manually freed-up when the lifecycle of your component is over, then you should call theSubscription.unsubscribe() to prevent memory leak.
and by calling unsubscribe(), you can cancel the request as well as the listeners:
Normally, this is enough evidence to warrant a manual unsubscribe() call.
But according this [WHATWG spec (hyper-link)], the XMLHttpRequest() is subject to garbage collection once it is "done", even if there are event listeners attached to it.
So I guess that's why angular 2 official guide omits unsubscribe() and lets GC clean up the listeners.
As of today, the angular official guide no longer shows unsubscribing from params.
I looked into [src (hyper-link)] again and found that params is a just a [BehaviorSubject (hyper-link)].
Since no event listeners or timers were used, and no global variables were created, it should be safe to omit unsubscribe().
The bottom line to your question is that always call unsubscribe() as a guard against memory leak, unless you are certain that the execution of the observable doesn't create global variables, add event listeners, set timers, or do anything else that results in memory leaks.
If the observable has written some clean up logic into its unsubscribe(), which is usually the function that is returned by the constructor, then you have good reason to seriously consider calling unsubscribe().
In a recent episode of [Adventures in Angular (hyper-link)] Ben Lesh and Ward Bell discuss the issues around how/when to unsubscribe in a component.
Ward mentions right now there's an awful takeUntil dance that takes a lot of machinery and Shai Reznik mentions Angular handles some of the subscriptions like http and routing.
In response Ben mentions that there are discussions right now to allow Observables to hook into the Angular component lifecycle events and Ward suggests an Observable of lifecycle events that a component could subscribe to as a way of knowing when to complete Observables maintained as component internal state.
Lightweight npm package that exposes an Observable operator that takes a component instance (this) as a parameter and automatically unsubscribes during ngOnDestroy.
Custom directive *ngSubscribe that works like async pipe but creates an embedded view in your template so you can refer to the 'unwrapped' value throughout your template.
[https://netbasal.com/diy-subscription-handling-directive-in-angular-c8f6e762697f (hyper-link)]
You can then | async the Observable from the Feature component into an Input of the Presentational component, which means no subscriptions are necessary anywhere.
The solution we should all use going forward is to add a private ngUnsubscribe = new Subject(); field to all components that have .subscribe() calls to Observables within their class code.
We then call this.ngUnsubscribe.next(); this.ngUnsubscribe.complete(); in our ngOnDestroy() methods.
The secret sauce (as noted already by [@metamaker (hyper-link)]) is to call takeUntil(this.ngUnsubscribe) before each of our .subscribe() calls which will guarantee all subscriptions will be cleaned up when the component is destroyed.
The Angular tutorial, the Routing chapter now states the following: "The Router manages the observables it provides and localizes the subscriptions.
The subscriptions are cleaned up when the component is destroyed, protecting against memory leaks, so we don't need to unsubscribe from the route params Observable."
In this [video from NgEurope (hyper-link)] Rob Wormald also says you do not need to unsubscribe from Router Observables.
If you manually call subscribe (not using async pipe), then unsubscribe from infinite Observables.
if its a single-value-sequence (like an http request)
  the manual cleanup is unnecessary (assuming you subscribe in the controller manually)
if its an infinite sequence, you should unsubscribe which the async pipe does for you
Also he mentions in this [youtube video (hyper-link)] on Observables that they clean up after themselves... in the context of Observables that complete (like Promises, which always complete because they are always producing 1 value and ending - we never worried about unsubscribing from Promises to make sure they clean up xhr event listeners, right?
In most cases we will not need to explicitly call the unsubscribe method unless we want to cancel early or our Observable has a longer lifespan than our subscription.
The default behavior of Observable operators is to dispose of the subscription as soon as .complete() or .error() messages are published.
When does the phrase our Observable has a longer lifespan than our subscription apply?
It applies when a subscription is created inside a component which is destroyed before (or not 'long' before) the Observable completes.
I read this as meaning if we subscribe to an http request or an observable that emits 10 values and our component is destroyed before that http request returns or the 10 values have been emitted, we are still ok!
If we look at [this example (hyper-link)] from the same Rangle guide we can see that the Subscription to route.params does require an unsubscribe() because we don't know when those params will stop changing (emitting new values).
The component could be destroyed by navigating away in which case the route params will likely still be changing (they could technically change until the app ends) and the resources allocated in subscription would still be allocated because there hasn't been a completion.
You don't need to have bunch of subscriptions and unsubscribe manually.
Use [Subject (hyper-link)] and [takeUntil (hyper-link)] combo to handle subscriptions like a boss:
I like the last two answers, but I experienced an issue if the the subclass referenced "this" in ngOnDestroy.
The Subscription class has an interesting feature:
A Subscription has one important method, unsubscribe, that takes no argument and just disposes the resource held by the subscription.
Additionally, subscriptions may be grouped together through the add() method, which will attach a child Subscription to the current Subscription.
When a Subscription is unsubscribed, all its children (and its grandchildren) will be unsubscribed as well.
You can create an aggregate Subscription object that groups all your subscriptions.
You do this by creating an empty Subscription and adding subscriptions to it using its add() method.
When your component is destroyed, you only need to unsubscribe the aggregate subscription.
The official Edit #3 answer (and variations) works well, but the thing that gets me is the 'muddying' of the business logic around the observable subscription.
File subscribeAndGuard.ts is used to create a new Observable extension to wrap .subscribe() and within it to wrap ngOnDestroy().
Usage is the same as .subscribe(), except for an additional first parameter referencing the component.
Here is a component with two subscriptions, one with the wrapper and one without.
An additional note:
Re Edit 3 - The 'Official' Solution, this can be simplified by using takeWhile() instead of takeUntil() before subscriptions, and a simple boolean rather than another Observable in ngOnDestroy.
You usually need to unsubscribe when the components get destroyed, but Angular is going to handle it more and more as we go, for example in new minor version of Angular4, they have this section for routing unsubscribe:
Do you need to unsubscribe?
As described in the
  ActivatedRoute: the one-stop-shop for route information section of the
  Routing & Navigation page, the Router manages the observables it
  provides and localizes the subscriptions.
The subscriptions are
  cleaned up when the component is destroyed, protecting against memory
  leaks, so you don't need to unsubscribe from the route paramMap
  Observable.
Following the answer by [@seangwright (hyper-link)], I've written an abstract class that handles "infinite" observables' subscriptions in components:
To use it, just extend it in your angular component and call the subscribe() method as follows:
Find here an additional reference by Ben Lesh: [RxJS: Don’t Unsubscribe (hyper-link)].
Always unsubscribe, when new values in the subscribed stream is no more required or don't matter, it will result in way less number of triggers and increase in performance in a few cases.
Cases such as components where the subscribed data/event no more exists or a new subscription to an all new stream is required (refresh, etc.)
is a good example for unsubscription.
Some of the best practices regarding observables unsubscriptions inside Angular components:
When subscribing to an observable in a component, you almost always arrange to unsubscribe when the component is destroyed.
Feel free to unsubscribe anyway.
(1) [Should I unsubscribe from Angular 2 Http Observables?
(2) [Is it necessary to unsubscribe from observables created by Http methods?
(3) [RxJS: Don’t Unsubscribe (hyper-link)]
(4) [The easiest way to unsubscribe from Observables in Angular (hyper-link)]
(5) [Documentation for RxJS Unsubscribing (hyper-link)]
(6) [Unsubscribing in a service is kind of pointless since there is no chance of memory leaks (hyper-link)]
(7) [Do we need to unsubscribe from observable that completes/errors-out?
I collected some of the best practices regarding observables unsubscriptions inside Angular components to share with you:
http observable unsubscription is conditional and we should consider the effects of the 'subscribe callback' being run after the component is destroyed on a case by case basis.
We know that angular unsubscribes and cleans the http observable itself [(1) (hyper-link)], [(2) (hyper-link)].
The subscribe() handler will still be called even if the component is closed and destroyed.
No need to unsubscribe from observables that complete or error.
Use AsyncPipe as much as possible because it automatically unsubscribes from the observable on component destruction.
Unsubscribe from the ActivatedRoute observables like route.params if they are subscribed inside a nested (Added inside tpl with the component selector) or dynamic component as they may be subscribed many times as long as the parent/host component exists.
No need to unsubscribe from them in other scenarios as mentioned in the quote above from [Routing & Navigation (hyper-link)] docs.
Unsubscribe from global observables shared between components that are exposed through an Angular service for example as they may be subscribed multiple times as long as the component is initialized.
No need to unsubscribe from internal observables of an application scoped service since this service never get's destroyed, unless your entire application get's destroyed, there is no real reason to unsubscribe from it and there is no chance of memory leaks.
In this case, if we subscribe to any observable inside this provider, we should consider unsubscribing from it using the [OnDestroy (hyper-link)] lifecycle hook which will be called when the service is destroyed, according to the docs.
Use an abstract technique to avoid any code mess that may be resulted from unsubscriptions.
You can manage your subscriptions with takeUntil [(3) (hyper-link)] or you can use this npm [package (hyper-link)] mentioned at [(4) The easiest way to unsubscribe from Observables in Angular (hyper-link)].
Always unsubscribe from FormGroup observables like form.valueChanges and form.statusChanges
Always unsubscribe from observables of Renderer2 service like renderer2.listen
Unsubscribe from every observable else as a memory-leak guard step until Angular Docs explicitly tells us which observables are unnecessary to be unsubscribed (Check issue: [(5) Documentation for RxJS Unsubscribing (Open) (hyper-link)]).
A nice final tip: If you don't know if an observable is being automatically unsubscribed/completed or not, add a complete callback to subscribe(...) and check if it gets called when the component is destroyed.
In case unsubscribe is needed the following operator for observable pipe method can be used
in SPA application at ngOnDestroy function (angular lifeCycle) For each subscribe you need to unsubscribe it.
For handling subscription I use a "Unsubscriber" class.
Here is the Unsubscriber Class.
You can use latest [Subscription (hyper-link)] class to unsubscribe for the Observable with not so messy code.
We can do this with normal variable but it will be override the last subscription on every new subscribe so avoid that, and this approach is very much useful when you are dealing with more number of Obseravables, and type of Obeservables like [BehavoiurSubject (hyper-link)] and [Subject (hyper-link)]
Subscription
A Subscription has one important method, unsubscribe, that takes no argument and just disposes the resource held by the subscription.
you can directly push the subscription to Subscription Array
[code snippet]
using add() of Subscription
[code snippet]
A Subscription can hold child subscriptions and safely unsubscribe them all.
if any child subscriptions are null).
The SubSink package, an easy and consistent solution for unsubscribing
As nobody else has mentioned it, I want to recommend the Subsink package created by Ward Bell: [https://github.com/wardbell/subsink#readme (hyper-link)].
For observables that complete directly after emitting the result like [AsyncSubject (hyper-link)] or for example observables from http requests and such you don't need to unsubscribe.
It doesn't hurt to to call unsubscribe() for those, but if the observable is closed the unsubscribe method [will simply not do anything (hyper-link)]:
When you have long-lived observables that emit several values over time (like for example a BehaviorSubject or a ReplaySubject) you need to unsubscribe to prevent memory leaks.
First will complete directly after emitting the first value (or when passing a function argument the first value that satisfies your predicate) so there is no need to unsubscribe.
I am not saying it is good practice but you could then always add the first pipe just to make sure you won't need to manually unsubscribe.
This can help you to explore the type of observable and whether it is necessary to unsubscribe from it or not.
Using unsubscribe at ngDestroy lifecycle of Angular Component
A Subscription essentially just has an unsubscribe() function to release resources or cancel Observable executions.
In Angular, we have to unsubscribe from the Observable when the component is being destroyed.
Luckily, Angular has a ngOnDestroy hook that is called before a component is destroyed, this enables devs to provide the cleanup crew here to avoid hanging subscriptions, open portals, and what nots that may come in the future to bite us in the back
We added ngOnDestroy to our AppCompoennt and called unsubscribe method on the this.subscription Observable
If there are multiple subscriptions:
The class can now simply use this.subscribe() or takeUntil(this.destroyed) without any additional boilerplate code.
Here is my take on this issue, keeping my life simple I have chosen the manual way of unsubscribing the subscription when the component get destroyed.
For this I have created a class named Subscriptor, which mostly contains static members namely:
A private variable subscriptions - which holds all the supplied subscriptions
A subscription setter - which push every new subscription to subscriptions array
An unsubscribe method - which unsubscribe every subscriptions the subscriptions array contains if defined, and empty out the subscriptions array
subscriptor.ts
When you want to subscribe any service, simply put the subscription to the Subscriptor's setter.
When you want to unsubscribe any service, simply call the unsubscribe method of Subscriptor.
It's always recommended to make an unsubscription from your observable subscriptions for performance reason to avoid memory leaks , and there different ways of doing that ,
By the way I read most of the answers, and I did"t find someone who is talking about the async pipe, it's recommended Rxjs pattern with Angular apps because its provides automatically subscription and subscription when leaving the component who will be destroyed :
As a special case, x/... matches x as well as x's subdirectories.
For example, net/... expands to net and packages in its subdirectories.
If you keep your _test.go files in a subfolder, the 'go test ./...' command will be able to pick them up.
For those of you who like to keep their tests in a sub-folder, say test, then running
in the subsequent report for non-test folders.
Please be mindful that using test sub-folders will prevent coverage report computation.
Allows iteration over the files in given directory (and optionally its subdirectories).
Use false if you do not want files from sub directories.
Do mvn install in parent project (A), with this all the sub-modules will be installed in your computer's Maven repository, if there are no changes you just need to compile/package the sub-module (B) and Maven will take the already packaged and installed dependencies just right.
You do not need to create sub directory.
It's simple, you can define this in the subschema :
You can create sub-documents without schema and avoid _id.
Just add _id: false to your subdocument declaration.
This will prevent the creation of an _id field in your subdoc.
Additionally, if you use an object literal syntax for specifying a sub-schema, you may also just add _id: false to supress it.
I'm using mongoose 4.6.3 and all I had to do was add _id: false in the schema, no need to make a subschema.
If you want to use a predefined schema (with _id) as subdocument (without _id), you can do as follow in theory :
Now I can include subSourceSchema in my parent document without _id.
This should effectively reload the entire tree of modules and submodules you give it.
IPython offers [dreload() (hyper-link)] to recursively reload all submodules.
Any subobjects will not be reloaded by this, I believe you have to use IPython's deepreload for that.
I hate to add yet another answer to a long thread, but I found a solution that enables recursive reloading of submodules on [%run() (hyper-link)] that others might find useful (I have anyway)
del the submodule you wish to reload on run from sys.modules in iPython:
Now your script will recursively reload this submodule:
No, the resources mechanism doesn't support subfolders in the drawable directory, so yes - you need to keep that hierarchy flat.
From my own experiments it seems that having a subfolder with any items in it, within the res/drawable folder, will cause the resource compiler to fail -- preventing the R.java file from being generated correctly.
Yes - it does suck :) However you can use the assets folder and have sub directories in there and load images that way.
I use res/layout-v1, res/layout-v2 etc to hold multiple sub projects in the same apk.
The workaround I'm using (and the one Android itself seems to favor) is to essentially substitute an underscore for a forward slash, so your structure would look something like this:
I've wrote an eclipse plugin which allows to create virtual subfolder by separating the file name with two underscores __.
Subdirectories are not allowed, the resource must contain only [a-z0-9_.
It is possible to have multiple drawable folders by having an extra folder parallel to 'res' with a subdirectory 'drawable' and then add following to gradle:
As solution i may suggest you to add_subdirectory(A) and add_subdirectory(B) at the top level and set vars you want to export from A with PARENT_SCOPE.
You can use the two-argument form of the add_subdirectory command to add any directory you want as a "sub" directory:
The second argument of the two-argument form specifies where to put the binary directory for the added subdirectory.
You just have to be careful that there's not also another real sub-directory of B that is also named "A" and that is also add_subdirectory'd... Because if you do, then that would be an error, as CMake cannot have two different source directories mapping into the same build directory.
The solution is we shall not simply nest subparser with another subparser, but we can add subparser following with a parser following another subparser.
An alternative loop would give each subparser its own namespace.
This is an extension to argparse with explicit support for subcommands.
The solution provide by @Vikas fails for subcommand-specific optional arguments, but the approach is valid.
parse_args aborts as soon as a argument unknown to the current subparser is encountered, parse_known_args returns them as a second value in the returned tuple.
Note that in this basic example, all global options are added to the first options Namespace only, not to the subsequent Namespaces.
It is not possible to use the same optional argument for different subcommands, like myprog.py command_a --foo=bar command_b --foo=bar.
It is not possible to use any variable length positional arguments with subcommands (nargs='?'
Here is a simple example that shows the limitations of argparse -even when using a single subcommand-:
This will raise the error: argument subparser_name: invalid choice: '42' (choose from 'command_a', 'command_b').
It also assumes that any subcommand will consume all remaining arguments.
This limitation of argparse also prevents a proper implementation of multi-command subparsers.
Given these limitation, it may be an options to simply revert to a single multiple-choice argument instead of subcommands:
Built a full Python 2/3 example with [subparsers (hyper-link)], [parse_known_args (hyper-link)] and [parse_args (hyper-link)] ([running on IDEone (hyper-link)]):
Use [Directory.GetDirectories (hyper-link)] to get the subdirectories of the directory specified by "your_directory_path".
By default, that only returns subdirectories one level deep.
This traverses a directory and all its subdirectories recursively.
If it hits a subdirectory that it cannot access, something that would've thrown an UnauthorizedAccessException, it catches the exception and just returns an empty list for that inaccessible directory.
Then it continues on to the next subdirectory.
The decorator pattern is an
  alternative to subclassing.
Subclassing adds behavior at compile
  time, and the change affects all
  instances of the original class;
  decorating can provide new behavior at
  runtime for individual objects.
Then in someplace you want a scrolled text view, so you subclass TextView and create ScrolledTextView class.
So you subclass again and create BorderedTextView.
None of the previous two subclasses have both capabilities.
Basically, by using the decorator pattern you can add any number of additional responsibility to object at RUNTIME which you can not achieve by subclassing without potentially damaging your code structure or adding many duplicate combinations for subclasses.
The [GoF Design Patterns book (hyper-link)] identifies two major advantages of using Decorators over subclassing:
From  my point of view, preventing subclass explosion alone is quite compelling.
If you have a TextWindow to which you want to add horizontal scrolling, vertical scrolling, and borders all independently and optionally, using subclasses, you'd have to define subclasses for HorizontalScrollingTextWindow, VerticalScrollingTextWindow, HorizontalAndVerticalScrollingTextWindow, BorderedTextWindow, HorizontalScrollingBorderedTextWindow, VerticalScrollingBorderedTextWindow, HorizontalAndVerticaScrollingBorderedTextWindow, and more if you care about the order of scrolling and bordering.
Subclassing can lead to issues with the [Liskov substitution principle (hyper-link)].
I cannot do the same with a subclass because I will always get the whole hierarchy back to the base class.
This is why you would want to use the decorator pattern instead of subclassing.
Decoration is an alternative way of sub classing to extend the functionality of existing classes.
Here is some scenario where we should use sub classing or decorator.
1) Sub classing mainly used in the case of extend the functionality of similar 
   group of classes which wants to retain the old functionality as well as new 
   in the sub classes
   and all the instances of the sub classes share the same functionality.
Cloud Pub/Sub is that Cloud Pub/Sub is fully managed for you.
In addition to Google Pub/Sub being managed by Google and Kafka being open source, the other difference is that Google Pub/Sub is a message queue (e.g.
You can't "re-read" or "replay" messages with Pubsub.
With Google Pub/Sub, once a message is read out of a subscription and ACKed, it's gone.
In order to have more copies of a message to be read by different readers, you "fan-out" the topic by creating "subscriptions" for that topic, where each subscription will have an entire copy of everything that goes into the topic.
But this also increases cost because Google charges Pub/Sub usage by the amount of data read out of it.
You can add a new consumer (aka subscriber), and have it start consuming from the front of the topic any time you want.
Amazon AWS Kinesis is a managed version of Kafka whereas I think of Google Pubsub as a managed version of Rabbit MQ.
Amazon SNS with SQS is also similar to Google Pubsub (SNS provides the fanout and SQS provides the queueing).
Google provides Pubsub and there are some fully managed Kafka versions out there that you can configure on the [cloud and On-prem (hyper-link)].
Cloud vs On-prem I think this is a real difference between them, because Pubsub is only offered as part of the GCP ecosystem whereas Apache Kafka you can use as a both Cloud service and On-prem service (doing the cluster configuration by yourself)
Pubsub works using acknowledging the message, if your code doesn't acknowledge the message before the deadline, the message is sent again, that way you can avoid duplicated messages or another way to avoid is using Cloud Dataflow PubsubIO.
Retention policy Both Kafka and Pubsub have options to configure the maximum retention time, by default, I think is 7 days.
Consumers Group vs Subscriptions Be careful how you read messages in both systems.
Pubsub use subscriptions, you create a subscription and then you start reading messages from that subscription.
Once a message is read and acknowledge, the message for that subscription is gone.
If the solution must be in GCP, obviously use Google Cloud Pubsub.
If the solution should require process data in Streaming way but also needs to support Batch processing (eventually), it is a good idea to use Cloud Dataflow + Pubsub.
The point which make the huge difference is that Pubsub is a cloud service attached to GCP whereas Apache Kafka can be used in both Cloud and On-prem.
Calling BaseTest:testCommon Calling
  SubTest1:testSub1 Calling
  BaseTest:testCommon Calling
  SubTest2:testSub2
For example, the following will only load the original poster's SubTest1 and SubTest2 Test Cases, ignoring Base:
If you drop out of your procedure by falling to Exit Sub, you may risk having a yucky build-up of instantiated objects that are just sitting around in your program's memory.
So you'll need a certificate for *.sub2.domain.com
If you meant that you have sub1.domain.com and sub2.domain.com, then it should work.
A wildcard SSL certificate for *.example.net will match sub.example.net but not sub.sub.example.net.
If you need a wildcard certificate that contains *.domain.com sites and also work with sub1.sub2.domain.com or another domain like *.domain2.com, you can solve that with a single wildcard certificate with what is called a subject alternative name (SAN) extension for each of the other sub sub domains.
For example, *.domain.com, sub1.sub2.domain.com, and *.domain2.com would have a Common Name of *.domain.com then you would attach a subject alternative name of both *.domain2.com and *.sub2.domain.com.
Go open google and view its SSL certificate, you will see it works for *.google.com, *.youtube.com, *.gmail.com, and a bunch more where they are listed as subject alternative names.
Just an addition to slice method, if the subhash keys which you want to separate from original hash is going to be dynamic you can do like,
If you find render becoming unwieldy and complex, you have too few subviews.
Perhaps you'd actually like a placeholder element (e.g., an empty div or ul) that you can then [replaceWith (hyper-link)] a new (DOM) element that holds the appropriate subviews.
Remember, subviews can have subviews, and they should if it's appropriate.
That way, you have a rather tree-like structure, which is quite nice: each subview adds all its subviews, in order, before the parent view adds another, and so on.
If you're interested in checking out third-party libraries, one that I have looked into (but haven't actually had any time to play with yet) is [Backbone.LayoutManager (hyper-link)], which seems to have a healthier method of adding subviews.
The order in which you append the sub elements matters
Check out this mixin for creating and rendering subviews:
[https://github.com/rotundasoftware/backbone.subviews (hyper-link)]
Note that the case of a collection view (where each model in the collection is represented with one subview) is a different topic.
When a parent's .remove is called, the .remove of nested children from the lowest order up should be called (all the way from sub-sub-sub views)
However, usually there is no downside to using templates and simply destroying and rebuilding the entire view and it's subviews on each and every render call, as it didn't even occur to the questioner to do anything otherwise.
You could also inject the rendered subviews as variables into the main template as variables.
first render the subviews and convert them to html like this:

var subview1 = $(subview1.render.el).html();
var subview2 = $(subview2.render.el).html();
(that way you could also dynamically string concatenate the views like subview1 + subview2 when used in loops) and then pass it to the master template which looks like this:

... some header stuff ...
<%= sub1 %>
<%= sub2 %>
... some footer stuff ...
this.$el.html(_.template(MasterTemplate, { sub1: subview1, sub2: subview2 } ));
Regarding the Events within the subviews: They will be most likely have to be connected in the parent (masterView) with this approach not within the subviews.
instanceof can be used to determine whether an element is a subtree or a terminal node.
It also provides a loose interpretation of some ideas from functional programming and lets you map/filter/prune/search the entire tree or subtrees.
This is how you search for element or tag in CSS subclass and I believe that it works for multilevel situation as well:
A more general solution is to add a method set_default_subparser() (taken from the [ruamel.std.argparse (hyper-link)] package) and call that method just before parse_args():
Allowing to chose a new subparser for default, instead of one of the existing ones.
The first version of the code allows setting one of the previously-defined subparsers as a default one.
The following modification allows adding a new default subparser, which could then be used to specifically process the case when no subparser was selected by user (different lines marked in the code)
However, it is now possible to differentiate between and separately handle calling one of the provided subparsers, and calling the default subparser when no argument was provided:
Maybe what you're looking for is the dest argument of add_subparsers:
Here's a nicer way of adding a set_default_subparser method:
In python 2.7, you can override the error behaviour in a subclass (a shame there isn't a nicer way to differentiate the error):
You can duplicate the default action of a specific subparser on the main parser, effectively making it the default.
Does not work with add_subparsers(required=True), which is why the if args.func is down there.
In my case I found it easiest to explicitly provide the subcommand name to parse_args() when argv was empty.
The re.sub function takes a regular expresion and replace all the matches in the string with the second parameter.
You won't risk ending up with two bars: {somefield: 2, name: 'qux'} subdocuments in your document if two applications run the same queries at the same time.
This feature, if used with some other techniques, makes possible to achieve an upsert subdocument operation with a single query.
It's a very verbose query, but I believe if you know that you won't have too many records on the subCollection, it's viable.
(hyper-link)]", I just found [this GitHub thread (hyper-link)] which could be more adapted for merging a whole subdirectory, based on [git read-tree (hyper-link)]:
This reads the tree for only the required source subdirectory i.e.
Note that the target subdirectory name should also be cookbooks/cassandra, or you would see:
Let's say I want the subdirectory in the repository called newFeature which only exists in the 'source' branch.
Note that this isn't a 'real merge', so you won't have the commit information about newFeature in the destination branch, just the modifications to the files in that subdirectory.
In a Sub or Set procedure, the Return statement is equivalent to an Exit Sub or Exit Property statement, and expression must not be supplied.
However, since  ’return’ is meant for pushing something back to the caller, so strictly speaking, ‘Exit Sub’ is more suitable for using in a Sub.
However, from the code readability point of view, "Exit Sub" would be clearer since the "Return" indicates that something some value is being used as an output (which is not the case with Sub-routines).
I tend to prefer Return over Exit Sub.
Because once in a while you change from Sub to Function.
In this case Exit Sub could be converted to Exit Function, but this assumes that there was a previous assignment to the function name (alike VB 6), which most probably didn't happen.
First of all, Procedures comes with sub, we should know that we are working on specific procedures that don't return a specific value with the ability of passing some specific parameters or even without passing any parameter.
In short Sub Doesn't return value and we call it directly "Print HelloWorld()" , whereas functions do such as:
I just realized I did the shopt -s extglob example wrong so my way may not have be necessary, but I typically do use zsh instead of bash, and it didn't have the command shopt -s extglob (though I'm sure there is an alternative), so this approach should work across shells (subbing in your shell's mkdir and rmdir if it's especially foreign)
Sometimes, however, there is a reason to move files to a subdirectory throughout the history of a project.
The files then appear in the p/q subdirectory throughout the history.
if moving files in subdirectories: remember to escape the / character in the paths With a \ to make the sed command work as expected.
When a subscriber (consumer) dies, your list will continue to grow until the client returns.
If you want a pub/sub system where subscribers won't lose messages when they die, consider using [Redis Streams (hyper-link)] instead of Redis Pub/sub.
Redis Streams have their own architecture and pros/cons to Redis Pub/sub.
With Redis Streams, a subscriber can issue the command:
The problem that I encountered was the result of an Unload Me line in the new_tab sub.
This also has the advantage that the check procedure now can return different type of errors that your calling sub can use to provide further assistance to the user.
could I just query the db with category_slugs[-1] and if the obtained category has no children, we know its a leaf category, otherwise, we know it has subcategories and we show them?
Named subroutines are only created once.
You need to return an anonymous subroutine reference something like this:
because named subroutines live in the symbol table hence they are global.
you will need to return a reference to a subroutine.
You could create a reference to an anonymous sub:
If you want to archive a subdirectory and trim subdirectory path this command will be useful:
To call a sub inside another sub you only need to do:
As the which runs first problem it's for you to decide, when you want to run a sub you can go to the macro list select the one you want to run and run it, you can also give it a key shortcut, therefore you will only have to press those keys to run it.
Although, on secondary subs, I usually do it as Private sub CalculateA(...) cause this way it does not appear in the macro list and it's easier to work
The first one is answered here: [Calling a Sub in VBA (hyper-link)]
To the second one, protip: there is no main subroutine in VBA.
VBA subs are "macros" - you can run them by hitting Alt+F8 or by adding a button to your worksheet and calling up the sub you want from the automatically generated "ButtonX_Click" sub.
VBA subs are no macros.
A VBA sub can be a macro, but it is not a must.
from these actions a code is generated and stored in a sub.
Subs, or bette call it "sub routines", are started by dedicated events.
The problem was in query not being fully updated when coloring sub is executed, as @Mark S. mentioned.
running coloring Sub.
Do you mean that you want the "sub sub menus" hidden, and displaying on mouseover, like the sub menus?
With a complex class Myclass being a subclass of collections.UserDict.
To select a subset of it, i.e keeping all its container properties, it's convenient to define a method, e.g.
named sub like so:
It is then used as Myclass.sub([key1, key2 ...])
This is how could look the sub which populates the collection ... you are iterating through row or that could be items (products, parts etc)
Class is a Class, 
Sub and Function are methods, 
private is an access modifier
Private is a modifier than gives the scope of the class, sub, or function.
A sub and a function are both subroutines, or sections of code that can be called in the program.
The difference between them is that a function has a return value and a sub does not.
A class is a group of codes that can include subs, functions, and other stuff.
Sub is like a function but it doesnt returns any values it just executes a proccess
If you want to set mouseleave() function for submenu layout, just change this line,
Now outside of your specific example, I think that resource-subresource relationships are more appropriate when it comes to use rather than ownership (and that's why you're struggling with the redundancy of identifying a company for a user that implicitly identifies a company).
What I mean by this is that users is actually a sub-resource of a company resource, because the use is to define the relationship between a company and its employees - another way of saying that is: you have to define a company before you can start hiring employees.
Your rule to decide if a resource should be modeled as sub resource is valid.
Composition via sub resources, other associations via URL links.
What relationships are sub-resources meant and not meant to model?
Sub resources are well suited for compositions but more generally spoken to model that a resource cannot exist without the parent resource and always belongs to one parent resource.
Your rule when a resource could not exist without another, it should be represented as its sub-resource is a good guidance for this decision.
If a resource cannot exist without another, it should be represented as its sub-resource; however, treat the operation as a search engine query.
if a subresource is uniquely identifiable without its owning entity, it is no subresource and should have its own namespace (i.e.
If you go by this rule, you shouldn't have any trouble distinguishing between compositions (/companies/{company}/users/{user}) and associations (/users/{user}), because if your subresource doesn't have a natural business key, that identifies it in a global context, you can be very certain it really is a depending subresource (or you must first create a business key to make it globally identifiable).
place your sub submenu (contained in another ul tag) within the list tag and style as follows:
Every submenu ul has to be inside  of an li element of the higher level menu, so this code...
I think you just need to call the run_Excel_macro and then End your Public Sub instead of exiting.
You can Call another sub from a sub like so:
Use Application.Run "yourSub" to run another sub, and use Application.Run "yourModule.YourSub" if the Sub is in another module
And maybe the Error[400] could it be because this missing End If
About the Application.Run, you can use it (call the sub) even if te SUB is defined as Private.
You can send program control back to the caller using Exit Sub
Search engines will treat subdomains more like separate domains, so it many cases using sub-folders is the way to go, so that you are not spreading yourself to thin.
Here's an article from SEOMoz explaining it in more detail:
[http://www.seomoz.org/blog/understanding-root-domains-subdomains-vs-subfolders-microsites (hyper-link)]
It depends on what content you want to create subfolder/-domains for.
Then you should definitely use sub-folder as this belongs to the same domain.
It's much better for the link juice to spread if you use sub folders.
As for the PageRank, it's better to use subfolders.
Subdomains is considered as a new site.
Subfolders is not, and will get better rankings if your original site is powerful.
You can use both subdomains and subfolders if you like, but don't forget to use the canonical-tag to avoid duplicate content.
[http://www.searchmarketingstandard.com/when-to-use-subdomains-vs-subfolders (hyper-link)]
[http://www.searchenginejournal.com/subdomains-or-subfolders-which-are-better-for-seo/6849/ (hyper-link)]
Personally, I go off the logic that a subdomain is a different application / site owned by the same company.
A subfolder is part of the same application / site.
a personal site might have a gallery or blog subdomain which keeps the content distinctly seperate from the main site - then it probably makes sense for a subdomain, otherwise, I'd stick with folders.
So there is a reason for a subdomain in this instance where it actively speeds up (though, on a fast site, minimally) the page load time.
Technically, a subdomain is a different server.
The company I work for has a domain with several subdomains where every subdomain is located on a different (virtual or real) computer/server.
From a developer's perspective, a subdomain would force everything within the subdomain to be a different application while in a subfolder, the subfolder and subsubfolders could be part of the application in the root folder.
When I create web applications, those web applications are often tested first on a test server in a subfolder.
Once they make it through the tests, they are moved to the root of their own subdomain.
When two subfolders are related to one another, they're often part of the same application, thus it would be better to keep them in their own subfolder so they can share cookies and sessions more easily.
Use sub folders if you need SSL- then you only need 1 basic certificate for the root
If your site can be easily partitioned by the subdomains and each subdomain can operate independently then do it!
You can then easily scale out your application by deploying different servers(or clusters) for each subdomain.
Technically, you can do this with folders, but it requires a web proxy farm, whereas subdomains can be done with simple DNS entries.
its also depends on your needs whether u want separate login system for sub domains, because it wont be possible is you are using sub-folder.
Sub-folder share same session.
For sub domains you have to set shared cookie for all domains.
You don't need to create all the subdirectories!
The create directory method creates all directories and sub directories for you.
Here is an example with a DirectoryInfo object that will create the directory and all subdirectories:
git log -p DIR is very useful, if you need the full diff of all changed files in a specific subdirectory.
You were on the right track actually when you tried converting Sub1 to a function.
Obviously, you would need to change the name of Sub1 to something else that reflects what the function does.
Or turn Sub1 into a function that returns a reference to the worksheet:
wget -r -l1 --no-parent http://www.domain.com/subdirectory/
on a site that included multiple files of the form name.subname.subname2.etc.htm or .html.
To stop propagation when those sub-sub-menu anchors are clicked:
Pass subSubReport as a param to supReport.
You literally have one sub inside another.
But you have attention, because the children contain all sub-components and you must filter just sub-page components.
Below the sub menu, I need to add if the current page has sub pages.
If you use schemas: [CUSTOM_ELEMENTS_SCHEMA]in TestBed the component under test will not load sub components.
As requested, I'm posting another answer about how to mock sub components with input/output:
app-task is a sub component with the [task]  input and the (click)  output.
We might not get any errors at either build or runtime, but we won't be able to test much other than the existence of the sub component.
So how can we mock sub components?
First we'll define a mock directive for our sub component (same selector):
Notice that because the generation of sub component of the fixture is happening asynchronously after its creation, we activate its autoDetectChanges  feature.
An easy way (and certainly not the best way, since it relies on the ordering) is to add a integer column to the table specifying how many "sub"-prefixes the category has.
To get this kind of category/sub-category output you can try:
Make the Sub sens(LastLine) a public Sub.
Public Sub sens(LastLine)
I have a variable that I created a long time ago (so I forgot about it) which was named the same way as my sub.
Then the find command recurses the sub-directories:
Per the [official documentation on file globbing (hyper-link)], to watch for changes for files of a certain file type in the directory path and its subdirectories, you'll want:
If I remember correctly CI 1.7 did not even support sub directories and was included recently and I think they still consider it a bug.
If you only have a few sub directories you can also put rules in your URI routing
So now about how to get subarrays
You can access subsections of each array just like any other Ruby array.
Next, I would suggest creating a temp string and updating it whenever a new sub is entered.
So whenever an error is handled, the string temp holds the value of the sub it occurred in.
You need to handle errors in your "child" methods, and have them "re-throw" the error (using Err.Raise in the error handler subroutine) so the caller gets to see it - when re-throwing, specify the method's name as the "source".
Is there anyway I can avoid having to do something like below for each of Sub1-Sub15?
Note the use of GetBlobDirectoryReference and GetSubDirectory methods and the CloudBlobDirectory type instead of CloudBlobContainer.
First of all I tried to upload via tool but It doesn't allow to hierarchical directory upload because you don't need : [How to create sub directory in a blob container (hyper-link)]
If you are tying to upload files from Azure portal:
To create a sub folder in container, while uploading a file you can go to Advanced options and select upload to a folder, which will create a new folder in the container and upload the file into that.
You can use e.preventDefault() to overwrite the default behavior by binding it with the click event on the sub menu item.
How do I pass the fields from sub report 1 to sub report 2?
Define the var in the main report as global and update in the subreport1 and access them in subreport2.
If possible, I recommend moving the sub-report data out of the sub-report into the main report, and putting a cross-tab into the report footer.
Currently, CHECK expressions cannot contain subqueries nor refer to
  variables other than columns of the current row.
There are good reasons for this restriction, but if you like to juggle flaming torches while riding a unicycle through heavy traffic, you can subvert the restriction using functions.
There is no error handling in AnotherSub and therefore SourceSub's error handling kicks in:
As a result, SourceSub does not complete as you can see that the line MsgBox "Source completed" is not executed.
To answer your second question, if you uncomment the error handling from AnotherSub (On Error Goto Err:) AnotherSub will handle the error and as a result, SourceSub will run to completion indicated by the fact the message box showing source completed is reached.
This means that the Exit Function or Exit Sub does not make a difference as long as you handle the error in the relevant procedure.
So in this example, if the sub is invoked from some call site...
No Errors
After calling TestMinorSub the sub continues on its way until it exits via exit sub.
There is an error in TestMinorSub AND TestMinorSub has an error handler.
This 
function can either swallow the error or raise it back to Testing sub using Err.Raise.
There is an error in TestMinorSub and TestMinorSub doesn't have an error handler.
If there is no error the sub will exit before "Exit Sub"
Actually, what you do with normal variables is pretty much exactly what you do with subs.
You don't need to bind, actually, because subs are not containerized and &-sigiled variables don't have special handling for assignment like @ and %-sigiled variables.
@user0721090601 already gave the answer for subs.
[http://www.searchenginejournal.com/subdomains-or-subfolders-which-are-better-for-seo/6849/ (hyper-link)]
I'd use subfolders, for sure.
Most security certificates (used for https://) do NOT include subdomains, or are specific to the subdomain.
If you plan on using SSL, or if you want to keep the site open to SSL, it's VERY expensive to purchase as many certificates as subdomains.
Go with subdomains.
Subdomains give you more power.
Subdomains also allow you to segment cookies.
Cookies can apply to a subdomain meaning the others won't see it.
Of you can set the cookie for the parent domain and all the subdomains will see it.
A downside is that each subdomain may require its own SSL certificate.
You may also run into cross-site scripting issues between subdomains.
does the client have a wildcard DNS record, and if not, what is the effort and turnaround time to get the proper DNS changes made for a subdomain?
how will users access the pages in the subdomain/folder?
Based on my specific answers to these questions, I went the subfolder route.
In the sub MVE_NIM_Subs.MVE_Main modify your code to set a public boolean variable to be true if the msgbox appears.
After this sub ends, execution will go back to executing code inside sub Sensitivities.
Make MVE_NIM_Subs.MVE_Main a function that returns Bool.
When you display message box in MVE_NIM_Subs.MVE_Main set return value to True.
Then in calling sub you can write:
If returnValue Then GoTo Jump
Keep MVE_NIM_Subs.MVE_Main as sub and declare some global Bool variable, that can be used within two subs.
In outer sub set it to False before calling MVE_NIM_Subs.MVE_Main and in MVE_NIM_Subs.MVE_Main set it to True whenever you show the message box.
Then you can use it in outer sub to decide whether to jump or not, like in first option :)
Explanation: With the first indentation the line with Fn::ImportValue is considered as an input for !Sub, with the second indentation it becomes the value for ARN: defined the line above it.
**/ - matches any count of subdirectories (including current)
example: data/**/*.json record will ignore data/1.json, data/subfolder/2.json, data/../../3.json
This pattern work for me for data subfolder ignoring only png and jpg files:
First the product should have only one 'categoryID' column, no subs.
If so, could you put all sub modules definitions to 'thing/build.sbt' and try it out?
All your sub-menus have an absolute position.
- and you have the same "sub-menu" style on both a sub-menu and a sub-sub-menu.
If you want your sub--sub-menus to behave differently from a sub-menu, then I suggest you write a sub-sub-menu style.
You also need to update all the styles inside the sub-menut hat have absolute positioning.
In VBA (which your tag states) you need to change Sub into Function which will be:
EDITED: Added a streamlined code example with comments to this answer on how these sub menus can be accomplished.
Then it checks if it has sub categories on the current id, if found then call the function again but now with parent_id of the current row.
This didn't take long to write, and frankly I would have cleaned it up more if it was my code (this is begging for a sub class or two).
In this case you're probably best off grabbing calling .findOne() to get the document contain the sub-document that you want to update, pushing the subdocument to the array, then calling .save() on the document.
Really, if you have sub-documents with embedded sub-documents, you should consider creating a collection for the sub documents, and possibly the documents embedded in those sub-documents.
Sorry to bother you mr tsturzl
I got solution from [Mongodb update deeply nested subdocument (hyper-link)]
overriding is where you change the behavior of the base class via a function with the same name in a subclass.
You could have a method in a class
    that is overridden in one or
    more subclasses.
It is only definable for the subclasses Male and Female.
Overloaded methods with different signature to its base class are available in the subclass.
That is to day, the base class' method is no longer available in the subclass when being called from outside the subclass object, obviously.
In Java to achieve polymorphism a super class reference variable can hold the sub class object.
Subclasses of a class can define their own unique behaviors and yet share some of the same functionality of the parent class.
IF you had a abstract base class that defined a method with no implementation, and you defined that method in the sub class, is that still overridding?
Base class provides no implementation and sub-class has to override complete method - (abstract)
Base class provides default implementation and sub-class can change the behaviour
Sub-class adds extension to base class implementation by calling super.methodName() as first statement
Base class defines structure of the algorithm (Template method) and sub-class will override a part of algorithm
where the subselect returns exactly one column of data.
I just tested using a combination of SUBSTRING and IN and it is an effective solution for this kind of problem.
Lexical named subroutines are still (very) experimental in Perl.
The easy approach is to use an anonymous subroutine instead, which will circumvent the problems of losing shared variables while still not being experimental:
The problem of nested named subroutines not keeping access to shared variables has already been linked to at [Perl: "Variable will not stay shared" (hyper-link)] .
The syntax you are using is valid since 5.18, but you need to add use feature qw( lexical_subs ); to enable it.
Just add an Exit Sub where you want A() to end
In the first sub report, on the no data event add the field the sub-sub report needs and set it to a "null" value.
The report will work as normal if there is data and work if there is no data in the sub report.
You can then grab a (different) user object in the sub-thread using the ID.
/S Displays files in specified directory and all subdirectories.
An addition to the answer: when you do not want to list the folders, only the files in the subfolders, use /A-D switch like this:
List all first-level subdirectories and files
It has to be Call DisplayCustomError(...) because its a sub, only functions are called withouth anything in front.
When receiving variables in a Sub you always want to define them in the Sub which is receiving them as to make correct use of the variable in the proceeding code.
Have a look [here (hyper-link)] for a question I asked about only passing certain variables to a Sub.
This might help when you only want to pass one or two variables to a "receiving" Sub
[code snippet]
[Python/NumPy first occurrence of subarray (hyper-link)]
Add the class to the ul in the submenu that you want to keep open.
(example)
On the "About" page, go to into the code, find the menu, find the "About" link which is a  item, and below that is the  submenu for that.
 item, and below that is the  submenu for that.
The submenu will slide up again too if you click another menu item.
Firstly, you can't put a sub inside another sub, that's just not how it works unfortunately.
The easiest, and recommended, method is to just write the other sub anyway but only call it if a certain condition is met.
Another way is to simply exit the sub if your condition isn't met, although this is used more for error handling than conditional execution:
This seems to be an issue with how you are storing your sub documents.
If you are able to store this sub-document correctly, then you should be good to use the object in the way you expect!
You can just keep going adding sub menus using add_cascade:
Step 0: on [python (hyper-link)] side, set the ZeroMQ SUB to subscribe first to any topic, using ""-as the string for the explicit setup for the topic filter.
To do this you have to replace your setsockopt with something like socket.setsockopt_string(zmq.SUBSCRIBE, "")
So, I set it to 3 just to sent few messages, but the PUB had not enough time to connect to the SUB so that the SUB see messages.
add position:relative; to .subMenu1 to make it act as a reference for the position absolute of its children.
As you're now using the descendant selector, all future descending 'levels' will be targeted individually in your  $(this).siblings('.sub-menu').slideToggle('slow'); statement, making it very easily extendable.
[CSS] Remove .subs1 and use .subs instead : then, we can threat all our sub(sub(sub(...)))menus the same way
[CSS] Remove .subs1 CSS
[CSS] Remove #nav ul { overflow: hidden; }, to avoid our submenus to be hidden (as they are on the left of their parent)
[CSS] Change #nav li:hover ul.subs {} selector into #nav li:hover > ul.subs {}, to show only the first submenu when hovering an element
[CSS] Change left: 114px into left: 112px to avoid getting a space between the element and its submenu (if you hover this space, you're not anymore hovering the element, then your submenu is hidden)
sub(regexp, replacement, target)
Here sub(/\.$/, "") we didn't mention the target so it takes $0 ie the whole line.
In your example, the sub doesn't substitute anything because there is no .
in your sub command, awk finds the dot at the end of the line and replaces with "" which is the empty string (i.e.
So your 1st command - {sub(/.$/, ""); print $5}, it prints the 5th column which is hostname.domain.com.
Your other command - {sub(/.$/, ""); print $1} deletes the character at the very end of the line and then just prints the first column 10.0.0.172.in-addr.arpa
For remove blank space and text of another field i use sub() for change caracters plus tr to remove the caracters
This sample allow you to read all subfolders of a given source.
You can't do it if Run() is a Sub.
Then call it in your main sub like this:
Sub Unitario(strFirstCol as String,strSecondCol as String, strThirdCol as String, strFourthCol as String)
And then call the sub like
whenever i have to add arguments to a often used sub, or function, i just add the arguments with ´optionaĺ.
This way i won ´t have to recode every call to the sub.
From the /sub folder:
If your .htaccess is in a subdirectory, you don't have to write the full path in a RewriteRule.
So use this in your .htaccess in sub-directory:
If what you really interested in are files rather than to enter the sub-directories themselves, the method that you can use is Directory.GetFiles, something like this:
the return is string[] which contains all filepaths in the given folderpath including those which are in the sub-directories.
If you really need to enter the sub-directory however, you can create recursive calls and in the call, you can check if the directory has further (deeper) folder by using DirectoryInfo.GetDirectories()
One idea: as you redirect them across the boundary, give them a one-time pass token and then tell the receiving sub-domain to expect them (this user, from this IP, with this token).
Once the auth cookie is correctly set to the parent domain, then all sub-domains should be able to read it.
Each sub-domain will receive the parent domain's cookies on request, so authentication over each is possible since you will have a shared authentication cookie to work with.
As a side note, I found that after using jro's method which worked well +1, the FormsAuthenication.SignOut() method didn't work when called from a subdomain other than www/.
MachineKey should be same in all web.config (main domain and sub domain(s))
Thus, changing the subset will change the initial DataFrame.
Good to mention, when you subset the original dataframe, it is safe to add the copy as well in order to avoid the SettingWithCopyWarning
You may have to create a thin Handler subclass to manage a list of Runnables as they are posted/executed...or look at another paradigm for passing your messages between each Activity
Edit: was wrong about subfolders.
This code works just fine on 1.5 (for a file sample.txt placed under sub folder in assets):
The fact that it is in a subfolder could be a red herring.
I had a similar issue: Changed the subfolder name from "mp3" to "mpthree" and the files were found.
I have created two modules for category and sub-category.
For sub-category, I have used the update function by getting the id of the category(It depends how you do but it is important to get id to update).
This rule first checks if you're on the subdomain, if you are, then nothing happens.
If you are not on sub.domain.com/sub then it will redirect you to it.
I feel like you're trying to redirect from sub.domain.com/sub to sub.domain.com ?
As various answers have pointed out, modern day load-balancers can balance load without having to resort to using different sub-domains for each machine.
However, there is still one benefit of dividing your site into various sub-domains: maximize browser connections.
By loading different assets from different subdomain, you get around the connection limit, speeding up page-load.
You dont need nested subqueries.
and as per your code, its like joining in table1 (fav) with second table but it is not available within the subquery.
it ct table is not within the subquery this would give invalid identifier error.
as per your given code, you trying to fetch the fav.cust_lname, fav.cust_time which are the values from a subquery by joining with cust_id from outside customer table.
the main thing is you have used in-table query with join to external table which is not available in the in-table query, either switch to subquery or have external table introduced in in-table query
i used the OUTER APPLY to pass the value inside the deepest sub query thanks for all the suggestions.
In Shopify, 'sub categories' are handled with tags.
[Here you have (hyper-link)] the Shopify docs for creating sub categories.
Alexandre is right, in Shopify you use tags to create subcategories.
This Shopify tutorial gives a detailed explanation of how to set this up: [Creating subcategories of products (hyper-link)]
Sub-Resource Locators aren't supposed to have HTTP method annotations
Their main purpose is simply to forward request to the sub-resource class, not GET/POST/etc anything.
When Jersey sees that HTTP method annotation, it no longer gets treated as a sub-resource locator.
It should have thrown a compile error on the If z = 10 Then Exit Sub since it is out of scope.
So if I start this Sub from another Thread rather than from a Main Thread, for every single loop it has to go to main thread and to take Paramater from TextBox and to go back in Thread to Loop further.
Parentheses are optional only if the subroutine has been predeclared.
This is documented in [perlsub (hyper-link)].
Perl needs to know at compile time whether the bareword is a subroutine name or a string literal.
If you use parentheses, Perl will guess that it's a subroutine name.
using [subs (hyper-link)]).
If b isn't a subroutine, you shouldn't put it in the symbol table.
Use use subs or predeclare a blank subroutine.
It does not scan the file for subroutines, and then go back and compile the rest.
In Perl, the sub NAME syntax for declaring a subroutine is equivalent to the following:
This means that the sub NAME syntax has a compile time effect.
If anything in that block changes the rule set (such as adding a subroutine to the current namespace), those new rules will be in effect for the remainder of the parse.
So in order for the first example to not be a syntax error, one of the preceding subroutine declarations must be seen first.
That said, you will be hard pressed to find a language that is more flexible in the ways it lets you call subroutines.
In my own code, if I need to call a subroutine before it has been declared, I usually use name(...), but if that subroutine has a prototype, I will call it as &name(...) (and you will get a warning "subroutine called too early to check prototype" if you don't call it this way).
You could also use a globally scoped variable, which would allow the sub to run without directly supplying a value:
Set up your sub something like this:
change it from a Sub to a Function, and then check the return value.
I think that you could try to do exclude the build sub directories with the !
200>/var/lock/mylockfile is, in this context, information about how the subshell should be configured (how its redirection is supposed to be set up).
A subshell is similar in this respect -- it's just a compound command, and like any other command, it can have redirections specified either at its beginning or its end.
Now about subshells : when writing
Thus if you want to create the file before the subshell, a solution is
You can put a class="current" on the sub-menu on each page and use the not():
However, not all sub-sub-lists have an equal chance of getting picked through this method.
In this case, each sub-sub list in the first sub-list have a low chance of getting picked since we must first pick the first sub list for i and then pick the right sub-sub list from it for j.
By contrast, l0 has a 50% chance of getting picked, since all we must do is pick the second sub-list for i, at which point the only option is to pick l0 for j.
Your question edit somewhat changes things, since you really need to pick M unique sub-sub-lists.
Note that with this approach, each sub-sub list does have an equal chance of getting picked.
which contains indices for each sub-sub list in a flat list:
To keep track of the indices, you can either (a) randomly choose indices, and use them to retrieve the sub-sublists; or (b) fit the indices into your list using enumerate.
Since you want sampling without replacement (i.e., M distinct sub-sub-lists), use random.sample instead of M calls to random.choice.
To choose among sublists with equal probability, you must first "flatten" the list.
Its a minor typo, the sub() function along with the other functions in jq takes arguments separated by ; and not , which is an operator in the context of jq.
The error is likely because the runtime wasn't able to match the your call to to the actual signature of the sub() function.
Look how the submodules are declaring in the following link : [http://caml.inria.fr/pub/docs/oreilly-book/html/book-ora131.html (hyper-link)]
Yes, and if all the classes you need to do this for are logically subclasses of an existing abstract base class, then add an abstract method to the base class...
An abstract class - Would work but the
  base class has some useful helper
  functions that get used by some of the
  sub classe
Note that if you replace public with protected, the marked method will be only visible to base classes and subclasses.
An interface - If applied to just the
  base class then the sub classes don't
  have to implement the function only
  the base class does.
If the base class is abstract, you can mark methods that belong to the interface as abstract, and force the implementation in the subclasses.
This provides subclasses with a "default" implementation of the interface (or part of it), and also lets you inherit from something else and still implement the interface, or if you want to implement the interface but not inherit the base class implementation.
Create a new array of the length of only first sub array from original array.
To target the first .sub-sub-menu you can use:
Move your sub-menu into the LI, apply position:relative to the LI and use position:absolute to position the sub-menu (UL UL).
If you want to get every .txt file under my_path (recursively including subdirs):
It will also give you a list of all nested subfolders at basically no cost.
You can also choose to return either full paths or just the names for the files by changing f.path to f.name (do not change it for subfolders!
Function returns two lists: subfolders, files.
for various methods to get all files with a specific file extension inside all subfolders and the main folder.
16596 files in 439 (partially nested) subfolders.
fast_scandir was written by myself and will also return a list of subfolders.
Each tuple set of (root, subFolder, files) is for a specific root the way you have it setup.
OP misunderstood/mislabeled the subFolder variable, as it is actually all the sub folders in "root".
You can use the "recursive" setting within glob module to search through subdirectories
The second line would return all files within subdirectories for that folder location (Note, you need the '**/*' string at the end of your folder string to do this.)
If you specifically wanted to find text files deep within your subdirectories, you can use
After all I have used ->where('subdomain', '(.
you should set hover on "li a" element or define a class for sub-menu li element:
It's a little longer than what you have, but it handles all you should need it too handle as far as menus and submenus, provided you maintain those name-scapes.
The problem with your code is that it only applies "display: block" on the sub_menu when you're hovering the mainmenu.
And since sub_menu is not even a part of the mainmenus, the function won't happen even if you hover on it.
Just like what MiniRagnarok suggested, having the sub menus as child divs would be the best way to do this.
You can add a generic class to the main menu like "menu" and put a sub menu inside it with the class sub_menu.
YOu can make the sub_menu appear using this styles:
You should also adjust the sub menu a bit to the top since the gap is a problem.
But if you really need the gap, you can put the sub_menu inside another div and have apply the styles above to that div instead of .sub_menu.
In this particular case, remote origin has a branch named dev/sub (regardless of whether you have it or not, the important thing is whether the remote has it).
In order to create, on origin, a branch named dev/sub/master, you must first delete the branch named dev/sub on origin:
Generally, you might want to git fetch origin first, capturing their dev/sub as your origin/dev/sub.
You can then make a local branch named dev/renamed-sub pointing to the same commit, create dev/renamed-sub on the remote, delete the remote dev/sub, and then create dev/sub/master on the remote.)
If you can log in on the remote (the system that origin is hosted on), you can go into the repository over there and simply rename the local dev/sub branch.
The reason I was seeing this error was because (using the OP's branch names) I was trying to create a branch dev/sub but someone else had created a branch called Dev and as we all know, windows has a case insensitive file system.
So when windows tried to pull down dev/sub it was first trying to create the folder dev, but it couldn't because Dev already existed.
Rename dev/sub to dev/sub/something, then you can create branch dev/sub/master.
and third one is using css positions to adjust submenus position.like this
I couldn't reproduce your situation but I can show you how to implement SubSub state machine.
It describes about sub state machine.
[http://redboltz.wikidot.com/sub-machine-state (hyper-link)]
To implement SubSub state machine, just apply sub machine implementation twice.
Here is a code that contains SubSub state machine:
If you really think you have a need for repositories within repositories then use submodules.
There are times when basic submodules are not enough and your repos too broad, then you should probably look at -- GitSlave!
Then, to build some sort of master project that might use files from each repository (ie, it depends on the other repositories) then you use a submodule.
A repository being a submodule of another repository means that it depends on that submodule.
Dependency-links between submodules is probably a bad idea if the API is not stable, but if the API is stable so changes in one won't directly impact the other (ie, no code changes necessary), then two top-level submodules can depend upon each other.
Now, I've been talking about submodules the whole time, but an alternative exists called "subtree" if you want to check that out to see what you prefer.
Also there exists the subtree strategy (ProGit chapter linked to in a comment)
and then access the classes in the sub namespaces like
If you want to run a single command to install npm packages in nested subfolders, you can run a script via npm and main package.json in your root directory.
The script will visit every subdirectory and run npm install.
The following script examines all subfolders (recursively) as long as they have package.json and runs npm install in each of them.
I prefer using post-install, if you know the names of the nested subdir.
Add a package.json to a subfolder
Install this subfolder as reference-link in the main package.json:
npm install --save path/to/my/subfolder
Use Case 1: If you want be able to run npm commands from within each subdirectory (where each package.json is), you will need to use postinstall.
If you don't need this or don't want npm-run-all as a dependency, check out demisx's answer (using subshells in postinstall).
Use Case 2: If you will be running all npm commands from the root directory (and, for example, won't be using npm scripts in subdirectories), you could simply install each subdirectory like you would any dependecy:
In the latter case, don't be surprised that you don't find any node_modules or package-lock.json file in the sub-directories - all packages will be installed in the root node_modules, which is why you won't be able to run your npm commands (that require dependencies) from any of your subdirectories.
Per @Scott's answer, the install|postinstall script is the simplest way as long as sub-directory names are known.
This is how I run it for multiple sub dirs.
For example, pretend we have api/, web/ and shared/ sub-projects in a monorepo root:
Consider packages and sub-packages as folders and sub-folders containing init.py file with other python files.
sub-modules the simple python files inside the sub-package.
It would probably be more productive to outright detach the subforms from their controls when not displayed.
Assuming code is being executed from the master form and frmValueChain10c is the name of a subform control as well as the subform it refers to:
And similarly for other subforms whenever the master form's tab control changes tabs or the master form closes.
Because your main() method is a member of Sub, that class needs to be loaded for your program to run.
But here, i did not make any of these to Sub class.
Your code doesn't, but in order for that main to run, Sub has to be loaded.
The java tool has to load Sub to call Sub.main.
java triggers load of Sub
JVM has to load SuperClass in order to load Sub
So we see their static initializers run, in order (SuperClass, then Sub):
[code snippet]
If C is a class, the initialization of one of its subclasses.
That second-to-last bullet point covers SuperClass, and the last bullet point covers Sub.
In calling main, all the static initialisers are called, first in the super class, then the sub class.
you may also notice that the base class is loaded before the subclass.
For me what worked was to add 127.0.0.1    subdomain.localhost to my host file.
Not sure why that was necessary as I could reach the subdomain from chrome.
So, if you modify your /etc/hosts to
127.0.0.1 localhost
127.0.0.1 subdomain.localhost
And add the sub domain to hosts file
[ (hyper-link)]
I know it does not directly answer why the op's sub-domain was not working but it might help out someone.
In my case it was a misconfigured subnet.
Only one of the 2 subnets in the ELB worked.
Git Submodule:
A submodule in a git repository is like a sub-directory which is really a separate git repository in its own right.
Git Subtree:
Git subtree allows you to insert any repository as a sub-directory of another one.the sub-directory would become permanent part of the super project
Git Subtree and submodule:
A subtree merge permanently integrates the contents and history of the subtree into the parent repository at the subtree of the merge.
A submodule is simply a reference to a specific commit in the submodule.
A history  of changes to referenced commit are kept in the parent module, but no contents or history of the submodule are tracked in the parent module.
Configure Git submodule:
You want to pull the jquery repo into your project as a submodule.
Submodules are really, really easy to reference and use.
Assuming you already have MyWebApp set up as a repo, from terminal issue these commands:

cd MyWebApp
git submodule add git://github.com/jquery/jquery.git externals/jquery
This will create a directory named externals/jquery and link it to the github jquery repository.
Now we just need to init the submodule and clone the code to it:
git submodule update --init --recursive
You should now have all the latest code cloned into the submodule.
If the jquery repo changes and you want to pull the latest code down, just issue the submodule update command again.
Firstly we are targetting all subnav elements excluding currently clicked and force to close it, then make a toggle on current elements.
Some future version of JPA could be extended to include more levels of subgraphs, but as it stands today it does not.
[Feel free to submit your request/suggestion there (hyper-link)].
If you're asking how to automatically look in subdirectories of views when you call erb :report, I'm not sure how to do that, and I don't think you'd want to (what happens if two views in different dirs have the same name?
One important thing to remember is that you always have to reference templates with symbols, even if they’re in a subdirectory (in this case, use: :'subdir/template' or 'subdir/template'.to_sym).
In the other hand if you have a wildcard *    IN    A    192.0.2.1 to map all subdomains to your primary domain ip.
You can't have sub queries inside check constraints.
Change Private Sub Workbook_open() to Private Sub Workbook_Open()
Instead of putting all of the Subs into one Private Sub, use them to Call each other.
Add another ul inside the <li><a href="#" Title="Sub Product 1">Sub Product 1</a></li> and add as many li as you want then style it with id #menuwrapper ul ul ul ul or you can style like this #menuwrapper ul:nth-child(3) and I think it will work.
As for the CSS, the original code goes about showing the hidden sub levels in an inefficient way.
Rather that using #menuwrapper ul li ul li ul li ul ... blah blah blah for every single submenu, just use one selector for every li to unhide ONLY is direct child ul using >.
This one block will work on every menu item for any number of submenus.
You can emulate an asynchronous call in VBA by creating a trigger in the client application which will then execute the required subroutine.
My goal is to modify the status_code field in the document of the
  sub collection
You need to use the [$ (hyper-link)] positional operator to update the sub document that matches the query.
If the goal is to have one Sub that can be called from different UserForms to initialize the UserForm's Controls, you can give the UserForm itself as a parameter.
An answer to, "...but I can't get it so that I can go over to the 2nd sub level without it dissapearing":-
I assume this means you can't move the mouse cursor over to the second submenu.
Actually you can - provided you move the cursor absolutely horizontally so as to stay on the item you were hovering on in the first submenu.
But the moment you wander upwards or downwards during the mouse move (as your users would probably do) you are moving off the option you were hovering on so the second submenu disappears!
Since you have an array within an array, there isn't any easy way to reference the nested subarray unless you know the position in the array you want to update.
This is useful when index is not known and document should have sub-documents having same key like "input" in post [Update an element in sub of sub array in mongodb (hyper-link)]
The easy way to do this is to store an array of your sub-views in the parent view.
Adding an additional field to each $comment with the [relationship count (hyper-link)] (it should be something like sub_comments_count)
Not elegant, but if you don't use your method overlappingly you can also use global variables, defined by the Public statement at the beginning of your code, before the Subs.
You have to be cautious though, once you change a public value, it will be held throughout your code in all Subs and Functions.
I will make a function to add and subtract 2 values say 5,6
Once I have the ArrayList returned in my main sub, I simply use ArrayList.Item(i).ToString where i is the index of the value I want to return from the ArrayList
SubCategory Model :
SubSubCategory [You can change model name as suits you best.]
If the grandparent page ID isn't null, it's a sub-sub page.
If it is, but the parent page ID isn't null, it's a sub-page.
If I'm understanding your question correctly, then if parent_id = pg_id for a given row, then that row is a parent to itself, and is not a 'sub page' or a 'sub-sub page'.
But this is a static example i mean it works for 2 cases : sub page and sub sub page but for n cases you need a different aproach
Just declare OpenFile outside of sub
Identical subqueries are normally only performed once.
A substring LIKE search is - for sure - not performant.
You can define a CTE using the sub-query once and use it in the SQL statement by referencing more than once.
Go has no concept of sub-directories nor sub-packages.
And then enable it for submodules:
Since this is inherited by submodules, you have to put this in submodules that you do want to deploy:
I added a condition: if the woocommerce_product_subcategories() method output any categories, it will withold outputting posts (products).
I've put the following in my .dockerignore file for every sub-directories I want to recursively exclude.
To redirect subdomain to a subfolder, You probably need to put the following right after the "RewriteEngine On" line :
I wasn't sure whether you wanted the sub-sub menus to open down or to the side.
Nest the sub-sub items the same way you did the sub-items.
Because inheritance breaks encapsulation, subclasses that implement equals() and hashCode() must, necessarily, account for the peculiarities of their superclasses.
I've had success encoding calls to the parent class's equals() and hashCode() methods from the subclass's methods.
Generally speaking implementing equals across subclasses is hard to keep symmetric and transitive.
Consider a superclass that checks for field x and y, and subclass checks for x, y and z.
So a Subclass == Superclass == Subclass  where z is different between the first instance of Subclass and the second, violating the transitive part of the contract.
In the above example, if SubClass or Superclass does an instanceof check it would break symmetry.
So the upshot is that a subclass can certainly take into account super.equals() but should also do its own getClass() check to avoid the above issues and then check for equals on its own fields in addition.
If this is the case then you need to compare the fields from the parent class when you override this method in the sub-class.
If your sub-class adds attributes to the parent class and the parent class isn't abstract and overrides equals you're going to get in to trouble.
A subclass & superclass will not have equal classes.
also checked it if I have 3rd level sub-menus
Create a model that has references to [itself (hyper-link)] for a sub-category (or a sub-sub-category, etc):
the has_many defines a subcategories association of the model type Category.
To find all sub-categories of any given category use:
It shows the name of the selected category (or Main Category) and all of its sub-categories (in a nice table).
It links to all sub-categories, showing a similar layout, but for the sub-category.
In the end it adds a 'new sub-category' link and a 'back' link.
Statements that include subqueries usually take one of these formats:
WHERE expression [NOT] IN (subquery)
WHERE expression comparison_operator [ANY | ALL] (subquery)
WHERE [NOT] EXISTS (subquery)
[Subquery Fundamentals (hyper-link)] (SQL Server 2008 Books Online, January 2009)
You can use subqueries in SELECT and WHERE clauses like this:
You've gotten some good anwsers, but try to see if you can change your logic such that the sub-query takes place in the from clause, so that it is only run once instead of once for each row returned by the main query.
Sub-queries really suck the performance out of a system.
Passing them as arguments is great, if the sequence of calls to the subs in question makes that feasible.
If you literally need a variable that is visible to different subs in the same class (code-behind page in ASP.Net), what you are looking for is probably a private member variable.
Declare it outside of any sub or function with the access modifier Private, and all the subs in the class will be able to access it.
My VB is a little rusty but as you've written it, strEmail looks like it should have class-level visibility, including inside of submitbtn (someone correct me if I'm wrong).
Have you set break-points in Page_Load, readDB and submitbtn to see the state of strEmail in each?
make sure that your rewrite rules that usually rewrite all non-asset URLs to your index file also stop rewriting any requests to the sub application.
make sure that all asset requests (such as linking to the CSS and JS from your index file) are prefixed with the sub application directory name.
make sure that all your routes in the sub application are not prefixed with the sub application directory name.
For your second problem, when your menu shrinks in size, your submenu links goes underneath the main menu links, and instead of your mouse hovering over submenu, it hovers over the main links stacked up underneath.
Also, watch out for whitespace and subversion keywords (i.e., “$Id$” and others).
I wanted to access a sub-document and all I can access right out of the collection object is an entity of type App, no matter what kind of query I write.
What I needed to do is locate the specific sub-document in the single App document I found.
Note that in order to be consistent, the term sub-resources should be worded subresources (in the original spec.
Even if there is no formal definition of subresources in the HTML5 specification, the term is used later in a way such that you can understand the intended meaning.
A resource's critical subresources are those that the resource needs to have available to be correctly processed.
To answer your question a subresource is everything that has to be fetched after the html has been parsed like scripts, stylesheets, images, videos, ....
You can also define your arrays outside subs:
How should I set my paths for my sub resources?
Get rid of the @Path on the Sub-resource classes.
With sub-resource classes, you don't need the @Path.
It will be ignored, as far as the sub-resource path is concerned.
What is a better way to do sub resource within sub resource?
Is it common to do sub-resource within sub-resource?
Optionally you could prefix your other subs with a Private modifier so they don't appear in the macros window (ALT+F8 in spreadsheet view) and you only have the Main listed there.
Alternatively, you could have the other 3 step-subs take dummy Optional Parameters to hide them from the Macro dialog box.
XSUB is usually paired with XPUB to create a separate proxy, this allows subscription messages as well as data to be routed between many publisher and subscribers.
If you want to use XSUB you will need to send a subscribe message (first byte 0x1 followed by filter) to the XSUB socket.
Just to make sure the code is working I would suggest switching XSUB to SUB and call the subscribe API with an empty "" filter.
Also make sure the subscriber is connected to the publisher before you send the message.
In A, it's very intuitive, that when you DELETE a company, you also deleting all it's sub resources - departments and employees.
A have an advantage here, becuase it's very clear - when deleting a resouce, you delete all it's sub resources.
So this might sound a bit mad, but there is no such thing as a 'subresource' in HTTP/REST.
sub.subscribe('topic') adds a filter to your subscriber socket so that you only receive messages starting with the string topic.
sub.subscribe('') removes any existing filter so your subscriber gets all messages sent by the publisher.
In your code using sub.subscribe('pub') would yield messages on the subscriber side.
The [pub/sub example (hyper-link)] in the zeromq.node GitHub is a good place to look to understand how subscriptions work.
I’ ve got some key points  about  subcollections that you need to be aware of when modeling your database.
1 – Subcollections give you a more structured database.
For instance, if you have an array of orders in your customer document, it might be a good idea to create a subcollection of orders to each customer because you cannot foresee how many orders a customer will have.
Therefore, when you create many subcollections instead of using arrays in the documents, you will need to perform more read, writes and deletes, thus increasing your bill.
The documentation mainly talks about arrays vs sub-collections.
My conclusion is that there are no clear advantages of using a sub-collection over a top-level collection.
Sub collections had some clear technical limitations before, but I think those are removed with the recent introduction of [collection group queries (hyper-link)].
Sub collection:
You can get to the parent via the sub collection document ref.
Using sub collections you need to make sure to first delete all sub collection documents before you delete the parent document.
Having the parent id directly in each (sub) document might make it easier to process query results, depending on the application.
Querying all people with the family 'Smith' from the people top-level collections really is not any slower than asking for all the people in the 'Smith' family sub-collection.
There are some trade-offs between top-level collections and sub-collections to be aware of.
Depending on the specific queries you intend to use you may need to create composite indexes to query top-level collections or collection group indexes to query sub-collections.
These trade-offs are discussed in detail near the bottom of the [Understanding Collection Group Queries (hyper-link)] blog post and in [Maps, Arrays and Subcollections, Oh My!
Probably your Sub loadData is in a Sheet Module.
A better solution is to move the Sub into a regular Module.
The called sub-procedures are coded as Public in Module1 of the same Workbook.
The global WS object is used in each command button sub-procedure to ensure that my display focus ends up back on the same worksheet as the command button just clicked.
Yes, they can, and you even don't need to have sub-projects dir, just place sub-project-1 in my-project dir.
Usually (at least this is what scala/scala-seed.g8 ends up with) project subdirectory doesn't ends with an extra s like your directory structure.
Interesting question, I tried some wonky stuff like declaring a public variable, then calling a Sub from the Function and putting the result of SpecialCells.Count into the public variable and accessing that from the Function.
Surprisingly, calling the Sub from the Function led to a different result than calling the Sub separately.
I can check its returned value and decide whether to exit the sub that calls this function.
Sub Menu
The easiest and naive answer is to traverse your array and find the longest subarray starting at the current index.
Have 2 pointers start and end, start being the start of subarray, end being end (exclusive).
An int sum to keep the subarray sum.
An int len to keep subarray len.
Keep moving the end pointer by:
[code snippet]
Which will find you the longest subarray with sum < k with start with start
you can substitute "Value2" with a variable and it should work.
Try putting "Call" in front of the sub when you call it-
Get rid of the parentheses when calling a Sub:
Alternatively, as @niallmcfc points out, you can call a sub like this:
Calling a Sub without Call and enclosing a parameter in () actually changes the behaviour of the Sub
Calling a Sub it like this:
This only matters when you intend the Sub to modify the source parameter passed to it.
Django doesn't support "subapplications" per se.
This will work (create the application basic structure), however app and subapp1 will still be considered as two unrelated applications in the sense that you have to add both of them to INSTALLED_APPS in your settings.
Create sub_app1 directory in app directory
python manage.py startapp sub_app1 app/sub_app1
As per my understanding, you are looking for nested submenu.
I now understand that I would need to separate each item into its own string and then sub.
As [memetech (hyper-link)] points out [in the comments (hyper-link)], the is an issue tracking this since April 2017:
[moby/moby issue 32582 (hyper-link)]: "[feature] Allow mounting sub-directories of named volumes".
In the meantime, I use this workaround to mount the whole volume on a separate path and then symlink it to the sub path.
The /subdir must exist in the volume.
Now anything read or written by the webserver will be stored in the volume subdir and can't access the other data.
What if you modify your above posted query, to replace the subquery with JOIN (INNER JOIN) like below.
This gets us the list of invoice IDs which were the subject of the first enquiry of the month on behalf of each distinct ClientID.
One method is to use substring_index() and eliminate the extra subquery:
Python functions, methods and objects with a __call__ method are all callable and could be used to supply foo with an argument sub.
I started building solution similar to LIS (Longest Increasing Subsequence) and then optimised it upto O(n).
Pub/sub peers can connect and disconnect independently; messages are saved to buffers based on HWM settings, automatically sent upon peer availability (store-and-forward)
Topic subscriptions support prefix matching with pub/sub enveloping only; NEWS subscription matches NEWS* messages
Pub/sub clients depend on redis for connectivity
Wildcard matching for selective topic subscriptions like news.
I would say ZeroMQ is more robust, it offers real simple load balancing and also more than pub-sub, like request reply among others.
But if you are only after pub-sub, redis is much simpler.
If I was only doing pub sub, I would pick redis, else I would pick ZeroMQ.
I have been researching this myself as I needed to decide whether to use Redis pubsub or ZMQ pubsub for communication layer for distributed systems.
ZMQ pubsub innately connect directly i.e.
For Redis pubsub, both subscriber and publisher need to connect to Redis.
The lack of middle-man in ZMQ means subscriber needs to somehow know to connect to publisher to get the message.
In my system where application spawn publishers that needs to send info to subscribers, there is no way of doing that without having forwarder device that subscribers connect to before my application starts.
if your application is on the subscriber side where there is publisher daemon that you want to get info from, then i would go for ZMQ because you can directly connect to publisher.
if your application is on publisher side, then i would go to Redis pubsub because subscribers are already connected to Redis listening.
You define your subcommands in a list, and then identify via $state which command you are in.
The subcommand comes first (_play_cmds is a list of subcommands with a description for each one), then come the arguments.
The arguments are built based on which subcommand you are choosing.
Note that you can group multiple subcommands, if they share arguments.
When recursive is set, ** followed by a path separator matches 0 or more subdirectories.
In earlier Python versions, glob.glob() cannot list files in subdirectories recursively.
To find files in immediate subdirectories:
For a recursive version that traverse all subdirectories, you could use ** and pass recursive=True [since Python 3.5 (hyper-link)]:
The [Path.glob() (hyper-link)] method supports the ** pattern, which means “this directory and all subdirectories, recursively”.
glob.glob('**/*.txt')               :matches all files ending in '.txt' in the immediate subdirectories only, but not in the current directory
glob.glob('**/*.txt',recursive=True):matches all files ending in '.txt' in the current directory and in all subdirectories
The command rglob will do an infinite recursion down the deepest sub-level of your directory structure.
I believe this answers the intent, however, which is to search all subfolders recursively.
You can use the function glob.glob() or glob.iglob() directly from glob module to retrieve paths recursively from inside the directories/files and subdirectories/subfiles.
named subroutines are created at compile time so their lexical
  variables [i.e., their 'my' variables] get assigned to the parent
  lexicals from the first execution of the parent block.
If a parent
  scope is entered a second time, its lexicals are created again, while
  the nested subs still reference the old ones.
In other words, a named subroutine (your b), has its @x bound to the parent subroutine's "first" @x, so when a is called the first time, b adds a 1 to @x, and both the inner and outer copies refer to this same version.
Anonymous subroutines don't exhibit this problem, so when you write my $b = sub { ... }, the inner @x always refers to the "current" version of a's lexical @x.
The following works for me, change the sub name as needed:
The subquery looks for the list of EmployeeID in the USA.
Then it uses that list to select the orders made by the subset of Employees in the USA from the Orders table.
Then (You can use hash or key for sub-partitioning):
In this case - Since each partition is devided into two parts,
How will mysql devide the record to the subpartitions?
after all mysql don't know how many records will be entered into each partition/subpartition
@Nupul is exactly right: you're not subclassing your GenericView.
In fact, subclassing isn't really the right word here, since JavaScript doesn't do classical inheritance.
You can use the events object in both parent and subclass without extending in it each subclass.
and your RewriteCond %{HTTP_HOST} https://example\.com/sub condition should be RewriteCond %{HTTP_HOST} ^example\.com$ .
For this decision it's not relevant whether you use a separate subdomain or a folder.
Once found it, I can print the current category sub categories.
If the current category has no children, than I will just print the father's subcategory.
In this way you can have infinite subcategories and still being able to display a sub category list.
Let $parentCategory be your Main Category, then this collection will load all subcategories, two levels below:
In order to populate a subdocuments, first you will need to explicitly define the document collection to which the ID references to.
Into each sub-report:
 - Go to Database Expert \ Edit command (or create if you haven't yet)
 - Create a parameter, name it QueryBegin
 - Double click on the parameter and type the rest o the query, so that you should have this Command:     {?BeginReport} and Group_Type ='PerfInv'
Now in the Main Report:
 - Right-click on subreports, then Change Sub-Report Links
 - Pass to BeginReport parameter the first part of the query, taking it from where it's stored
You have a sub which is named macro3.
This sub has a missing end sub statement.
But why you don't delete `Sub Macro3().
nest menu level 2 inside of the subject li.
Please check that the sub name is not the same as the module name and that you haven't used the same name in another sub as this can cause the definition error.
Note that guaranteed delivery is not limited to pub/sub only, and it can be done with fanout too.
And yes, pub/sub is a very basic description which can be realized with specific methods like fanout, direct and so on.
Pub-Sub is a generic messaging pattern but not an exchange type.
Pub-Sub is generally understood as a pattern in which an application publishes messages which are consumed by several subscribers.
And queues deliver messages to subscribers.
In Topic exchanges, the routing key from the publisher is matched up to the binding key from the subscriber in order to make the routing decision.
use technical ids (using IDENTITY, or similar), so that you can have more than 10 subcategories
This is absolutely subjective, of course.
I'd recommend going with option 1 - keep sub-category unique within category.
For each I want a subcategory
Notice that Orange is a sub-category within each category.
It's easy to change without affecting Orange sub-category under Colors.
If your UI is built in such a way that Marketing can control subcategories of Colors whereas Production can control subcategories of Fruits, this design will allow Marketing to work with their subcategories without stepping over Production's subcategories.
Remove "display: none;" property form submenu ul.
For example, you have two sub-navs.
Updated to add calls to closeSubNavs() when closing the mainMenu, and when opening any subNav.
When closing the main sideNav, you probably also want to close any sub-sideNavs that remain open, yes?
Also, before opening any subNav, call closeSubNavs() to close any others that are open.
In this case I prefer pre-assign the ID to the sub-document (i.e.
sub._id = ObjectId() or use uuid package if you prefer uuid): is clear and predictable.
Also remember that if you frequent query by a subdoc id is good to add (using ensureIndex()) an index for this use case in the collection.
Using the create method of MongooseArrays, [link for doc (hyper-link)], the mongoose will create an _id and do all the validations and casts it needs, so if the save process is fine the created subdocument you could just use the _id of the subdocument you got with the create method.
[Sub statement (hyper-link)]
When you empty a subgroup, remove it.
How to refered subdocument array Object id to another model..and also how to use populate for this "brandid"..
Further, clicking 'seasons' closes the first level submenu instead of opening the second level submenu.
If you want the code in your function or sub to execute, you must call it.
When you put subreports one directly below the other, and the upper one 'grows', you will see the behavior you describe.
The only alternatives if keeping them both in the same section :   place the lower one far enough down to not be impacted by the upper sub reports growth, or fix the upper sub report so it cant grow.
See [How do I return nothing from a subroutine?
A subroutine returns a list of scalars in list context which you use, then assigned to variables.
Another alternative is to have your sub return an array ref instead of a list.
And then you can return undef directly, your caller would be able to check that easily enough: my $result = my_sub(...);.
This code now works for me (you don't need the other sub).
You also had Public Sub Worksheet_Change which I imagine you typed freehand whereas it should be Private (I don't know what difference this makes though).
Possible solution for 4 levels of sub-domains:
you can use optgroup html tag to differentiate between boards and sub-boards.
In other way you can use text-indent style for sub-boards option to display differently.
Your sub has two End Sub statements in it.
In VBA, you cannot have an End Sub without a preceding Sub.
Use Exit Sub if you want to leave the subroutine before reaching the end.
you cannot hav a sub defined inside another sub.
maybe you want to call one sub from the other, in that way you make the call or copy-paste the code inside the sub you don't need.
Yes, according to these two execution plans, in this case, the subquery method has a lower expected cost.
Specifically in this case, the subquery only has to do a very quick scan of the PK index.
The situation might be different if the subquery involved columns that weren't part of the index.
I personally do consider www to be a subdomain, and in case of 'second-level'-domains (.co.uk) I would in fact consider co the domain name and whatever comes before it would be a subdomain.
The only thing I actually did take into consideration is that some.deep.nested.sub.domain.com will give you sub instead of some.
I'm very curious about the problem you are trying to solve by trying to isolate the subdomain, as in itself it does not have any meaning.
I can think of situations where you'd like to display a 'nickname' of sorts based on a subdomain, but then I recon you'd know the patterns to expect.
From a technical point of view, having only the subdomain would be useless.
In practice, some SQL servers perform better if you trick it into optimizing it's queries through sub-queries and the like.
Subqueries are usually fine unless they are dependent subqueries (also known as [correlated subqueries (hyper-link)]).
If you are only using independent subqueries and they are using appropriate indexes then they should run quickly.
If you have a dependent subquery you might run into performance problems because a dependent subquery typically needs to be run once for each row in the outer query.
So if your outer query has 1000 rows, the subquery will be run 1000 times.
On the other hand an independent subquery typically only needs to be evaluated once.
If you're not sure what is meant by a subquery being dependent or independent here's a rule of thumb - if you can take the subquery, remove it from its context, run it, and get a result set then it's an independent subquery.
If you get a syntax error because it refers to some tables outside of the subquery then its a dependent subquery.
Many optimizers can take a dependent subquery and find a way to run it efficiently as a JOIN.
MySQL has a [bug (hyper-link)] where an independent subquery inside an IN expression is incorrectly identified as a dependent subquery and so a suboptimal query plan is used.
There are some cases where correlated subqueries are plain inefficient, this one below is better written as a JOIN
(By the way, protected is not quite the same as sub-class and package, as non-static protected methods (if not in the same package) can't be called on arbitrary objects of the declaring class, but only on objects of the subclass the code is in.
Being-in-the-same-package is simply considered a closer relationship than being-a-subtype-of.
This way no other classes, except the subclasses can access that member which you market as protected.
You will end up with one class in one package, if you desperately want only subclasses to access that protected member.
You simply need to be in your root folder and then add the submodule folder.
Now when you clone the project you simply need to init and update the submodule
will fetch the latest changes from upstream in each submodule, merge them in, and check out the latest revision of the submodule.
Instead of using the superproject’s recorded SHA-1 to update the submodule, use the status of the submodule’s remote-tracking branch.
This is equivalent to running git pull in each submodule.
Parallel fetches of submodules
Using git submodules, one Git repository can include other Git repositories as subdirectories1.
The top-level repository specifies which submodules it wants to include, and which version of each submodule.
When you fetch into the top-level repository, you typically want to fetch into the submodule repositories as well:
If you have a lot of submodules, all of these fetches can be time-consuming; git fetch is essentially run in each submodule in turn.
But now you can speed things up by fetching from multiple submodules in parallel.
Now, I am able to create Bitbucket Repository Structure with sub-repository/sub-folders.
That's all very cool, but it doesn't limit what a subcommand could be.
Some systems let you put "global" options before the subcommand.
You can put a getopts loop before the subcommand execution if you want to.
Remember to shift before you fall into the subcommand execution; also, reset OPTIND to 1 so that the subcommands getopts doesn't get confused.
Is there a case where signed flag will be set without carry (or vice versa) during sub instruction ?
public class SubWindow extends CustomComponent to public class SubWindow extends Window
That is the standard way of creating a subwindow, exactly the same way you create the main window.
I would also move the mainWindow.addWindow(myWindow); outside of the class and not pass the mainwindow object to the subwindow, because that is not really the part of the subwindow object.
Typically you would introduce a parent_category_id column in the the categories table, which links categories and subcategories together.
You have to be careful not to link a category to itself of course, and if you have multiple subcategory levels then you want to avoid the presence of loops.
You would extract the subcategories by a self-join on category between id and parent_category_id, then a join to the article table.
If you had articles that could be joined to the category or the subcategory, then:
There is a scorer navigation API: the basic idea is you write a collector and in its setScorer method, where normally you would save a reference to that Scorer to later score() each hit, you can now walk the tree of that Scorer's subscorers and so on.
Using all of this, you can stash away references to the subscorers you care about in your setScorer method, e.g.
In the 3.x series this is a visitor API limited to boolean relationships, in the 4.x series (as of now only an alpha release), you can just get the child+relationship of each subscorer, so it can work with arbitrary queries (including custom ones you write or whatever).
This is because this functionality generally didnt work since disjunctions (OR queries) always set their subscorers 'one doc ahead' of the current document until some things were fixed last week, and those fixes didnt make it in time for 3.6.1.
4.x series: [http://svn.apache.org/repos/asf/lucene/dev/branches/branch_4x/lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java (hyper-link)]
3.x series: [http://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_3_6/lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers.java (hyper-link)]
The easiest way for that purpose is to make a custom conditional function that you will use in the concerned related template content-product_cat.php where the this subcategory title is hooked.
That is a nice pattern but you forgot On Error GoTo SubError
Surprisingly (I always use Resume <Exit> in error handlers) GoTo SubExit doesn't work for me.
Forgive me if you already know this, but there is another way to get the item into the validate sub-routine that might work better for you.
You can "pass in" a variable to a subroutine (also called methods or functions).
Variables that you "pass in" to a subroutine are called arguments.
To use subroutine arguments, you have to do 2 things:
Define the arguments in the subroutine definition
Specify the variable to "pass in" when you call the subroutine
Notice how I put item between the parenthesis on the call to the validation subroutine on the last line.
Modify your code as follows (change End to Exit Sub):
It is very hard to answer your question without seeing the code in all three subs.
If this helps, I recommend making another set of 3 subs to test blank items first.
An alternative option is to pass variables from sub to use a Public Function like this:
I left out that sub out since it served no purpose.
Also file handle $fh can be close after sub1 call
If you want to list all the sub directories  which contains only files then you can use this
but if you want just want to parse through all the directories & sub directories 
then you can use this
And then click on Run Sub/User Form button (or click on F5 key) for run your macro.
I haven't put in all your styling but i got your sub menus working.
Thus, add an extra loop when running in the 'ari' subfolder as:
My approach to this would just have a check on subfolder value and descend to it and create the required directories.
Test it by going to Greentech -> Sub-menu2 -> Sub Sub-menu2.
to add sub-menus you just need to add an ul before closing the parent li tag
Please update your codepen demo to be at the top, or have the sub menu items appear above bar.
As you can see, that creates a new strong reference to the sub[1].
There wouldn't be any problems if the $y created by Sub::Quote was an alias for your $y.
No, there is not a way to programmatically construct a subquery using Yii's [CDbCriteria (hyper-link)] and [CActiveRecord (hyper-link)].
You can still do subqueries a few different ways, however:
You can also do a join (which will probably be faster, sub-queries can be slow):
One interesting alternative idea would be to create your subquery using the Query Builder's [CDbCommand (hyper-link)] or something, and then just pass the resulting SQL query string into a CDbCritera addInCondition()?
You can always extend the base CDbCriteria class to process and build subqueries somehow as well.
Get the subquery:
Add the subquery condition:
Source: [http://www.yiiframework.com/wiki/364/using-sub-query-for-doubletts/ (hyper-link)]
[3 Ways to Call a Private Sub from Another Module (hyper-link)]
Here's a shorter version without the subselect:
I had a similar question but the query I had was a sub-query with the comparison data in the main query.
ignoring the complexities of this, I realized I couldn't get the value of a.code into the subquery with the double sub query described in the original question
The table is very large, and using a sub-query dramatically increased the query time.
You should add SubFragment to Fragment the same way like you add Fragment to Activity.
Adding SubFragment to MainFragment should look like:
The Publisher will handle putting messages in the Subscriber's queue.
To handle those messages, you must implement the IHandleMessages<T> interface on a class in your subscriber.
You can simple drag and drop the sub-menus under the sub-menu.
Sub-menus can be pages, custom-link and anything from left side of menu page.
Just place it as sub-menu of sub-menu.
The simplest solution is probably to substitute the ArrayAdapter and the android.R.layout.simple_list_item_1 that you are using with a SimpleAdapter and the android.R.layout.simple_list_item_2 predefined layout.
This layout is composed by two TextViews, with an id of android.R.id.text1 (the "item") and android.R.id.text2 (the "sub item") respectively, which you will need as a reference for the SimpleAdapter to work.
For example, if you want to show the title and date of a RSS item in the "item" and "sub item" views respectively, you use new String[] { "title", "date" } as the array of strings argument, and new int[] { android.R.id.text1, android.R.id.text2 } as this argument.
