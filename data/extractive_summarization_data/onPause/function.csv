" So where onCreate is called when the activity is first created, onPause it's going to be called when you leave the activity. "
whenever a new ACTIVITY starts the previous activity's onPause will be defiantly called in any circumstances. 
onPause is guaranteed to be called on Activity A (No matter whether Activity B is non-full-sized transparent or full-sized). 
onPause() is always called on your Activity if it is in the foreground when Android wants to do something else.  It may start another Activity which may result in your Activity's onStop() getting called. It may just call onResume() on your activity. It may just kill your process without calling any more of your lifecycle methods.
"Since onStop() is not guaranteed to be called, you can't always do in onStop() what is done in onPause(). "
What is the good reason for always having onPause() before onStop().  We can do in onStop() what is done in onPause().
 onPause is called when your activity is about to resume any previous activity. 
onPause() is called when your activity is no longer at the top of the activity stack. 
"A Dialog by itself is not an Activity, so will not replace the current Activity at the top of the stack, so will not cause anything to pause. "
"A dialog (lower-case) does not need to be implemented by a Dialog class, however. "
"If you can still see any part of it (Activity coming to foreground either doesn't occupy the whole screen, or it is somewhat transparent), onPause() will be called. "
"**I am not referring to an Android Dialog here, rather a conceptual idea of something that pops up and only obscures part of the user screen. "
onPause() is always called.  This is guaranteed.
"If you need to save any state in your activity you need to save it in onPause().  onStop() may be called after onPause(), or it may not. Depends on the situation."
" In onPause it could be possible when it is either about to resume a previous activity or it is partially visible but user is leaving the activity.  This is typically considered as the best state to commit unsaved changes to persistent data, stop animations and anything that consumes resources. "
 So use onPause or onStop to save the data or state. 
" And onPause it will be onPause, onResume, onResume.  And start. "
" [SOUND] onPause indicates that the activity has lost focus, followed by onStop when the app is no longer visible. "
" Alternatively, through the static registration, you can also register and unregister a receiver at one time via the context class, Register receiver method either in onCreate, or in onResume activity methods. "
 And unregister receiver methods either in onDestroy or in onPause activity methods. 
"Practically, one should consider the difference between “onPause()” and “onPause() + onStop()”. "
"Whenever some new activity occurs and occupies some partial space of the Screen.  So your previously running activity is still visible to some extent. In this Case, the previously running activity is not pushed to Back Stack. So, here only onPause() method is called."
onPause()- Screen is partially covered by other new activity. 
The Activity is not moved to Back Stack. 
onPause() + onStop()- Screen is fully covered by other new activity. 
The Activity is moved to Back Stack. 
1- a part of previous activity is visible or the new activity is transparent: only onPause will be called. 
"NOTE 2: if its an Activity whose theme is set to a dialog, the behavior will be just like a normal activity. "
NOTE 3: apparently a system dialog like permission dialog since marshmallow will cause onPause. 
"No, if some activity comes into foreground, that doesn't necessarily mean that the other activity is completely invisible. "
onStop will only be called when Activity A is completely overridden by full-sized Activity B. 
So in onPause you can save an Activity's state or some other useful info if required. 
Being in the foreground means that the activity has input focus. 
