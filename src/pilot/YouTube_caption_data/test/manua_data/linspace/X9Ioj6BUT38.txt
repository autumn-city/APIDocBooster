Yeah.
So in the second video, I want
to briefly talk about non-pay
array, construction, and indexing.
So array, construction routines are some
building routines or functions that I
find useful for constructing a race.
And that is sometimes useful.
If you want a place holder array
that you want to fill out with
certain values later, for example.
So let's show you what I mean.
So using the ones function, we will create
an array consisting of only the numbers.
One could look like this and note that
this is the, uh, defining the shape.
And, um, the shape is here three by three.
I can also make it three by four,
and then it will be a three by
four matrix consisting of once.
There are many other types
of arguments you can provide.
For example, a D type you can set
it to, um, Integer into a 64 or
interject by default is the same.
If you have a 64 bit machine.
So it will be an integer
array of ones and so forth.
And the same is true for the zeros.
So always remember if you want to find out
more information about these functions,
you can type in them, pay once in the help
function so you can call help on this one.
It will give you some information here.
Personally, if I'm already in a
Jupiter lab notebook or I Python
interactive shell, I use, should we
use the question Mark, which is oops.
Once it was just, you should be faster
and it also gives you the nice color here.
Usually it's easier to
read this way, I think.
Um, yeah, there's more information here.
So that shape, for example, the D type.
But before it will be the float 64.
And, um, there's also
something called odder.
There's something called
a, um, column or row order.
And it has something to do with affect
how things are laid out in memory.
So C stands for C code.
So in, um, C code, it's using the
row major style, um, in memory.
And if you choose F.
We'll do a Fortran style layout and
you don't really have to think or
worry about it and practice it won't
change the results or anything.
If you do have a computation, it's just
how the, these are stored in memory.
And this would make it more efficient.
If you couple your non-paid code with.
C code or, and code in
certain applications.
But, uh, in this class you won't
have to worry about things like that.
It's just an additional tool in,
uh, software engineers toolbox
to make non-payers fast with
both C and Fortran code anyway.
So it wasn't really too much detail.
Alright.
Yeah.
Maybe why these betas
placeholders are useful.
I mean, even though let's say you have
a, you want an array that consists
of all the values should be all 99.
So each value should be 99.
Uh, how you would create it.
You can still use the zeros function,
for example, uh, you can do zeros.
Plus 99, for example, it
will create your, your array.
So these, uh, pretty efficient,
I would say, uh, ways of
creating a race correctly.
Um, I usually use either ones or zeros.
It doesn't really matter.
Sometimes it depends on
what I'm trying to do.
I use either or, but we will
see examples of that later.
Just wanted to mention that these exist.
There's also one called empty, which
makes a completely empty array.
So we will talk more about this data
in this class when it's useful, but,
um, MTS wish we had a bit faster,
cause it doesn't fill the array.
It just creates an empty array.
Uh, it doesn't fill it with memory, uh,
values in the memory, but um, usually in
all applications, we don't have to matter.
Uh, we don't have to worry about these
little details the way it will just
put some arbitrary values in here.
Um, some arbitrary menus from memory.
So years just coincidence 99,
but, um, Could be some, you
see some arbitrary values.
So if you use empty, uh, don't pay
attention to the extra value is
just treated as an empty array.
It's just using some method, the fastest
method possible to create an empty
array, basically without boring, it goes
inside, but yet actually that's maybe
too much information for this class.
So there's also the I function,
which was, I think like a nice
pan on the identity matrix.
So this will create an identity matrix.
Um, a three by three matrix can also
create a diagonal matrix consisting
of the values three or three by three
matrix consisting of the values.
Three let's maybe use a different number
here because this would be I, okay.
Sorry.
These are the values along the diagonal.
See, I already forgot what these mean.
Such would be one, two, three, so we
can create agonal matrices like that.
And this is usually something
we rarely have to do.
What's more useful though, is
talking about the, a range function.
So the age range function will create,
um, non-pay array starting at the first
value and stopping at the second value.
And this will be a half open interval.
So this will be the start
value and it will be up to the
10, but not including the 10.
So let's create this object so
you can see it's doing four,
five, six, seven, eight, nine.
Can also do this with integers.
And you can also just omit
the stopping position.
So it will Kia create the values zero.
So sorry.
So if you only use one value, it will
be actually the stopping position.
So, um, if you only use one
variable, zero one, two, three, four.
So, and this is similar to using
a Python range object, right?
So.
Actually nowadays we are
nowadays, it's a generator.
So we have to, if we want to show it
how it looks like call us done it.
So, but this will be a Python list
and this will be a non pirate.
So it's kind of equivalent in that way.
You can also include a step.
So this means basically I'm skipping
three second venue in this case, it will.
Um, so for instance, here, it will
then, um, skip all the even values.
Uh, yeah, so one, three,
five, seven, nine.
So it will start at one and then all,
um, all the second value, uh, will be
every second video will be included then.
Okay.
And yeah, the, a wrench function
is essentially what you know,
from Python, um, as the range
function, but range can't do floats.
Right?
Oops.
So we can't do.
This ranch, however we could, if
we wanted to do it with InterGest.
So this would be the integer equivalent.
Yeah.
One very useful function
is the Lin space function.
So a range.
Creates numbers in a certain interval.
And you have to say specify what
the interval is by default it's one.
So it's incrementing it by one.
I have a, um, maybe it wasn't quite
clear here, so we can actually
increment it by very small values.
We can increment it by
very small interval.
It's like 0.1 here.
So in this way, we're using a range.
We specify the interval range.
A related function is
the Lin space function.
And this will create an interval
with a certain number of values.
So here we specify the starting
point and the ending point.
And then we say, how many
values we want in this interval?
So again, here we specify the entire
wall width, and here we specify the.
Taught a certain bin width.
And here we specify the total
number of values in that interval.
So here should be five values.
So you can see it starts at
zero entered one and there
will be five values in total.
So zero one, two, sorry,
one, two, three, four, five.
And, um, I can then also let's
say create 10 values and so forth.
Um, and it, I mean, it
works with arbitrary.
In tablets, I can use mental health, let's
say five to 15 or something like that.
It will create values between
10 values between five and 15.
And yeah, these values are evenly spaced.
So I could, for example, going here,
enter a six and then we will have six
to 15, which are exactly 10 numbers.
Right?
So in this case, they will also, you can
easily see, they will be evenly spaced.
Okay.
So yeah, what's useful to remember is
the age range function for creating
inter volts with a specified.
Bin width and the Lin space function
for creating a certain number
of values in a certain interval.
And then, yeah, also the
basic array creation functions
like, uh, zeros and ones.
And I'm not asking these things on
the exam, by the way, I don't ask
you to create an array in the exam.
Uh, at least I don't plan to, um,
but it's useful to know that for the
homework and your project and so forth.
So let's talk about, uh, re indexing.
And now I will talk about fancy
indexing in a later video.
So this is just the indexing basics.
So the very basic way of indexing and
non-payers later, I will talk about
a concept called fancy indexing.
So far one, I mentioned array, the
indexing works similar to a Python list.
So if I have a Python list,
that's called us LST and we put
the videos on two, three in here.
If I want to retrieve the first value, I.
Use the spare records, right?
So it's the one and this is the video
too, and this is the venue three and
the same way we can do this, an empire
race of a one dimensional non-pay rate.
We use the square brackets
to retrieve these numbers.
Um, What's also useful is the slicing.
We can also do that in a Python
list so we can execute it like
this and it slices the list.
Same way we can slice.
And , um, not that it's the same
for Python lists and Ampyra is we
don't have to write the first index.
If we started zero.
If I do something like this, I
would include the one because I want
to start at the second position.
Have if I want to start at the beginning.
This one.
And this one does is exactly the same.
Um, next.
If I have a two dimensional array,
what's different from Python lists.
So we have a two dimensional
Ray sort of a one dimensional.
We can use this comma notation.
So the first position refers to
the index or the first dimension.
And the second one refers to the
index over the second dimension.
It's maybe.
Easier to see in this figure.
So with this first value, we are
indexing over the first dimension,
which is the excess zero.
So we access either the
first row or second row.
And with the second number we
index over the second dimension.
So we go by first row, sorry, first
column, second column, third column.
So in that way, this one would
give us the first value because
it's the first row, first column.
And.
If I do this one, for example.
So let me just execute to show
you that this is actually correct.
So it gives me the one here.
So this one would give me the number two,
because it's still the first row, but
now it's the second column and so forth.
Um, we can get the lower right
with minus one minus one.
So this should return the six.
And this is because minus
one means the last element.
So here, if I do minus
one, this would return.
The number three, because
it's the last element.
So it's the same as typing too.
However, if we wait, why is
it useful to use the minus?
If we have a very big array, it
can be inconvenient to count.
So we would have on two,
three, four, five, six, seven.
So if we want to have the last value,
we don't have to really memorize what
the length of the race we can just have
minus one, it gives us the last value.
And then again, you can
do also the same thing.
Minus two would be the
second last, in this case.
Uh, this is the last one and
this is the second last one.
So it should return to here and so forth.
Um, yeah, it's just another example.
That's returning the four
here, cause it's a first role.
And, um, actually this
should return to five.
I'm not sure why I put
the image around here.
Sorry.
I was confused.
So, um, this should return that.
Two because it's the first row
in the second column, I was not
a one, one would return the five.
I don't know what I did here anyways.
Um, we can also return an entire row.
So, if we omit the second, if
we do this or this, it will
give us the entire first row.
I think this should also work and
we can also type this or three
ways gives us the same results.
Um, so this one, uh, the column basically
means all, so we want all values.
So if I do something like this, it will
give us all the values in the array.
And this one, uh, basically too, because,
uh, we are omitting the second one.
So if we admit something, then it
automatically means this one here.
So for example, if I want the first
column, I can do the zero here.
So it's one for one for second column.
It's two, five, right?
Going over the second column and so forth.
If I only want the first row.
Um, I can, uh, do it like this.
So it's one, two, three, because we
admitted the second one and so forth.
So we are here just shortcut,
um, uh, sorry, some meditation
entire first column.
So that's what I did before.
And we can also slice in the
second dimension, like we
sliced in the first dimension.
So I can, for example, say I'm the first.
Two rows and the first
column, second column.
So this would give me the two five,
because we go over the first two rows.
We only have two rows.
Um, maybe this is not the best example
because you only have two rows.
And then we go out for the first column.
So let's maybe do the first row
and the last two columns so we can,
um, do one, two, so we can type.
One three, because the
last value is not included.
It's similar to the age range.
When we have a range three, it
will only give us zero one and two.
So in this way, the three is not
included, so it will end up at two.
So this gives us, um, for the first,
uh, the row and the second position.
Cause we started indexing zero.
So we'll give a go here.
And then the last two
columns are these two here.
This why it's five, six.
Yeah.
And that's returning the first
element in an upper left corner.
I'm not sure why I put it here again.
Um, alright.
So that was the basic index thing.
So, um, I recommend you
to toy around with us.
Um, it's not super, um, complicated.
Once you get the hang of it.
You just, um, think of
this first dimension here.
As the Rose, if you have a two dimensional
array and the second dimension is
the columns, and then you can specify
which rows and columns you want.
And that's all you need to
know about indexing for now.
But later on, I will show you
some tricks called fancy indexing.
All right.
In the next video, I'm going to
show you some non-paid array,
math and universal functions.