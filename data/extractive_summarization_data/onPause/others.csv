"A dialog**, for example, may not cover the entire previous Activity, and this would be a time for onPause() to be called. "
"In most Activities, you will find that you will need to put code in onResume() and onPause(). "
" And let's see what happens when config changes, how it affects the activity.  So, on configuration change, the Android first shuts down the activity by calling method in sequence, that is onPause, then onStop and then onDestroy. "
"For instance, an activity can be visible but partially obscured by a dialog that has focus.  In that case, onPause() will be called, but not onStop(). When the dialog goes away, the activity's onResume() method will be called (but not onStart())."
" The implementation of onPause is very fast because the next activity is not resumed until this method returns.  And is either followed by onResume, if the activity returns back to the front, or onStop, if the activity is becoming invisible to the user.  This is how we implement this onPause callback method. "
" Firstly, knowing the OS can terminate your app's process without warning at any time you can't rely on having an onExit() handler that will be called when your app is closed.  Instead, your Activities should listen for onPause handlers that indicate your app is no longer active.  At this point is may be terminated at any time, so it should save any user data to prevent potential data loss. "
"On other hands, if some new Activity occurs and occupies the full screen so that your previously running activity is disappeared.  In this Case, your previously running activity is moved to Back Stack. Here, onPause() + onStop() are called."
NOTE 1: if a dialog starts on top of an activity NONE of onPause or onStop will be called. 
"For example, it is not uncommon to implement one with an Activity whose theme is set to that of a dialog.  In this case, displaying the dialog-as-an-Activity will cause the new Activity to be on the top of the stack, pausing what previously was there."
"If you cannot see any part of it, onStop() will be called. "
"You usually don't have to do anything in onStop(), onStart() or onRestart(). "
" So, prior to being restarted again, it is called after your activity has been stopped. "
" On onResume, called when the activity will start interacting with the user.  At this point your activity is at the top of the activity stack with user input going to it. "
 onStop is called when your activity is no longer visible but still exists and all state information are preserved. 
 It has now moved to the top of the activity stack and is always followed by onPause. 
" Start by freeing resources, stopping services, disabling sensor listeners and turning off location requests, and otherwise disabling anything that consumes resources.  all within the onPause handler of your Activities.  Take this a step further by avoiding singletons and custom Application objects within your application whenever possible. "
" So in this particular project I'm going to create my main activity and I'm going to put all the lifecycle methods: onCreate, onStart, onResume onPause, onStop, onRestart and onDestroy. "
" So let me just override other methods also.  OnStart and onResume... onPause... onStop... onRestart... and last, onDestroy. "
" So, if I now try to click on Home button, what should be the lifecycle now?  It should go to onPause first.  Then onStop.  So, onPause Finished and onStop Finished.  In the same manner, it should show here, too.  As you can see, onPause and onStop.  But this application is still not destroyed. "
" Last but not the least, how we destroy our application, that is the destroying lifecycle. "
" If I click my back button, it goes to onPause, onStop and all the way to onDestroy. "
 Now my application is indeed destroyed. 
" So you can see in Log also, onPause, onStop, onDestroy. "
 But you must be thinking that I can still see my application in this task manager. 
" And the other thing we want to do is to save the note.  So to do that, we're going to use another method called onPause. "
" Now in onPause, we can use that same database object. "
 We've seen onCreate and we've seen onPause. 
" If you forget this, the Android system reports a leaked broadcast receiver error.  For instance, if you registered a receive in onResume method of an activity, you should unregister it inside onPause method. "
2- previous activity is completely covered by new activity: both onPause and onStop will be called 
"The first activity with the fields is obscured by another activity, and the user can no longer interact with it. "
"However, it is still visible with all the resulting consequences. "
That leaves a question which activity is considered fully opaque and covering the whole screen and which isn't. 
This decision is based on the window containing the activity. 
"If the window has a flag windowIsFloating or windowIsTranslucent, then it is considered that the activity doesn't make the underlying stuff invisible, otherwise it does and will cause onStop() to be called. "
For instance: When a user traverses from Activity A to Activity B (FullScreen Non Transparent) following things happens 
Activity A's state changes to paused state (which calls onPause on Activity A) 
Then Activity A's state changes from paused to stopped state (which calls  onStop on Activity A) .  onStop is called because Activity B was full screen  non transparent activity. (If Activity B is non-full-sized or transparent then onStop is NOT called on Activity A)
