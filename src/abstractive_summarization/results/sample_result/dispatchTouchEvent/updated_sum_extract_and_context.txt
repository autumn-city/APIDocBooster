========================

[[Augmented API documentation]]:
This API is <dispatchTouchEvent> in android library.

[[[Function]]]: Pass the touch screen motion event down to the target view, or this view if it is the target.
The dispatchTouchEvent() method of a ViewGroup uses onInterceptTouchEvent() to decide whether it should handle the touch event itself or notify its children. The ViewGroup can steal the touch events through its dispatchTouchEvent()-method before it dispatches to the children. However, it stops dispatching if the ViewGroup's onInterceptTouchEvent()-method returns true. Essentially, dispatchTouchEvent is a controller that decides how to route touch events. 

[[[Parameter]]]: ev	MotionEvent: The motion event to be dispatched; boolean-True if the event was handled by the view, false otherwise.
When using dispatchTouchEvent, you're handling all touches in your activity. If you want to detect a specific touch, you can filter the touch by its type using the MotionEvent parameter. Both Activity and View have method dispatchTouchEvent() and onTouchEvent. The ViewGroup has these methods too, with an additional method called onInterceptTouchEvent. The return type of these methods being boolean, you can control the dispatch route through their return values.

[[[Notes]]]: None
While handling touch events, remember that the main extension methods are: ViewGroup.onInterceptTouchEvent which spies and/or intercepts touch events at the parent level and View.onTouchListener/View.onTouchEvent for main event handling. In simpler cases, View.dispatchTouchEvent routes the touch event to either OnTouchListener.onTouch if defined or to the extension method onTouchEvent. Moreover, if dispatchTouchEvent returns 'false', the event doesn't get propagated to the child. In contrast, returning false in onInterceptTouchEvent allows the event to still get dispatched to the child.