kron produces:
kron reshapes it to a combination of the shapes of A and B:
With your kron:
This call to kron is not memory intensive.
You can't find both A and B, given a K, because there could be many possible A's and B's to produce a certain kron matrix, K. Thus, alongwith K, you need either A or B to get the remaining input B or A respectively.
Case #1 Given A and K (kron matrix), you can find B with -
Case #2 Given B and K (kron matrix), you can find A with -
For vector inputs to kron, this would work -
It is because kron already reshapes the matrices in its arguments and doesn't dim-check further (assumes 2D).
From kron.m for full matrices we can see the problem:
You can either loop as you have done already or just modify the kron function and make sure that the remaining dimensions are preserved during kroning.
As I commented, your kron with 3 arguments is unknown.
With the kron that you added, the recursive step does:
For 2 items, your kron returns a nested tuple of arrays.
np.kron applies a np.asanyarray(b) to that 2nd argument, which results in a 4d array.
Applying your kron to  full *m, but turning the matrices into arrays:
Did you even test the kron function by itself?
Let's do the kron without reshaping:
In any case it's evident from the output that this tensordot is producing the same numbers - but the layout is different from the kron.
I can replicate the kron layout with
And omitting the reshape, I get the same (2,2,2,2) you get from kron:
Uncommenting the second line might affect where ones and kron comes from.
Now you just have to add a __kron__(self, other) method on the relevant types (assuming you have control over these types or they don't use slots or whatever else that would prevent adding methods outside the class statement's body).
Another solution would be to maintain a type:specifici function mapping and have the "generic" kron function looking up the mapping, ie:
If the Kronecker product only works on two similar classes, you can even do the type checking in the function :
Then, you just need to define a _kron_ method on the class.
This is only some basic example, you might want to improve it to handle more gracefully the cases where a class doesn't have the _kron_ method, or to handle subclasses.
However, there is nothing stopping you from defining a kron function that does the same thing; look for __kron__ or __rkron__ on the objects passed to it:
One possible way to improve this is by calling matlab.internal.sparse.kronSparse in some blockwise manner and store the intermediate results in the correct position of the output array, but this should require some careful thought.
BTW, I tried using the FEX submission that Ander mentioned ([KronProd (hyper-link)]) but it provides no benefit when you need to compute kron(A,B) + kron(C,D) (although it's amazing for kron(A,B)\b situations).
Kron totally fails.
Verify output by comparing against [kron (hyper-link)] for generic matrix sizes -
Hint no.2: For some complex functions (like kron), if your input and output is of fixed size, it might be possible to obtain register-level optimized, linear, non-iterative, non-branching code using computer algebra system like Wolfram Mathematica.
Also, mathematically speaking, the kronecker product of a row vector and a column vector is essentially their outer product.
So, you could do the same thing using Kronecker products as:
You can use kron:
kron doesn't work for 3D, but indexing does:
In case when the first operand is the identity matrix, then the result of the Kronecker product can be simply represented using cuSPARSE's bsr's format.
KRON(I, T)
Also in simple cases when the second operand is the identity matrix, the result of the Kronecker product can be represented using cuSPARSE's bsr's format.
KRON(S, I)
After cracking my head around in finding the index relation of the for loops to do the kronecker tensor product.
I point out that sparse.kron produces, by default a BSR format matrix.
If you specify another format, kron will not produce  those zeros:
res is computed by FFT from  mat = kron(C2, Rn), and this is (as you say) a wasteful way of doing kron(C2, fft(Rn)) since it the FFT along the k dimension is re-done for each of the 2×2 other dimensions.
But the point, presumably, is to do this for "entangled" states in the product space -- a generic likemat = rand(8,2) cannot be decomposed into factors kron(likeC2, likeRn).
Combining with kron will then always be wasteful.
The package Kronecker.jl may help for some things, but I don't think it knows about fft.)
This uses my package to handle kron-like operations; you could just write out the necessary reshapes yourself, too.
While the kron solution is by far the simplest (and you can always dump it into a list with [.tolist (hyper-link)]), let's look at a pure python implementation.
There are two parts here: how to implement kron, and how to reshape a list.
produces the same result as H = kron(A,B) except that the order of elements are changed.
So the expected result can be computed without using kron:
That is exactly what the error is telling you: kron must have an explicit shape.
If you do not want to pass the array sizes beforehand, you'd have to define kron as
You just need to define the allocatable array as allocatable, i.e replace the kron definition with;
The outer () surround the arguments being passed to the kron function, and the inner () provide the index into PI.
However, the two kronecker products are similar, via a permutation matrix, i.e., one has:
Then the two kronecker products are:
Remember that adding a bunch of vector outer products (which you can treat the Kronecker products as) ends up as a matrix-matrix multiplication, which BLAS's DGEMM can handle efficiently.
If we're progressively selecting pairs of vectors A and B and adding them to some 'running total' vector/matrix C, the following modified version of the above kron function
The initial kron function is DGER with alpha = 0 and C being an uninitialised (zeroed) matrix/vector of the correct dimensionality.
As for your original question, as far as i know none of those libraries implements a kron function, since it is only a "convenience" routine.
As there was a problem with the implicit impl variable of kron, I also rewrote the function call to explicitly state which variable to use to use
By copying the function and making it specific for Complex numbers, I was able to get the kronecker product to work.
Now I could also remove the explicit use of (kron.kronDM_M[Complex, Complex, DenseMatrix[Complex], Complex]).
Use [sparse.kron (hyper-link)] for the Kronecker product of sparse matrices.
[numpy.kron (hyper-link)] does not handle sparse matrices.
I am not sure about the definitions used by the [Vec Operator (hyper-link)], the [Kronecker Product (hyper-link)] and the identity matrix defined in the chapter:
to eliminate the need for explicitly calculating the Kronecker product and replacing it with a level 3 BLAS gemm call instead.
The other identity which could potentially useful would be to calculate the Kronecker product using an outer product (rank 1 update in level 2 BLAS IIRC):
Note again that the ordering of the resulting matrix will not be the same as the Kronecker product of the matrices A and B.
I am not aware of a CUDA library for computing the true Kronecker product of a pair of arbitrary sized matrices.
For example, that horrible kron thing you're doing...
You could refactor your kron nesting like this:
I don't know what "better" means but here are some alternatives to kron(eye(m),ones(n,1)):
sparse.kron(Hb, Γ) with your sparse Hb should give the same thing, but as a sparse matrix.
I suspect from the error message that kron(Hb, Γ)*[[1],[0]] is attempting a matrix product.
While the 2nd argument is clearly (2,1), I don't see why the first, the kron() is (3,3).
This way you can also avoid kron itself which is not the fastest itself.
Here is a vectorized version using kron (not as fast as [thewaywewalk (hyper-link)] 's answer):
Applying a numeric operation (such as kron) to a char automatically converts the characters to their [ASCII codes (hyper-link)].
The kronecker product of two vectors is just a reshaped result of the matrix multiplication of both vectors:
Using the rewriting of the Kronecker product given by Daniels answer
Here's the explanation that might also help you in the future:
Looking at the kron definition, the result when inserting an m by n and a p by q matrix has size mxp by nxq, in your case 400 by 1001 and 1000 by 1000, that makes a 400000 by 1001000 matrix, which has 4*10^11 elements.
because the size of the array generated by repmat([1 2 3],1,4) has always the same length while the length of the arrays generated by using kron and randperm changes according to the definiton of day and repeat.
Should work, broadcasting the kron to  all 3 planes.
kron is specialized rearrangement of the outer product of a and b.
[Why is numpy's kron so fast?
As I showed before, kron can be produced by applying a transpose and shape to an outer product.
or even better (a view of the kron witout copies):
Also that braodcast_to isn't faster, though that's largely the fault of kron (which my previous answer showed was on the slow side).
The solution has been modified based on the implementation of [kron in numpy (hyper-link)].
Note that this is not a generalisation of the kron implementation of numpy because this is not going to work for cases where you just want to do a straightforward kron operation.
Maybe np.kron() is allocating memory and then you're throwing it away.
If you're only multiplying EV_subset by ones, you don't really need to call np.kron().
You can certainly take a look at the source for np.kron.
(maybe this is kron(B,A) instead of kron(A,B); reverse A & B if needed)
This doesn't prove that kron is fastest, but I compared its time to how long it would just take to populate a similarly sized Array with ones, and kron did quite well:
Unlike kron, it's very readable and understandable.
Even so, I'd only use kron if you've identified it as a performance bottleneck.
It now rivals kron:
You can wrap the kron function and do as you would do in Matlab and Python.
Note that Kronecker product is defined on single channel matrices, so you need to split the planes BGR matrix, apply kron, and then merge back.
b is different, the most common suggestion is to use kron(a', ones(2,3)) but here are some alternatives: [A similar function to R's rep in Matlab (hyper-link)]
And voila, behold the Kronecker product of a and b.
But Atemp.^2./Btemp.^1.5 can be simplified to kron(1./(B.^1.5), A.^2) to avoid some of the large temporal matrices and increase the speed.
the kron_and_sum example)
#   1 MAG_AUTO            Kron-like elliptical aperture magnitude         [mag]
['#', '1', 'MAG_AUTO', 'Kron-like', 'elliptical', 'aperture', 'magnitude', '[mag]']
The [kron (hyper-link)] function does exactly that:
Others will get significantly slower for larger sizes but won't error due to exhausted memory (the kron solution for instance).
I removed the kron function because it wasn't doing anything here and CVXPY doesn't currently support Kronecker products with a variable left-hand side.
